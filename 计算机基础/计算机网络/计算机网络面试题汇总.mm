
<map>
  <node ID="root" TEXT="计算机网络面试题汇总">
    <node TEXT="网络传输场景面试题" ID="JJz8u8euYr" _mubu_text="%3Cspan%20class=%22bold%20underline%20text-color-blue%22%3E%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%9C%BA%E6%99%AF%E9%9D%A2%E8%AF%95%E9%A2%98%3C/span%3E" STYLE="bubble" POSITION="default">
      <node TEXT="网络分层模型（重要）" ID="CYJ2syboJR" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3E%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89%3C/span%3E" STYLE="fork">
        <node TEXT="OSI七层协议" ID="42LU5n8zGC" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EOSI%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE%3C/span%3E" STYLE="fork">
          <node TEXT="应用层" ID="53nx84iqHX" _mubu_text="%3Cspan%20class=%22bold%22%3E%E5%BA%94%E7%94%A8%E5%B1%82%3C/span%3E" STYLE="fork">
            <node TEXT="负责直接和软件进行交换的通信功能" ID="sHLqzxTPs5" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%B4%A3%E7%9B%B4%E6%8E%A5%E5%92%8C%E8%BD%AF%E4%BB%B6%E8%BF%9B%E8%A1%8C%E4%BA%A4%E6%8D%A2%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8A%9F%E8%83%BD%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="表示层" ID="RDzvjQEe1y" _mubu_text="%3Cspan%3E%E8%A1%A8%E7%A4%BA%E5%B1%82%3C/span%3E" STYLE="fork">
            <node TEXT="应用层数据编码和转换功能" ID="WI95piKV4Y" _mubu_text="%3Cspan%3E%E5%BA%94%E7%94%A8%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81%E5%92%8C%E8%BD%AC%E6%8D%A2%E5%8A%9F%E8%83%BD%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="会话层" ID="UPs9JYwEKH" _mubu_text="%3Cspan%3E%E4%BC%9A%E8%AF%9D%E5%B1%82%3C/span%3E" STYLE="fork">
            <node TEXT="控制计算机之间的对话和连接" ID="e2ilkqufKo" _mubu_text="%3Cspan%3E%E6%8E%A7%E5%88%B6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E5%AF%B9%E8%AF%9D%E5%92%8C%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="传输层" ID="bc99GEQet9" _mubu_text="%3Cspan%20class=%22bold%22%3E%E4%BC%A0%E8%BE%93%E5%B1%82%3C/span%3E" STYLE="fork">
            <node TEXT="负责两个设备间的端到端通信" ID="xYHFPQaiPQ" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%B4%A3%E4%B8%A4%E4%B8%AA%E8%AE%BE%E5%A4%87%E9%97%B4%E7%9A%84%E7%AB%AF%E5%88%B0%E7%AB%AF%E9%80%9A%E4%BF%A1%3C/span%3E" STYLE="fork"/>
            <node TEXT="负责进行流量控制和错误控制" ID="ZbCPd7NfWG" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%B4%A3%E8%BF%9B%E8%A1%8C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E5%92%8C%E9%94%99%E8%AF%AF%E6%8E%A7%E5%88%B6%3C/span%3E" STYLE="fork"/>
            <node TEXT="传输层包含TCP和UDP协议" ID="qINIIX9Il9" _mubu_text="%3Cspan%3E%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8C%85%E5%90%ABTCP%E5%92%8CUDP%E5%8D%8F%E8%AE%AE%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="网络层" ID="k2t6MYr5k3" _mubu_text="%3Cspan%20class=%22bold%22%3E%E7%BD%91%E7%BB%9C%E5%B1%82%3C/span%3E" STYLE="fork">
            <node TEXT="逻辑寻址和交换功能处理数据包路由" ID="wNnnBNMTZz" _mubu_text="%3Cspan%3E%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80%E5%92%8C%E4%BA%A4%E6%8D%A2%E5%8A%9F%E8%83%BD%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%8C%85%E8%B7%AF%E7%94%B1%3C/span%3E" STYLE="fork"/>
            <node TEXT="网络是可以连接许多节点的介质" ID="dRBQxMeP04" _mubu_text="%3Cspan%3E%E7%BD%91%E7%BB%9C%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%BF%9E%E6%8E%A5%E8%AE%B8%E5%A4%9A%E8%8A%82%E7%82%B9%E7%9A%84%E4%BB%8B%E8%B4%A8%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="数据链路层" ID="LexVm00p5b" _mubu_text="%3Cspan%20class=%22bold%22%3E%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%3C/span%3E" STYLE="fork">
            <node TEXT="提供节点到节点的传输，也就是两个直接连接的节点之间的链接" ID="IrvZGNg5D3" _mubu_text="%3Cspan%3E%E6%8F%90%E4%BE%9B%E8%8A%82%E7%82%B9%E5%88%B0%E8%8A%82%E7%82%B9%E7%9A%84%E4%BC%A0%E8%BE%93%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%A4%E4%B8%AA%E7%9B%B4%E6%8E%A5%E8%BF%9E%E6%8E%A5%E7%9A%84%E8%8A%82%E7%82%B9%E4%B9%8B%E9%97%B4%E7%9A%84%E9%93%BE%E6%8E%A5%3C/span%3E" STYLE="fork"/>
            <node TEXT="两个子层" ID="nybPJVJH1V" _mubu_text="%3Cspan%3E%E4%B8%A4%E4%B8%AA%E5%AD%90%E5%B1%82%3C/span%3E" STYLE="fork">
              <node TEXT="媒体访问控制（MAC）层：负责控制网络中设备如何访问媒体以及允许传输数据" ID="wJVdHzP2E5" _mubu_text="%3Cspan%3E%E5%AA%92%E4%BD%93%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%EF%BC%88MAC%EF%BC%89%E5%B1%82%EF%BC%9A%E8%B4%9F%E8%B4%A3%E6%8E%A7%E5%88%B6%E7%BD%91%E7%BB%9C%E4%B8%AD%E8%AE%BE%E5%A4%87%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E5%AA%92%E4%BD%93%E4%BB%A5%E5%8F%8A%E5%85%81%E8%AE%B8%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
              <node TEXT="逻辑链路控制（LLC）层：负责标识和封装网络层协议，控制错误检查和帧同步" ID="i7BPSOyXGh" _mubu_text="%3Cspan%3E%E9%80%BB%E8%BE%91%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6%EF%BC%88LLC%EF%BC%89%E5%B1%82%EF%BC%9A%E8%B4%9F%E8%B4%A3%E6%A0%87%E8%AF%86%E5%92%8C%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE%EF%BC%8C%E6%8E%A7%E5%88%B6%E9%94%99%E8%AF%AF%E6%A3%80%E6%9F%A5%E5%92%8C%E5%B8%A7%E5%90%8C%E6%AD%A5%3C/span%3E" STYLE="fork"/>
            </node>
          </node>
          <node TEXT="物理层" ID="XoQ9cnADYy" _mubu_text="%3Cspan%3E%E7%89%A9%E7%90%86%E5%B1%82%3C/span%3E" STYLE="fork">
            <node TEXT="定义数据连接的物理规格" ID="8PsiGpkdo7" _mubu_text="%3Cspan%3E%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%89%A9%E7%90%86%E8%A7%84%E6%A0%BC%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="参考回答" ID="ntpRQyLtoV" _mubu_text="%3Cspan%3E%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94%3C/span%3E" STYLE="fork">
            <node TEXT="OSI参考模型共7层" ID="9gJPII2PHL" _mubu_text="%3Cspan%3EOSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E5%85%B17%E5%B1%82%3C/span%3E" STYLE="fork">
              <node TEXT="应用层、表示层、会话层、传输层、网络层、数据链路层、物理层" ID="sK8rkUTCYZ" _mubu_text="%3Cspan%3E%E5%BA%94%E7%94%A8%E5%B1%82%E3%80%81%E8%A1%A8%E7%A4%BA%E5%B1%82%E3%80%81%E4%BC%9A%E8%AF%9D%E5%B1%82%E3%80%81%E4%BC%A0%E8%BE%93%E5%B1%82%E3%80%81%E7%BD%91%E7%BB%9C%E5%B1%82%E3%80%81%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E3%80%81%E7%89%A9%E7%90%86%E5%B1%82%3C/span%3E" STYLE="fork">
                <node TEXT="应用层协议HTTP、HTTPS" ID="jnyn9RKunu" _mubu_text="%3Cspan%3E%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AEHTTP%E3%80%81HTTPS%3C/span%3E" STYLE="fork"/>
                <node TEXT="传输层协议TCP和UDP" ID="Mu7QKPa6EI" _mubu_text="%3Cspan%3E%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AETCP%E5%92%8CUDP%3C/span%3E" STYLE="fork"/>
                <node TEXT="网络层协议IP、ICMP、ARP" ID="XxGWwqI6nP" _mubu_text="%3Cspan%3E%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AEIP%E3%80%81ICMP%E3%80%81ARP%3C/span%3E" STYLE="fork"/>
              </node>
            </node>
            <node TEXT="网络分层的好处" ID="Pz2Iz3U704" _mubu_text="%3Cspan%3E%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E7%9A%84%E5%A5%BD%E5%A4%84%3C/span%3E" STYLE="fork">
              <node TEXT="各个层之间进行解耦，层之间不会产生关联性" ID="8tfUlCSt0l" _mubu_text="%3Cspan%3E%E5%90%84%E4%B8%AA%E5%B1%82%E4%B9%8B%E9%97%B4%E8%BF%9B%E8%A1%8C%E8%A7%A3%E8%80%A6%EF%BC%8C%E5%B1%82%E4%B9%8B%E9%97%B4%E4%B8%8D%E4%BC%9A%E4%BA%A7%E7%94%9F%E5%85%B3%E8%81%94%E6%80%A7%3C/span%3E" STYLE="fork">
                <node TEXT="比如在应用层HTTP协议，从HTTP1.1升级2.0并不会对传输层、网络层存在影响的，或者是网络层的IPv4协议升级到IPv6，也不会影响到应用层、传输层" ID="GKtZFR5CzQ" _mubu_text="%3Cspan%3E%E6%AF%94%E5%A6%82%E5%9C%A8%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%BB%8EHTTP1.1%E5%8D%87%E7%BA%A72.0%E5%B9%B6%E4%B8%8D%E4%BC%9A%E5%AF%B9%E4%BC%A0%E8%BE%93%E5%B1%82%E3%80%81%E7%BD%91%E7%BB%9C%E5%B1%82%E5%AD%98%E5%9C%A8%E5%BD%B1%E5%93%8D%E7%9A%84%EF%BC%8C%E6%88%96%E8%80%85%E6%98%AF%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84IPv4%E5%8D%8F%E8%AE%AE%E5%8D%87%E7%BA%A7%E5%88%B0IPv6%EF%BC%8C%E4%B9%9F%E4%B8%8D%E4%BC%9A%E5%BD%B1%E5%93%8D%E5%88%B0%E5%BA%94%E7%94%A8%E5%B1%82%E3%80%81%E4%BC%A0%E8%BE%93%E5%B1%82%3C/span%3E" STYLE="fork"/>
              </node>
            </node>
            <node TEXT="落脚到实际的业务使用中" ID="M7LGVXdNDh" _mubu_text="%3Cspan%3E%E8%90%BD%E8%84%9A%E5%88%B0%E5%AE%9E%E9%99%85%E7%9A%84%E4%B8%9A%E5%8A%A1%E4%BD%BF%E7%94%A8%E4%B8%AD%3C/span%3E" STYLE="fork">
              <node TEXT="OSI只是理论模型，实际上使用的网络模型是TCP/IP网络模型" ID="pKaIXcStmj" _mubu_text="%3Cspan%3EOSI%E5%8F%AA%E6%98%AF%E7%90%86%E8%AE%BA%E6%A8%A1%E5%9E%8B%EF%BC%8C%E5%AE%9E%E9%99%85%E4%B8%8A%E4%BD%BF%E7%94%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%98%AFTCP/IP%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%3C/span%3E" STYLE="fork"/>
              <node TEXT="对OSI参考模型进行了简化，把应用层、表示层、会话层统一成为了应用层，数据链路层和物理层统一成为了网络接口层" ID="OsBHRwH6uH" _mubu_text="%3Cspan%3E%E5%AF%B9OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E4%BA%86%E7%AE%80%E5%8C%96%EF%BC%8C%E6%8A%8A%E5%BA%94%E7%94%A8%E5%B1%82%E3%80%81%E8%A1%A8%E7%A4%BA%E5%B1%82%E3%80%81%E4%BC%9A%E8%AF%9D%E5%B1%82%E7%BB%9F%E4%B8%80%E6%88%90%E4%B8%BA%E4%BA%86%E5%BA%94%E7%94%A8%E5%B1%82%EF%BC%8C%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%92%8C%E7%89%A9%E7%90%86%E5%B1%82%E7%BB%9F%E4%B8%80%E6%88%90%E4%B8%BA%E4%BA%86%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82%3C/span%3E" STYLE="fork"/>
            </node>
          </node>
        </node>
        <node TEXT="TCP/IP网络模型分层" ID="LEwPbiVQlf" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP/IP%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%86%E5%B1%82%3C/span%3E" STYLE="fork">
          <node TEXT="两种说法的存在" ID="7hEhWu641d" _mubu_text="%3Cspan%3E%E4%B8%A4%E7%A7%8D%E8%AF%B4%E6%B3%95%E7%9A%84%E5%AD%98%E5%9C%A8%3C/span%3E" STYLE="fork">
            <node TEXT="四层：应用层、传输层、网络层、网络接口层" ID="buJdl5tcDc" _mubu_text="%3Cspan%3E%E5%9B%9B%E5%B1%82%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82%E3%80%81%E4%BC%A0%E8%BE%93%E5%B1%82%E3%80%81%E7%BD%91%E7%BB%9C%E5%B1%82%E3%80%81%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82%3C/span%3E" STYLE="fork">
              <node TEXT="" ID="e4MG0GDgO6" _mubu_text="" STYLE="fork"/>
            </node>
            <node TEXT="五层：应用层、传输层、网络层、数据链路层，物理层" ID="Lv8wuRO0ME" _mubu_text="%3Cspan%3E%E4%BA%94%E5%B1%82%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82%E3%80%81%E4%BC%A0%E8%BE%93%E5%B1%82%E3%80%81%E7%BD%91%E7%BB%9C%E5%B1%82%E3%80%81%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%EF%BC%8C%E7%89%A9%E7%90%86%E5%B1%82%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="参考回答" ID="qqBhHqz2Dj" _mubu_text="%3Cspan%3E%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94%3C/span%3E" STYLE="fork">
            <node TEXT="应用层" ID="fLeen0U9hn" _mubu_text="%3Cspan%3E%E5%BA%94%E7%94%A8%E5%B1%82%3C/span%3E" STYLE="fork">
              <node TEXT="负责为应用软件提供网络服务，HTTP、HTTPS、DNS等协议" ID="dxUAdfnrNX" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%B4%A3%E4%B8%BA%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%8F%90%E4%BE%9B%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%EF%BC%8CHTTP%E3%80%81HTTPS%E3%80%81DNS%E7%AD%89%E5%8D%8F%E8%AE%AE%3C/span%3E" STYLE="fork"/>
            </node>
            <node TEXT="传输层" ID="1Vgo45jPOb" _mubu_text="%3Cspan%3E%E4%BC%A0%E8%BE%93%E5%B1%82%3C/span%3E" STYLE="fork">
              <node TEXT="负责应用程序层提供数据传输服务，TCP可靠传输协议，UDP不可靠传输协议" ID="HWnAHRvrmX" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%B4%A3%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B1%82%E6%8F%90%E4%BE%9B%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%EF%BC%8CTCP%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%EF%BC%8CUDP%E4%B8%8D%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%3C/span%3E" STYLE="fork"/>
            </node>
            <node TEXT="网络层" ID="qaYBnCcOT8" _mubu_text="%3Cspan%3E%E7%BD%91%E7%BB%9C%E5%B1%82%3C/span%3E" STYLE="fork">
              <node TEXT="负责主机寻址，IP（寻址和路由）、ARP（获取MAC地址）、ICMP（提供诊断能力并报告错误）等协议" ID="lvUdMDvLbV" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%B4%A3%E4%B8%BB%E6%9C%BA%E5%AF%BB%E5%9D%80%EF%BC%8CIP%EF%BC%88%E5%AF%BB%E5%9D%80%E5%92%8C%E8%B7%AF%E7%94%B1%EF%BC%89%E3%80%81ARP%EF%BC%88%E8%8E%B7%E5%8F%96MAC%E5%9C%B0%E5%9D%80%EF%BC%89%E3%80%81ICMP%EF%BC%88%E6%8F%90%E4%BE%9B%E8%AF%8A%E6%96%AD%E8%83%BD%E5%8A%9B%E5%B9%B6%E6%8A%A5%E5%91%8A%E9%94%99%E8%AF%AF%EF%BC%89%E7%AD%89%E5%8D%8F%E8%AE%AE%3C/span%3E" STYLE="fork"/>
            </node>
            <node TEXT="网络接口层" ID="gZiAkFFsUC" _mubu_text="%3Cspan%3E%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82%3C/span%3E" STYLE="fork">
              <node TEXT="负责为网络提供链路级别传输的服务" ID="Ad3zFad0QF" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%B4%A3%E4%B8%BA%E7%BD%91%E7%BB%9C%E6%8F%90%E4%BE%9B%E9%93%BE%E8%B7%AF%E7%BA%A7%E5%88%AB%E4%BC%A0%E8%BE%93%E7%9A%84%E6%9C%8D%E5%8A%A1%3C/span%3E" STYLE="fork"/>
            </node>
          </node>
        </node>
        <node TEXT="IP 协议和 TCP 协议属于哪一层" ID="QgVK7LmV68" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EIP%20%E5%8D%8F%E8%AE%AE%E5%92%8C%20TCP%20%E5%8D%8F%E8%AE%AE%E5%B1%9E%E4%BA%8E%E5%93%AA%E4%B8%80%E5%B1%82%3C/span%3E" STYLE="fork">
          <node TEXT="参考图示" ID="nexD7JfzPT" _mubu_text="%3Cspan%3E%E5%8F%82%E8%80%83%E5%9B%BE%E7%A4%BA%3C/span%3E" STYLE="fork"/>
          <node TEXT="IP协议属于网络层" ID="7c8N7EMd2Q" _mubu_text="%3Cspan%3EIP%E5%8D%8F%E8%AE%AE%E5%B1%9E%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%B1%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="TCP协议属于传输层" ID="sMpE5Urqrn" _mubu_text="%3Cspan%3ETCP%E5%8D%8F%E8%AE%AE%E5%B1%9E%E4%BA%8E%E4%BC%A0%E8%BE%93%E5%B1%82%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="网络为什么要分层" ID="IohFOyZHrn" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E7%BD%91%E7%BB%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%86%E5%B1%82%3C/span%3E" STYLE="fork">
          <node TEXT="降低耦合" ID="nIjMx6ZHa5" _mubu_text="%3Cspan%3E%E9%99%8D%E4%BD%8E%E8%80%A6%E5%90%88%3C/span%3E" STYLE="fork">
            <node TEXT="各层相互独立之后，上层可以不关心下层的实现" ID="91vp12VrcV" _mubu_text="%3Cspan%3E%E5%90%84%E5%B1%82%E7%9B%B8%E4%BA%92%E7%8B%AC%E7%AB%8B%E4%B9%8B%E5%90%8E%EF%BC%8C%E4%B8%8A%E5%B1%82%E5%8F%AF%E4%BB%A5%E4%B8%8D%E5%85%B3%E5%BF%83%E4%B8%8B%E5%B1%82%E7%9A%84%E5%AE%9E%E7%8E%B0%3C/span%3E" STYLE="fork"/>
            <node TEXT="只需要关心下层提供的接口服务" ID="TAbesaZUWR" _mubu_text="%3Cspan%3E%E5%8F%AA%E9%9C%80%E8%A6%81%E5%85%B3%E5%BF%83%E4%B8%8B%E5%B1%82%E6%8F%90%E4%BE%9B%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%3C/span%3E" STYLE="fork"/>
            <node TEXT="有利于排查网络问题，更精细定位问题所在的哪一层" ID="UBKi1jMRrP" _mubu_text="%3Cspan%3E%E6%9C%89%E5%88%A9%E4%BA%8E%E6%8E%92%E6%9F%A5%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%EF%BC%8C%E6%9B%B4%E7%B2%BE%E7%BB%86%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E6%89%80%E5%9C%A8%E7%9A%84%E5%93%AA%E4%B8%80%E5%B1%82%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="关联性降低" ID="9mT0wNAoO9" _mubu_text="%3Cspan%3E%E5%85%B3%E8%81%94%E6%80%A7%E9%99%8D%E4%BD%8E%3C/span%3E" STYLE="fork">
            <node TEXT="不会因为某层的修改，影响到其他层" ID="mPWxHai94l" _mubu_text="%3Cspan%3E%E4%B8%8D%E4%BC%9A%E5%9B%A0%E4%B8%BA%E6%9F%90%E5%B1%82%E7%9A%84%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%BD%B1%E5%93%8D%E5%88%B0%E5%85%B6%E4%BB%96%E5%B1%82%3C/span%3E" STYLE="fork"/>
            <node TEXT="HTTP，IPv4等例子" ID="U6IPjFmfVz" _mubu_text="%3Cspan%3EHTTP%EF%BC%8CIPv4%E7%AD%89%E4%BE%8B%E5%AD%90%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
      </node>
      <node TEXT="键入网址场景问题（重要）" ID="LyfMDfxt06" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3E%E9%94%AE%E5%85%A5%E7%BD%91%E5%9D%80%E5%9C%BA%E6%99%AF%E9%97%AE%E9%A2%98%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89%3C/span%3E" STYLE="fork">
        <node TEXT="输入网址后，期间发生了什么" ID="J52aJf147y" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%90%8E%EF%BC%8C%E6%9C%9F%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="HTTP/HTTPS协议-&gt;DNS协议-&gt;TCP协议-&gt;IP协议-&gt;ARP协议" ID="r86MFw6lvR" _mubu_text="%3Cspan%3EHTTP/HTTPS%E5%8D%8F%E8%AE%AE-&amp;gt;DNS%E5%8D%8F%E8%AE%AE-&amp;gt;TCP%E5%8D%8F%E8%AE%AE-&amp;gt;IP%E5%8D%8F%E8%AE%AE-&amp;gt;ARP%E5%8D%8F%E8%AE%AE%3C/span%3E" STYLE="fork"/>
          <node TEXT="参考回答" ID="UmfkpURchB" _mubu_text="%3Cspan%3E%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94%3C/span%3E" STYLE="fork">
            <node TEXT="浏览器解析URL相关信息" ID="JZ2cQK2LZI" _mubu_text="%3Cspan%3E%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90URL%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%3C/span%3E" STYLE="fork"/>
            <node TEXT="域名解析" ID="vRMxJ8KsT0" _mubu_text="%3Cspan%3E%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%3C/span%3E" STYLE="fork"/>
            <node TEXT="三次握手的第一次握手，TCP头部加上SYN标记位" ID="pSMDGLiMvw" _mubu_text="%3Cspan%3E%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8CTCP%E5%A4%B4%E9%83%A8%E5%8A%A0%E4%B8%8ASYN%E6%A0%87%E8%AE%B0%E4%BD%8D%3C/span%3E" STYLE="fork"/>
            <node TEXT="网络层，加上IP头" ID="2sMMqFEaCq" _mubu_text="%3Cspan%3E%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%8C%E5%8A%A0%E4%B8%8AIP%E5%A4%B4%3C/span%3E" STYLE="fork"/>
            <node TEXT="数据链路层通过ARP协议，获取MAC地址" ID="m1KD4xsBFJ" _mubu_text="%3Cspan%3E%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E9%80%9A%E8%BF%87ARP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E8%8E%B7%E5%8F%96MAC%E5%9C%B0%E5%9D%80%3C/span%3E" STYLE="fork"/>
            <node TEXT="物理层直接把数据包转发给路由器，收到SYN才会第二次握手" ID="r2HgADaYw9" _mubu_text="%3Cspan%3E%E7%89%A9%E7%90%86%E5%B1%82%E7%9B%B4%E6%8E%A5%E6%8A%8A%E6%95%B0%E6%8D%AE%E5%8C%85%E8%BD%AC%E5%8F%91%E7%BB%99%E8%B7%AF%E7%94%B1%E5%99%A8%EF%BC%8C%E6%94%B6%E5%88%B0SYN%E6%89%8D%E4%BC%9A%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B%3C/span%3E" STYLE="fork"/>
            <node TEXT="双方完成了三次握手之后，" ID="JRmDdwt6F9" _mubu_text="%3Cspan%3E%E5%8F%8C%E6%96%B9%E5%AE%8C%E6%88%90%E4%BA%86%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B9%8B%E5%90%8E%EF%BC%8C%3C/span%3E" STYLE="fork"/>
            <node TEXT="HTTP协议，客户端就将HTTP请求发送给目标服务器" ID="CnEcmF7nQH" _mubu_text="%3Cspan%3EHTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B0%B1%E5%B0%86HTTP%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81%E7%BB%99%E7%9B%AE%E6%A0%87%E6%9C%8D%E5%8A%A1%E5%99%A8%3C/span%3E" STYLE="fork"/>
            <node TEXT="HTTPS，客户端和服务端进行TLS四次握手之后，客户端才会将HTTP报文发送给目标服务器" ID="lWcVOvWebf" _mubu_text="%3Cspan%3EHTTPS%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9B%E8%A1%8CTLS%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%89%8D%E4%BC%9A%E5%B0%86HTTP%E6%8A%A5%E6%96%87%E5%8F%91%E9%80%81%E7%BB%99%E7%9B%AE%E6%A0%87%E6%9C%8D%E5%8A%A1%E5%99%A8%3C/span%3E" STYLE="fork"/>
            <node TEXT="收到HTTP请求，返回HTTP响应消息，对其解析渲染，呈现给用户" ID="nDI8qHokrk" _mubu_text="%3Cspan%3E%E6%94%B6%E5%88%B0HTTP%E8%AF%B7%E6%B1%82%EF%BC%8C%E8%BF%94%E5%9B%9EHTTP%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF%EF%BC%8C%E5%AF%B9%E5%85%B6%E8%A7%A3%E6%9E%90%E6%B8%B2%E6%9F%93%EF%BC%8C%E5%91%88%E7%8E%B0%E7%BB%99%E7%94%A8%E6%88%B7%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="DNS是如何解析的？属于哪一层的协议" ID="ZMYTnjgput" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EDNS%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E6%9E%90%E7%9A%84%EF%BC%9F%E5%B1%9E%E4%BA%8E%E5%93%AA%E4%B8%80%E5%B1%82%E7%9A%84%E5%8D%8F%E8%AE%AE%3C/span%3E" STYLE="fork">
          <node TEXT="DNS应用层协议" ID="SKRFOpikuu" _mubu_text="%3Cspan%3EDNS%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%3C/span%3E" STYLE="fork"/>
          <node TEXT="客户端进行DNS解析之前，先查看浏览器和操作系统是否缓存域名对应IP" ID="4LitxikJsk" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9B%E8%A1%8CDNS%E8%A7%A3%E6%9E%90%E4%B9%8B%E5%89%8D%EF%BC%8C%E5%85%88%E6%9F%A5%E7%9C%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%90%A6%E7%BC%93%E5%AD%98%E5%9F%9F%E5%90%8D%E5%AF%B9%E5%BA%94IP%3C/span%3E" STYLE="fork"/>
          <node TEXT="没有就查看本地系统host有无域名信息" ID="XSbdXORXvU" _mubu_text="%3Cspan%3E%E6%B2%A1%E6%9C%89%E5%B0%B1%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E7%B3%BB%E7%BB%9Fhost%E6%9C%89%E6%97%A0%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%3C/span%3E" STYLE="fork"/>
          <node TEXT="有返回，没有就查看本地DNS服务器发出查询请求" ID="ebiEKZ8PS4" _mubu_text="%3Cspan%3E%E6%9C%89%E8%BF%94%E5%9B%9E%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%B0%B1%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E5%87%BA%E6%9F%A5%E8%AF%A2%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果没有再本地DNS向根DNS发送请求" ID="2fGgwP3Xud" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%86%8D%E6%9C%AC%E5%9C%B0DNS%E5%90%91%E6%A0%B9DNS%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="根DNS收到请求会返回顶级域名服务器的IP地址" ID="lHdm8jm3vK" _mubu_text="%3Cspan%3E%E6%A0%B9DNS%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82%E4%BC%9A%E8%BF%94%E5%9B%9E%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84IP%E5%9C%B0%E5%9D%80%3C/span%3E" STYLE="fork"/>
          <node TEXT="然后本地DNS服务器再向顶级域名服务器发出查询请求" ID="5wOSmfHCTO" _mubu_text="%3Cspan%3E%E7%84%B6%E5%90%8E%E6%9C%AC%E5%9C%B0DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%8D%E5%90%91%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E5%87%BA%E6%9F%A5%E8%AF%A2%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="顶级DNS服务器收到请求返回权威服务器的IP地址" ID="RtozVi2X9E" _mubu_text="%3Cspan%3E%E9%A1%B6%E7%BA%A7DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E6%9D%83%E5%A8%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84IP%E5%9C%B0%E5%9D%80%3C/span%3E" STYLE="fork"/>
          <node TEXT="然后本地DNS服务器再向权威服务器发出查询请求" ID="i6T7A4fINN" _mubu_text="%3Cspan%3E%E7%84%B6%E5%90%8E%E6%9C%AC%E5%9C%B0DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%8D%E5%90%91%E6%9D%83%E5%A8%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E5%87%BA%E6%9F%A5%E8%AF%A2%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="权威服务器收到请求就返回域名对应的IP地址" ID="EV9cLc78qk" _mubu_text="%3Cspan%3E%E6%9D%83%E5%A8%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82%E5%B0%B1%E8%BF%94%E5%9B%9E%E5%9F%9F%E5%90%8D%E5%AF%B9%E5%BA%94%E7%9A%84IP%E5%9C%B0%E5%9D%80%3C/span%3E" STYLE="fork"/>
          <node TEXT="最后本地DNS服务器返回查询结果给客户端，同时本地域名服务器把返回结果给客户端" ID="SH5n8QwgcD" _mubu_text="%3Cspan%3E%E6%9C%80%E5%90%8E%E6%9C%AC%E5%9C%B0DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%94%E5%9B%9E%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%90%8C%E6%97%B6%E6%9C%AC%E5%9C%B0%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%8A%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%3C/span%3E" STYLE="fork"/>
          <node TEXT="本地域名服务器把返回的结果保存到缓存，以备下次使用" ID="ifmA9rKG21" _mubu_text="%3Cspan%3E%E6%9C%AC%E5%9C%B0%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%8A%E8%BF%94%E5%9B%9E%E7%9A%84%E7%BB%93%E6%9E%9C%E4%BF%9D%E5%AD%98%E5%88%B0%E7%BC%93%E5%AD%98%EF%BC%8C%E4%BB%A5%E5%A4%87%E4%B8%8B%E6%AC%A1%E4%BD%BF%E7%94%A8%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="DNS域名解析使用的什么协议" ID="I1jFw2RYnM" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EDNS%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%BD%BF%E7%94%A8%E7%9A%84%E4%BB%80%E4%B9%88%E5%8D%8F%E8%AE%AE%3C/span%3E" STYLE="fork">
          <node TEXT="DNS中域名解析请求和响应都是基于UDP进行传输的" ID="K7IZHygRmJ" _mubu_text="%3Cspan%3EDNS%E4%B8%AD%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E9%83%BD%E6%98%AF%E5%9F%BA%E4%BA%8EUDP%E8%BF%9B%E8%A1%8C%E4%BC%A0%E8%BE%93%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="UDP特点" ID="HtF0veXZmq" _mubu_text="%3Cspan%3EUDP%E7%89%B9%E7%82%B9%3C/span%3E" STYLE="fork">
            <node TEXT="UDP是一种无连接的传输层协议，提供简单的传输机制" ID="U4YtCs3nJE" _mubu_text="%3Cspan%3EUDP%E6%98%AF%E4%B8%80%E7%A7%8D%E6%97%A0%E8%BF%9E%E6%8E%A5%E7%9A%84%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE%EF%BC%8C%E6%8F%90%E4%BE%9B%E7%AE%80%E5%8D%95%E7%9A%84%E4%BC%A0%E8%BE%93%E6%9C%BA%E5%88%B6%3C/span%3E" STYLE="fork"/>
            <node TEXT="适用于实时性较高的应用场景" ID="tk9yI8qOv2" _mubu_text="%3Cspan%3E%E9%80%82%E7%94%A8%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%80%A7%E8%BE%83%E9%AB%98%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="DNS使用UDP协议进行域名解析的原因" ID="Ye8fznEeSZ" _mubu_text="%3Cspan%3EDNS%E4%BD%BF%E7%94%A8UDP%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E7%9A%84%E5%8E%9F%E5%9B%A0%3C/span%3E" STYLE="fork">
            <node TEXT="短小频繁的请求" ID="lSj0aD9lP8" _mubu_text="%3Cspan%3E%E7%9F%AD%E5%B0%8F%E9%A2%91%E7%B9%81%E7%9A%84%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork"/>
            <node TEXT="UDP的无连接特性可以减少建立和断开连接的开销" ID="Nh4KQJuJho" _mubu_text="%3Cspan%3EUDP%E7%9A%84%E6%97%A0%E8%BF%9E%E6%8E%A5%E7%89%B9%E6%80%A7%E5%8F%AF%E4%BB%A5%E5%87%8F%E5%B0%91%E5%BB%BA%E7%AB%8B%E5%92%8C%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BC%80%E9%94%80%3C/span%3E" STYLE="fork"/>
            <node TEXT="提高解析的效率" ID="Izppq3hQvV" _mubu_text="%3Cspan%3E%E6%8F%90%E9%AB%98%E8%A7%A3%E6%9E%90%E7%9A%84%E6%95%88%E7%8E%87%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="UDP相比较TCP缺点" ID="fruZ2NpdHr" _mubu_text="%3Cspan%3EUDP%E7%9B%B8%E6%AF%94%E8%BE%83TCP%E7%BC%BA%E7%82%B9%3C/span%3E" STYLE="fork">
            <node TEXT="数据可靠传输" ID="KONPJojg1x" _mubu_text="%3Cspan%3E%E6%95%B0%E6%8D%AE%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%3C/span%3E" STYLE="fork"/>
            <node TEXT="解决方案" ID="1oR5ZoFavx" _mubu_text="%3Cspan%3E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%3C/span%3E" STYLE="fork">
              <node TEXT="应用层实现一个超时重传机制" ID="BQiS2es4D3" _mubu_text="%3Cspan%3E%E5%BA%94%E7%94%A8%E5%B1%82%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6%3C/span%3E" STYLE="fork"/>
              <node TEXT="如果域名解析请求在一定时间内没有收到响应，那么就重发域名" ID="dbGqPFdN4N" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E8%AF%B7%E6%B1%82%E5%9C%A8%E4%B8%80%E5%AE%9A%E6%97%B6%E9%97%B4%E5%86%85%E6%B2%A1%E6%9C%89%E6%94%B6%E5%88%B0%E5%93%8D%E5%BA%94%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E9%87%8D%E5%8F%91%E5%9F%9F%E5%90%8D%3C/span%3E" STYLE="fork"/>
            </node>
          </node>
        </node>
        <node TEXT="输入域名如何知道端口的" ID="6Q0PZOzowp" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E8%BE%93%E5%85%A5%E5%9F%9F%E5%90%8D%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E7%AB%AF%E5%8F%A3%E7%9A%84%3C/span%3E" STYLE="fork">
          <node TEXT="HTTP默认80端口" ID="IpKfTySCwk" _mubu_text="%3Cspan%3EHTTP%E9%BB%98%E8%AE%A480%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTPS默认443端口" ID="ZUs9TxzS3B" _mubu_text="%3Cspan%3EHTTPS%E9%BB%98%E8%AE%A4443%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork"/>
          <node TEXT="自定义端口" ID="pMB7LWBPWH" _mubu_text="%3Cspan%3E%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork">
            <node TEXT="如果用户端口，域名：8080" ID="tYOQiqfPWB" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E7%94%A8%E6%88%B7%E7%AB%AF%E5%8F%A3%EF%BC%8C%E5%9F%9F%E5%90%8D%EF%BC%9A8080%3C/span%3E" STYLE="fork"/>
            <node TEXT="使用自定义端口作为目标端口" ID="Mx53YiXgW9" _mubu_text="%3Cspan%3E%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AB%AF%E5%8F%A3%E4%BD%9C%E4%B8%BA%E7%9B%AE%E6%A0%87%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="客户端向服务端的IP地址发送数据，服务端如何确定应该把数据传递给谁" ID="JtZ30XWgMt" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84IP%E5%9C%B0%E5%9D%80%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E5%BA%94%E8%AF%A5%E6%8A%8A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E7%BB%99%E8%B0%81%3C/span%3E" STYLE="fork">
          <node TEXT="服务端的应用会监听端口" ID="jYBq162XOU" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%BA%94%E7%94%A8%E4%BC%9A%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork"/>
          <node TEXT="协议栈会通过端口来区分不同应用的数据" ID="XUN62Qecbt" _mubu_text="%3Cspan%3E%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%BC%9A%E9%80%9A%E8%BF%87%E7%AB%AF%E5%8F%A3%E6%9D%A5%E5%8C%BA%E5%88%86%E4%B8%8D%E5%90%8C%E5%BA%94%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="现在很多网站都要求使用https，假设我们输入一个http网址，网站是如何实现由http跳转到https的" ID="GjteOMU281" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E7%8E%B0%E5%9C%A8%E5%BE%88%E5%A4%9A%E7%BD%91%E7%AB%99%E9%83%BD%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8https%EF%BC%8C%E5%81%87%E8%AE%BE%E6%88%91%E4%BB%AC%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAhttp%E7%BD%91%E5%9D%80%EF%BC%8C%E7%BD%91%E7%AB%99%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%94%B1http%E8%B7%B3%E8%BD%AC%E5%88%B0https%E7%9A%84%3C/span%3E" STYLE="fork">
          <node TEXT="服务器网关收到http请求后，给客户端一个http响应，状态码为301（永久重定向）" ID="GPMxLX9HEB" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BD%91%E5%85%B3%E6%94%B6%E5%88%B0http%E8%AF%B7%E6%B1%82%E5%90%8E%EF%BC%8C%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%80%E4%B8%AAhttp%E5%93%8D%E5%BA%94%EF%BC%8C%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%BA301%EF%BC%88%E6%B0%B8%E4%B9%85%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%89%3C/span%3E" STYLE="fork"/>
          <node TEXT="浏览器收到重定向响应后，自动向服务器发起一个新的 HTTPS 请求（默认端口 443）" ID="FLXESUyCEy" _mubu_text="%3Cspan%3E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%B6%E5%88%B0%E9%87%8D%E5%AE%9A%E5%90%91%E5%93%8D%E5%BA%94%E5%90%8E%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E8%B5%B7%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%20HTTPS%20%E8%AF%B7%E6%B1%82%EF%BC%88%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%20443%EF%BC%89%3C/span%3E" STYLE="fork"/>
        </node>
      </node>
      <node TEXT="网络传输场景问题" ID="V2RDBaJgfq" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3E%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%9C%BA%E6%99%AF%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork">
        <node TEXT="如果浏览器没有显示页面有哪些原因" ID="sxrssP2FdM" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%A6%82%E6%9E%9C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%9B%A0%3C/span%3E" STYLE="fork">
          <node TEXT="最直接的方式：抓包" ID="rg9jY7d6Pm" _mubu_text="%3Cspan%3E%E6%9C%80%E7%9B%B4%E6%8E%A5%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9A%E6%8A%93%E5%8C%85%3C/span%3E" STYLE="fork">
            <node TEXT="先确定服务端问题还是客户端问题" ID="CsfogrJ8DK" _mubu_text="%3Cspan%3E%E5%85%88%E7%A1%AE%E5%AE%9A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%97%AE%E9%A2%98%E8%BF%98%E6%98%AF%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork">
              <node TEXT="先在客户端访问ping" ID="2U7sZn8z8k" _mubu_text="%3Cspan%3E%E5%85%88%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BF%E9%97%AEping%3C/span%3E" STYLE="fork"/>
              <node TEXT="给正常访问就是客户端网络是正常的" ID="11yNqT8bWN" _mubu_text="%3Cspan%3E%E7%BB%99%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E5%B0%B1%E6%98%AF%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BD%91%E7%BB%9C%E6%98%AF%E6%AD%A3%E5%B8%B8%E7%9A%84%3C/span%3E" STYLE="fork"/>
            </node>
            <node TEXT="客户端没问题，抓包确认DNS解析出IP地址，没有就是域名写错了，解析出IP再确认" ID="hesLFjjzsB" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B2%A1%E9%97%AE%E9%A2%98%EF%BC%8C%E6%8A%93%E5%8C%85%E7%A1%AE%E8%AE%A4DNS%E8%A7%A3%E6%9E%90%E5%87%BAIP%E5%9C%B0%E5%9D%80%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%B0%B1%E6%98%AF%E5%9F%9F%E5%90%8D%E5%86%99%E9%94%99%E4%BA%86%EF%BC%8C%E8%A7%A3%E6%9E%90%E5%87%BAIP%E5%86%8D%E7%A1%AE%E8%AE%A4%3C/span%3E" STYLE="fork">
              <node TEXT="如果没有成功建立三次握手，需要在服务端通过ps确定sever进程是否启动，通过netstate命令确定监听端口" ID="iWYNlfgSlY" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E6%88%90%E5%8A%9F%E5%BB%BA%E7%AB%8B%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E9%9C%80%E8%A6%81%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E8%BF%87ps%E7%A1%AE%E5%AE%9Asever%E8%BF%9B%E7%A8%8B%E6%98%AF%E5%90%A6%E5%90%AF%E5%8A%A8%EF%BC%8C%E9%80%9A%E8%BF%87netstate%E5%91%BD%E4%BB%A4%E7%A1%AE%E5%AE%9A%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork"/>
              <node TEXT="如果能成功建立三次握手，并且发出了 HTTP 请求，但是就是没有显示页面，可以查看服务端返回的响应码" ID="B4ElugdWdX" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E8%83%BD%E6%88%90%E5%8A%9F%E5%BB%BA%E7%AB%8B%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%8F%91%E5%87%BA%E4%BA%86%20HTTP%20%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%BD%86%E6%98%AF%E5%B0%B1%E6%98%AF%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%94%E5%9B%9E%E7%9A%84%E5%93%8D%E5%BA%94%E7%A0%81%3C/span%3E" STYLE="fork">
                <node TEXT="404错误码，检查url是否正确" ID="jeEeIUBRmk" _mubu_text="%3Cspan%3E404%E9%94%99%E8%AF%AF%E7%A0%81%EF%BC%8C%E6%A3%80%E6%9F%A5url%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE%3C/span%3E" STYLE="fork"/>
                <node TEXT="500服务器问题" ID="7oFp1xqUbC" _mubu_text="%3Cspan%3E500%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork"/>
                <node TEXT="200，看一下前端代码问题导致浏览器没有渲染出来页面" ID="k8KLONMpPX" _mubu_text="%3Cspan%3E200%EF%BC%8C%E7%9C%8B%E4%B8%80%E4%B8%8B%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B2%A1%E6%9C%89%E6%B8%B2%E6%9F%93%E5%87%BA%E6%9D%A5%E9%A1%B5%E9%9D%A2%3C/span%3E" STYLE="fork"/>
              </node>
            </node>
            <node TEXT="如果客户端网络是正常的，但是访问速度很慢，导致很久才显示出来" ID="n5oL6It7wL" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BD%91%E7%BB%9C%E6%98%AF%E6%AD%A3%E5%B8%B8%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E5%BE%88%E6%85%A2%EF%BC%8C%E5%AF%BC%E8%87%B4%E5%BE%88%E4%B9%85%E6%89%8D%E6%98%BE%E7%A4%BA%E5%87%BA%E6%9D%A5%3C/span%3E" STYLE="fork">
              <node TEXT="ping确认延迟是否正常" ID="bCgYaDHn2I" _mubu_text="%3Cspan%3Eping%E7%A1%AE%E8%AE%A4%E5%BB%B6%E8%BF%9F%E6%98%AF%E5%90%A6%E6%AD%A3%E5%B8%B8%3C/span%3E" STYLE="fork"/>
              <node TEXT="耗时严重：排查流量带宽，以及慢SQL问题" ID="8eMh09qlUk" _mubu_text="%3Cspan%3E%E8%80%97%E6%97%B6%E4%B8%A5%E9%87%8D%EF%BC%9A%E6%8E%92%E6%9F%A5%E6%B5%81%E9%87%8F%E5%B8%A6%E5%AE%BD%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%85%A2SQL%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork"/>
            </node>
            <node TEXT="总之就是一层一层有没有插网线，网络配置是否正确、DNS有没有解析出 IP地址、TCP有没有三次握手、HTTP返回的响应码是什么" ID="PCpAc66LbJ" _mubu_text="%3Cspan%3E%E6%80%BB%E4%B9%8B%E5%B0%B1%E6%98%AF%E4%B8%80%E5%B1%82%E4%B8%80%E5%B1%82%E6%9C%89%E6%B2%A1%E6%9C%89%E6%8F%92%E7%BD%91%E7%BA%BF%EF%BC%8C%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE%E3%80%81DNS%E6%9C%89%E6%B2%A1%E6%9C%89%E8%A7%A3%E6%9E%90%E5%87%BA%20IP%E5%9C%B0%E5%9D%80%E3%80%81TCP%E6%9C%89%E6%B2%A1%E6%9C%89%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81HTTP%E8%BF%94%E5%9B%9E%E7%9A%84%E5%93%8D%E5%BA%94%E7%A0%81%E6%98%AF%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="服务器ping不通但是http能请求成功，会出现这种情况吗" ID="XMQJzMpUuk" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E6%9C%8D%E5%8A%A1%E5%99%A8ping%E4%B8%8D%E9%80%9A%E4%BD%86%E6%98%AFhttp%E8%83%BD%E8%AF%B7%E6%B1%82%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BC%9A%E5%87%BA%E7%8E%B0%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E5%90%97%3C/span%3E" STYLE="fork">
          <node TEXT="会的" ID="CprEUwO825" _mubu_text="%3Cspan%3E%E4%BC%9A%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="因为ping 和 http 使用的协议是不一样的" ID="RKAHPjqAqY" _mubu_text="%3Cspan%3E%E5%9B%A0%E4%B8%BAping%20%E5%92%8C%20http%20%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8D%8F%E8%AE%AE%E6%98%AF%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="ping 是基于网络层的 icmp 协议，而 http是基于传输层的 tcp 协议的" ID="ZuaYnybpUa" _mubu_text="%3Cspan%3Eping%20%E6%98%AF%E5%9F%BA%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84%20icmp%20%E5%8D%8F%E8%AE%AE%EF%BC%8C%E8%80%8C%20http%E6%98%AF%E5%9F%BA%E4%BA%8E%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9A%84%20tcp%20%E5%8D%8F%E8%AE%AE%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="有可能服务器的防火墙禁止 icmp 协议，但是 tcp 协议没有禁止" ID="G5Q3icA8zV" _mubu_text="%3Cspan%3E%E6%9C%89%E5%8F%AF%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99%E7%A6%81%E6%AD%A2%20icmp%20%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%BD%86%E6%98%AF%20tcp%20%E5%8D%8F%E8%AE%AE%E6%B2%A1%E6%9C%89%E7%A6%81%E6%AD%A2%3C/span%3E" STYLE="fork"/>
          <node TEXT="就会出现服务器 ping 不通，但是 http 能请求现象" ID="4hkyI7cxsa" _mubu_text="%3Cspan%3E%E5%B0%B1%E4%BC%9A%E5%87%BA%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%20ping%20%E4%B8%8D%E9%80%9A%EF%BC%8C%E4%BD%86%E6%98%AF%20http%20%E8%83%BD%E8%AF%B7%E6%B1%82%E7%8E%B0%E8%B1%A1%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="客户端 TCP 连接一个不存在的IP地址的服务端会发生什么（冷门）" ID="7iMBZduTUI" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%20TCP%20%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84IP%E5%9C%B0%E5%9D%80%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%88%E5%86%B7%E9%97%A8%EF%BC%89%3C/span%3E" STYLE="fork">
          <node TEXT="端口不存在的话" ID="joTFkKSEfS" _mubu_text="%3Cspan%3E%E7%AB%AF%E5%8F%A3%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E8%AF%9D%3C/span%3E" STYLE="fork"/>
          <node TEXT="代表服务端没有监听这个端口，服务端在收到客户端的 SYN 报文后" ID="pDygJmsx80" _mubu_text="%3Cspan%3E%E4%BB%A3%E8%A1%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B2%A1%E6%9C%89%E7%9B%91%E5%90%AC%E8%BF%99%E4%B8%AA%E7%AB%AF%E5%8F%A3%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9C%A8%E6%94%B6%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%20SYN%20%E6%8A%A5%E6%96%87%E5%90%8E%3C/span%3E" STYLE="fork"/>
          <node TEXT="服务端会回 RST 报文，客户端收到 RST 报文后，会断开连接" ID="vXJQY6rVcr" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BC%9A%E5%9B%9E%20RST%20%E6%8A%A5%E6%96%87%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%B6%E5%88%B0%20RST%20%E6%8A%A5%E6%96%87%E5%90%8E%EF%BC%8C%E4%BC%9A%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork">
            <node TEXT="RST（Reset）报文是TCP（传输控制协议）中的一种重要控制报文，用于终止TCP连接或响应异常情况" ID="cog3S80yC2" _mubu_text="%3Cspan%3ERST%EF%BC%88Reset%EF%BC%89%E6%8A%A5%E6%96%87%E6%98%AFTCP%EF%BC%88%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE%EF%BC%89%E4%B8%AD%E7%9A%84%E4%B8%80%E7%A7%8D%E9%87%8D%E8%A6%81%E6%8E%A7%E5%88%B6%E6%8A%A5%E6%96%87%EF%BC%8C%E7%94%A8%E4%BA%8E%E7%BB%88%E6%AD%A2TCP%E8%BF%9E%E6%8E%A5%E6%88%96%E5%93%8D%E5%BA%94%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="客户端 UDP 发送一个 IP地址存在但是端口不存在报文会发生什么（冷门）" ID="jrB6dyBMGO" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%20UDP%20%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%20IP%E5%9C%B0%E5%9D%80%E5%AD%98%E5%9C%A8%E4%BD%86%E6%98%AF%E7%AB%AF%E5%8F%A3%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%8A%A5%E6%96%87%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%88%E5%86%B7%E9%97%A8%EF%BC%89%3C/span%3E" STYLE="fork">
          <node TEXT="服务端会回 ICMP 报文，报告端口不可达" ID="dGs2HR94Ir" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BC%9A%E5%9B%9E%20ICMP%20%E6%8A%A5%E6%96%87%EF%BC%8C%E6%8A%A5%E5%91%8A%E7%AB%AF%E5%8F%A3%E4%B8%8D%E5%8F%AF%E8%BE%BE%3C/span%3E" STYLE="fork">
            <node TEXT="ICMP（Internet Control Message Protocol）报文是一种网络协议，用于在IP网络中传输控制消息和错误信息" ID="mCB3u0h3WA" _mubu_text="%3Cspan%3EICMP%EF%BC%88Internet%20Control%20Message%20Protocol%EF%BC%89%E6%8A%A5%E6%96%87%E6%98%AF%E4%B8%80%E7%A7%8D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%9C%A8IP%E7%BD%91%E7%BB%9C%E4%B8%AD%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E6%B6%88%E6%81%AF%E5%92%8C%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
      </node>
    </node>
    <node TEXT="应用层面试题（重点）" ID="KXuDno4brj" _mubu_text="%3Cspan%20class=%22bold%20underline%20text-color-blue%22%3E%E5%BA%94%E7%94%A8%E5%B1%82%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89%3C/span%3E" STYLE="bubble" POSITION="default">
      <node TEXT="HTTP（重要）" ID="XCVdjlDRgl" _mubu_text="%3Cspan%20class=%22%20text-color-red%22%3EHTTP%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89%3C/span%3E" STYLE="fork">
        <node TEXT="HTTP协议的特点是什么？" ID="xGAZ8UxgMq" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%89%B9%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%3C/span%3E" STYLE="fork">
          <node TEXT="基于文本" ID="X7HWRnHdue" _mubu_text="%3Cspan%3E%E5%9F%BA%E4%BA%8E%E6%96%87%E6%9C%AC%3C/span%3E" STYLE="fork">
            <node TEXT="（http1.1）【http2.0使用了二进制的形式】" ID="7v7sznoS94" _mubu_text="%3Cspan%3E%EF%BC%88http1.1%EF%BC%89%E3%80%90http2.0%E4%BD%BF%E7%94%A8%E4%BA%86%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E5%BD%A2%E5%BC%8F%E3%80%91%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="可扩展性" ID="b5dqy6p5mP" _mubu_text="%3Cspan%3E%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP协议本身不限制数据的内容和格式的" ID="vJ4qy9baIg" _mubu_text="%3Cspan%3EHTTP%E5%8D%8F%E8%AE%AE%E6%9C%AC%E8%BA%AB%E4%B8%8D%E9%99%90%E5%88%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E5%86%85%E5%AE%B9%E5%92%8C%E6%A0%BC%E5%BC%8F%E7%9A%84%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="灵活性" ID="2l1cdfQRdB" _mubu_text="%3Cspan%3E%E7%81%B5%E6%B4%BB%E6%80%A7%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP支持不同的数据格式" ID="G3oe9kJrTq" _mubu_text="%3Cspan%3EHTTP%E6%94%AF%E6%8C%81%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="请求应答模式" ID="X9AwCajN9v" _mubu_text="%3Cspan%3E%E8%AF%B7%E6%B1%82%E5%BA%94%E7%AD%94%E6%A8%A1%E5%BC%8F%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP协议请求应答通信，请求方是主动的，应答方收到请求才回复，被动的" ID="McxIHM0Dy8" _mubu_text="%3Cspan%3EHTTP%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E5%BA%94%E7%AD%94%E9%80%9A%E4%BF%A1%EF%BC%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E6%98%AF%E4%B8%BB%E5%8A%A8%E7%9A%84%EF%BC%8C%E5%BA%94%E7%AD%94%E6%96%B9%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82%E6%89%8D%E5%9B%9E%E5%A4%8D%EF%BC%8C%E8%A2%AB%E5%8A%A8%E7%9A%84%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="无状态" ID="6NwMMMIcbx" _mubu_text="%3Cspan%3E%E6%97%A0%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP每个请求之间相互独立，服务器之前请求状态信息需要其他（Cookie，Session）来进行维护" ID="O2mMaLmLdB" _mubu_text="%3Cspan%3EHTTP%E6%AF%8F%E4%B8%AA%E8%AF%B7%E6%B1%82%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E7%8B%AC%E7%AB%8B%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E5%89%8D%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF%E9%9C%80%E8%A6%81%E5%85%B6%E4%BB%96%EF%BC%88Cookie%EF%BC%8CSession%EF%BC%89%E6%9D%A5%E8%BF%9B%E8%A1%8C%E7%BB%B4%E6%8A%A4%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="HTTP 报文格式？怎么分割的" ID="T4zhuJLYie" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%20%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F%EF%BC%9F%E6%80%8E%E4%B9%88%E5%88%86%E5%89%B2%E7%9A%84%3C/span%3E" STYLE="fork">
          <node TEXT="" ID="elERMbhjY3" _mubu_text="" STYLE="fork"/>
          <node TEXT="HTTP报文格式分为请求行、请求头、请求体三个部分" ID="CUmE5nErBN" _mubu_text="%3Cspan%3EHTTP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F%E5%88%86%E4%B8%BA%E8%AF%B7%E6%B1%82%E8%A1%8C%E3%80%81%E8%AF%B7%E6%B1%82%E5%A4%B4%E3%80%81%E8%AF%B7%E6%B1%82%E4%BD%93%E4%B8%89%E4%B8%AA%E9%83%A8%E5%88%86%3C/span%3E" STYLE="fork">
            <node TEXT="请求行" ID="KsolrtDkDM" _mubu_text="%3Cspan%3E%E8%AF%B7%E6%B1%82%E8%A1%8C%3C/span%3E" STYLE="fork">
              <node TEXT="请求或响应的基本信息，请求方法、URL、HTTP版本信息" ID="Rob9aVmN2Z" _mubu_text="%3Cspan%3E%E8%AF%B7%E6%B1%82%E6%88%96%E5%93%8D%E5%BA%94%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%EF%BC%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E3%80%81URL%E3%80%81HTTP%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%3C/span%3E" STYLE="fork"/>
            </node>
            <node TEXT="请求头" ID="mOEIaDbywV" _mubu_text="%3Cspan%3E%E8%AF%B7%E6%B1%82%E5%A4%B4%3C/span%3E" STYLE="fork">
              <node TEXT="使用key-value形式更加详细的说明报文，Host，Connection、Content-Length字段" ID="PVg7lxn7ah" _mubu_text="%3Cspan%3E%E4%BD%BF%E7%94%A8key-value%E5%BD%A2%E5%BC%8F%E6%9B%B4%E5%8A%A0%E8%AF%A6%E7%BB%86%E7%9A%84%E8%AF%B4%E6%98%8E%E6%8A%A5%E6%96%87%EF%BC%8CHost%EF%BC%8CConnection%E3%80%81Content-Length%E5%AD%97%E6%AE%B5%3C/span%3E" STYLE="fork"/>
            </node>
            <node TEXT="请求体" ID="FxvJelgHdX" _mubu_text="%3Cspan%3E%E8%AF%B7%E6%B1%82%E4%BD%93%3C/span%3E" STYLE="fork">
              <node TEXT="实际传输数据，文本数据、图片数据" ID="ycs625IXhR" _mubu_text="%3Cspan%3E%E5%AE%9E%E9%99%85%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E3%80%81%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
            </node>
          </node>
          <node TEXT="请求行和请求头是通过\r\n分割的，请求头和请求体之间是通过空白行分割的，也就是两个连续的\r\n" ID="tzb50TXMSY" _mubu_text="%3Cspan%3E%E8%AF%B7%E6%B1%82%E8%A1%8C%E5%92%8C%E8%AF%B7%E6%B1%82%E5%A4%B4%E6%98%AF%E9%80%9A%E8%BF%87%3C/span%3E%3Cspan%20class=%22escaped%22%3E%5C%3C/span%3E%3Cspan%3Er%3C/span%3E%3Cspan%20class=%22escaped%22%3E%5C%3C/span%3E%3Cspan%3En%E5%88%86%E5%89%B2%E7%9A%84%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%92%8C%E8%AF%B7%E6%B1%82%E4%BD%93%E4%B9%8B%E9%97%B4%E6%98%AF%E9%80%9A%E8%BF%87%E7%A9%BA%E7%99%BD%E8%A1%8C%E5%88%86%E5%89%B2%E7%9A%84%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%A4%E4%B8%AA%E8%BF%9E%E7%BB%AD%E7%9A%84%3C/span%3E%3Cspan%20class=%22escaped%22%3E%5C%3C/span%3E%3Cspan%3Er%3C/span%3E%3Cspan%20class=%22escaped%22%3E%5C%3C/span%3E%3Cspan%3En%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTP默认的端口是什么" ID="ZrA91fhWqq" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%E9%BB%98%E8%AE%A4%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="HTTP 80端口" ID="HycS5YmQWj" _mubu_text="%3Cspan%3EHTTP%2080%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTPS 443端口" ID="ZnFe53qP6r" _mubu_text="%3Cspan%3EHTTPS%20443%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTP 有什么方法" ID="neQxbRVny7" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%20%E6%9C%89%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95%3C/span%3E" STYLE="fork">
          <node TEXT="GET" ID="cniHe2rEII" _mubu_text="%3Cspan%3EGET%3C/span%3E" STYLE="fork">
            <node TEXT="用来请求从服务器获取资源的" ID="RHftUnZYpx" _mubu_text="%3Cspan%3E%E7%94%A8%E6%9D%A5%E8%AF%B7%E6%B1%82%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E7%9A%84%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="HEAD" ID="bQjTHaxFPJ" _mubu_text="%3Cspan%3EHEAD%3C/span%3E" STYLE="fork">
            <node TEXT="和GET类似，和GET不同的就是服务器不会返回请求的实体数据，只会返回响应头" ID="qU305pXqFn" _mubu_text="%3Cspan%3E%E5%92%8CGET%E7%B1%BB%E4%BC%BC%EF%BC%8C%E5%92%8CGET%E4%B8%8D%E5%90%8C%E7%9A%84%E5%B0%B1%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8D%E4%BC%9A%E8%BF%94%E5%9B%9E%E8%AF%B7%E6%B1%82%E7%9A%84%E5%AE%9E%E4%BD%93%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%8F%AA%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E5%A4%B4%3C/span%3E" STYLE="fork"/>
            <node TEXT="也就是获取资源的元信息" ID="kizPvFfZK3" _mubu_text="%3Cspan%3E%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%83%E4%BF%A1%E6%81%AF%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="POST" ID="tPvi3Oe4W6" _mubu_text="%3Cspan%3EPOST%3C/span%3E" STYLE="fork">
            <node TEXT="向服务端提交数据，数据就放在报文的body里面" ID="2NzCNQdk25" _mubu_text="%3Cspan%3E%E5%90%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%B0%B1%E6%94%BE%E5%9C%A8%E6%8A%A5%E6%96%87%E7%9A%84body%E9%87%8C%E9%9D%A2%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="PUT" ID="wSvTdkDmbu" _mubu_text="%3Cspan%3EPUT%3C/span%3E" STYLE="fork">
            <node TEXT="和POST类似，也可以向服务器提交数据，区别POST的新增数据，PUT是更新数据" ID="wErz8MB4wm" _mubu_text="%3Cspan%3E%E5%92%8CPOST%E7%B1%BB%E4%BC%BC%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%8C%BA%E5%88%ABPOST%E7%9A%84%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AE%EF%BC%8CPUT%E6%98%AF%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="DELETE" ID="oS89KcQKlp" _mubu_text="%3Cspan%3EDELETE%3C/span%3E" STYLE="fork">
            <node TEXT="用来删除资源" ID="7E2sRJlkiR" _mubu_text="%3Cspan%3E%E7%94%A8%E6%9D%A5%E5%88%A0%E9%99%A4%E8%B5%84%E6%BA%90%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="分析一下哪些 HTTP 方法是安全或者幂等的" ID="5UkVaqrlc9" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%8B%E5%93%AA%E4%BA%9B%20HTTP%20%E6%96%B9%E6%B3%95%E6%98%AF%E5%AE%89%E5%85%A8%E6%88%96%E8%80%85%E5%B9%82%E7%AD%89%E7%9A%84%3C/span%3E" STYLE="fork">
          <node TEXT="GET和HEAD安全和幂等的，只读操作" ID="9iYlRdCrQ5" _mubu_text="%3Cspan%3EGET%E5%92%8CHEAD%E5%AE%89%E5%85%A8%E5%92%8C%E5%B9%82%E7%AD%89%E7%9A%84%EF%BC%8C%E5%8F%AA%E8%AF%BB%E6%93%8D%E4%BD%9C%3C/span%3E" STYLE="fork"/>
          <node TEXT="POST/PUT/DELETE都是增删改服务器资源不安全" ID="l35Tzugf26" _mubu_text="%3Cspan%3EPOST/PUT/DELETE%E9%83%BD%E6%98%AF%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E4%B8%8D%E5%AE%89%E5%85%A8%3C/span%3E" STYLE="fork"/>
          <node TEXT="DELETE/PUT是幂等的" ID="r1DJDCqMVg" _mubu_text="%3Cspan%3EDELETE/PUT%E6%98%AF%E5%B9%82%E7%AD%89%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="POST不是安全的也不是幂等的，会创建多个资源" ID="YPUjNHmklC" _mubu_text="%3Cspan%3EPOST%E4%B8%8D%E6%98%AF%E5%AE%89%E5%85%A8%E7%9A%84%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%B9%82%E7%AD%89%E7%9A%84%EF%BC%8C%E4%BC%9A%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AA%E8%B5%84%E6%BA%90%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="GET 和  POST 请求的区别？追问：GET 请求一定是安全且幂等的吗" ID="pSvlQcKdci" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EGET%20%E5%92%8C%20%20POST%20%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E8%BF%BD%E9%97%AE%EF%BC%9AGET%20%E8%AF%B7%E6%B1%82%E4%B8%80%E5%AE%9A%E6%98%AF%E5%AE%89%E5%85%A8%E4%B8%94%E5%B9%82%E7%AD%89%E7%9A%84%E5%90%97%3C/span%3E" STYLE="fork">
          <node TEXT="回答" ID="AW3dBJSfce" _mubu_text="%3Cspan%3E%E5%9B%9E%E7%AD%94%3C/span%3E" STYLE="fork">
            <node TEXT="GET请求，POST提交" ID="LHr7ZURYis" _mubu_text="%3Cspan%3EGET%E8%AF%B7%E6%B1%82%EF%BC%8CPOST%E6%8F%90%E4%BA%A4%3C/span%3E" STYLE="fork"/>
            <node TEXT="GET只读，安全幂等，POST修改资源，不安全不幂等" ID="eK3nWaJxAR" _mubu_text="%3Cspan%3EGET%E5%8F%AA%E8%AF%BB%EF%BC%8C%E5%AE%89%E5%85%A8%E5%B9%82%E7%AD%89%EF%BC%8CPOST%E4%BF%AE%E6%94%B9%E8%B5%84%E6%BA%90%EF%BC%8C%E4%B8%8D%E5%AE%89%E5%85%A8%E4%B8%8D%E5%B9%82%E7%AD%89%3C/span%3E" STYLE="fork"/>
            <node TEXT="GET请求参数放在URL有长度的限制" ID="dR9oVO6Aja" _mubu_text="%3Cspan%3EGET%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%94%BE%E5%9C%A8URL%E6%9C%89%E9%95%BF%E5%BA%A6%E7%9A%84%E9%99%90%E5%88%B6%3C/span%3E" STYLE="fork"/>
            <node TEXT="POST请求的请求参数是放在请求体里面的，POST请求参数长度没有限制" ID="k2p8MVDCUN" _mubu_text="%3Cspan%3EPOST%E8%AF%B7%E6%B1%82%E7%9A%84%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%98%AF%E6%94%BE%E5%9C%A8%E8%AF%B7%E6%B1%82%E4%BD%93%E9%87%8C%E9%9D%A2%E7%9A%84%EF%BC%8CPOST%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E9%95%BF%E5%BA%A6%E6%B2%A1%E6%9C%89%E9%99%90%E5%88%B6%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="追问" ID="ofCfHwJyPH" _mubu_text="%3Cspan%3E%E8%BF%BD%E9%97%AE%3C/span%3E" STYLE="fork">
            <node TEXT="不一定" ID="U9e8ZTWnO2" _mubu_text="%3Cspan%3E%E4%B8%8D%E4%B8%80%E5%AE%9A%3C/span%3E" STYLE="fork"/>
            <node TEXT="看实际的GET请求，开发者遵循规范去处理请求，也就是获取资源，安全幂等" ID="5cDNR7G2g6" _mubu_text="%3Cspan%3E%E7%9C%8B%E5%AE%9E%E9%99%85%E7%9A%84GET%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%BC%80%E5%8F%91%E8%80%85%E9%81%B5%E5%BE%AA%E8%A7%84%E8%8C%83%E5%8E%BB%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%EF%BC%8C%E5%AE%89%E5%85%A8%E5%B9%82%E7%AD%89%3C/span%3E" STYLE="fork"/>
            <node TEXT="如果开发者的目的是为了更新数据，那么就不是" ID="30OhdSzHco" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E7%9B%AE%E7%9A%84%E6%98%AF%E4%B8%BA%E4%BA%86%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E4%B8%8D%E6%98%AF%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="HTTP 有什么状态码" ID="yWxfQ9zlpB" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%20%E6%9C%89%E4%BB%80%E4%B9%88%E7%8A%B6%E6%80%81%E7%A0%81%3C/span%3E" STYLE="fork">
          <node TEXT="1开头协议处理的中间状态" ID="JlRMMV79j8" _mubu_text="%3Cspan%3E1%E5%BC%80%E5%A4%B4%E5%8D%8F%E8%AE%AE%E5%A4%84%E7%90%86%E7%9A%84%E4%B8%AD%E9%97%B4%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="2开头表示服务器收到并成功处理客户端的请求" ID="AnohebMoWV" _mubu_text="%3Cspan%3E2%E5%BC%80%E5%A4%B4%E8%A1%A8%E7%A4%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%B6%E5%88%B0%E5%B9%B6%E6%88%90%E5%8A%9F%E5%A4%84%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="3开头表示资源服务端发生了变动，需要重定向" ID="XaisaBsHJe" _mubu_text="%3Cspan%3E3%E5%BC%80%E5%A4%B4%E8%A1%A8%E7%A4%BA%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E7%94%9F%E4%BA%86%E5%8F%98%E5%8A%A8%EF%BC%8C%E9%9C%80%E8%A6%81%E9%87%8D%E5%AE%9A%E5%90%91%3C/span%3E" STYLE="fork"/>
          <node TEXT="4开头表示客户端错误" ID="p6NCPkz97S" _mubu_text="%3Cspan%3E4%E5%BC%80%E5%A4%B4%E8%A1%A8%E7%A4%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF%3C/span%3E" STYLE="fork"/>
          <node TEXT="5开头表示服务端错误，服务器在处理时内发生了错误" ID="WGt6Id11Fl" _mubu_text="%3Cspan%3E5%E5%BC%80%E5%A4%B4%E8%A1%A8%E7%A4%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%94%99%E8%AF%AF%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%A8%E5%A4%84%E7%90%86%E6%97%B6%E5%86%85%E5%8F%91%E7%94%9F%E4%BA%86%E9%94%99%E8%AF%AF%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="什么情况下会出现502错误码" ID="86R1llMSGu" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%87%BA%E7%8E%B0502%E9%94%99%E8%AF%AF%E7%A0%81%3C/span%3E" STYLE="fork">
          <node TEXT="如果客户端访问服务器是通过 nginx 来反向代理到应用服务器" ID="D40biNYOB9" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E9%80%9A%E8%BF%87%20nginx%20%E6%9D%A5%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%88%B0%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%3C/span%3E" STYLE="fork"/>
          <node TEXT="那么如果应用服务器如果出现了故障，导致 nginx 无法从应用服务器获取到响应" ID="9fBYPQNDcv" _mubu_text="%3Cspan%3E%E9%82%A3%E4%B9%88%E5%A6%82%E6%9E%9C%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E6%9E%9C%E5%87%BA%E7%8E%B0%E4%BA%86%E6%95%85%E9%9A%9C%EF%BC%8C%E5%AF%BC%E8%87%B4%20nginx%20%E6%97%A0%E6%B3%95%E4%BB%8E%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E5%88%B0%E5%93%8D%E5%BA%94%3C/span%3E" STYLE="fork"/>
          <node TEXT="这时候 nginx 就会返回 502 错误码给客户端" ID="yaLn57ixDd" _mubu_text="%3Cspan%3E%E8%BF%99%E6%97%B6%E5%80%99%20nginx%20%E5%B0%B1%E4%BC%9A%E8%BF%94%E5%9B%9E%20502%20%E9%94%99%E8%AF%AF%E7%A0%81%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="有个服务出现了504，你觉得这个服务是出了什么问题" ID="QRE4XxL00o" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E6%9C%89%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%87%BA%E7%8E%B0%E4%BA%86504%EF%BC%8C%E4%BD%A0%E8%A7%89%E5%BE%97%E8%BF%99%E4%B8%AA%E6%9C%8D%E5%8A%A1%E6%98%AF%E5%87%BA%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork">
          <node TEXT="504是网关超时错误" ID="prfFSvrG2j" _mubu_text="%3Cspan%3E504%E6%98%AF%E7%BD%91%E5%85%B3%E8%B6%85%E6%97%B6%E9%94%99%E8%AF%AF%3C/span%3E" STYLE="fork"/>
          <node TEXT="通常是nginx将请求代理到后端应用时，后端应用没有在规定的时间返回数据" ID="j4vfG8d5VM" _mubu_text="%3Cspan%3E%E9%80%9A%E5%B8%B8%E6%98%AFnginx%E5%B0%86%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%90%86%E5%88%B0%E5%90%8E%E7%AB%AF%E5%BA%94%E7%94%A8%E6%97%B6%EF%BC%8C%E5%90%8E%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B2%A1%E6%9C%89%E5%9C%A8%E8%A7%84%E5%AE%9A%E7%9A%84%E6%97%B6%E9%97%B4%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
          <node TEXT="需要开发检查下应用那块有什么耗时的操作" ID="scyQuqHE53" _mubu_text="%3Cspan%3E%E9%9C%80%E8%A6%81%E5%BC%80%E5%8F%91%E6%A3%80%E6%9F%A5%E4%B8%8B%E5%BA%94%E7%94%A8%E9%82%A3%E5%9D%97%E6%9C%89%E4%BB%80%E4%B9%88%E8%80%97%E6%97%B6%E7%9A%84%E6%93%8D%E4%BD%9C%3C/span%3E" STYLE="fork"/>
          <node TEXT="比如是否出现了 sql 慢查询，接口是否发生死循环、死锁等问题" ID="WE1JraT0F2" _mubu_text="%3Cspan%3E%E6%AF%94%E5%A6%82%E6%98%AF%E5%90%A6%E5%87%BA%E7%8E%B0%E4%BA%86%20sql%20%E6%85%A2%E6%9F%A5%E8%AF%A2%EF%BC%8C%E6%8E%A5%E5%8F%A3%E6%98%AF%E5%90%A6%E5%8F%91%E7%94%9F%E6%AD%BB%E5%BE%AA%E7%8E%AF%E3%80%81%E6%AD%BB%E9%94%81%E7%AD%89%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork"/>
          <node TEXT="然后后端服务器系统负载高不高" ID="eEKXudMDKw" _mubu_text="%3Cspan%3E%E7%84%B6%E5%90%8E%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD%E9%AB%98%E4%B8%8D%E9%AB%98%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="重定向是哪一类状态码？临时重定向和永久重定向有什么区别" ID="T7rt8OIMVi" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E9%87%8D%E5%AE%9A%E5%90%91%E6%98%AF%E5%93%AA%E4%B8%80%E7%B1%BB%E7%8A%B6%E6%80%81%E7%A0%81%EF%BC%9F%E4%B8%B4%E6%97%B6%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E6%B0%B8%E4%B9%85%E9%87%8D%E5%AE%9A%E5%90%91%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="301永久重定向" ID="sqWMTmwt4g" _mubu_text="%3Cspan%3E301%E6%B0%B8%E4%B9%85%E9%87%8D%E5%AE%9A%E5%90%91%3C/span%3E" STYLE="fork">
            <node TEXT="客户端收到301状态码后，会记忆重定向的URL地址" ID="CpJgFcrV0R" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%B6%E5%88%B0301%E7%8A%B6%E6%80%81%E7%A0%81%E5%90%8E%EF%BC%8C%E4%BC%9A%E8%AE%B0%E5%BF%86%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84URL%E5%9C%B0%E5%9D%80%3C/span%3E" STYLE="fork"/>
            <node TEXT="下一次访问的时候，不需要访问旧的URL，直接跳转到新的URL" ID="tj4gT75Bov" _mubu_text="%3Cspan%3E%E4%B8%8B%E4%B8%80%E6%AC%A1%E8%AE%BF%E9%97%AE%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE%E6%97%A7%E7%9A%84URL%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%96%B0%E7%9A%84URL%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="302临时重定向" ID="ji0FNStN12" _mubu_text="%3Cspan%3E302%E4%B8%B4%E6%97%B6%E9%87%8D%E5%AE%9A%E5%90%91%3C/span%3E" STYLE="fork">
            <node TEXT="不会记忆重定向URL" ID="Xvx3zoGKUW" _mubu_text="%3Cspan%3E%E4%B8%8D%E4%BC%9A%E8%AE%B0%E5%BF%86%E9%87%8D%E5%AE%9A%E5%90%91URL%3C/span%3E" STYLE="fork"/>
            <node TEXT="下一次访问还是旧的URL，跳转到新的URL" ID="xZEo4Z1zE4" _mubu_text="%3Cspan%3E%E4%B8%8B%E4%B8%80%E6%AC%A1%E8%AE%BF%E9%97%AE%E8%BF%98%E6%98%AF%E6%97%A7%E7%9A%84URL%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%96%B0%E7%9A%84URL%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="HTTP是长连接还是短连接" ID="0iIAbG58tD" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%E6%98%AF%E9%95%BF%E8%BF%9E%E6%8E%A5%E8%BF%98%E6%98%AF%E7%9F%AD%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork">
          <node TEXT="Connection: Keep-Alive参数开启长链接" ID="aA383gwUR3" _mubu_text="%3Cspan%3EConnection:%20Keep-Alive%E5%8F%82%E6%95%B0%E5%BC%80%E5%90%AF%E9%95%BF%E9%93%BE%E6%8E%A5%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTP 1.0 虽然支持长连接，但是默认的连接行为是短链接" ID="Oad2B56yvK" _mubu_text="%3Cspan%3EHTTP%201.0%20%E8%99%BD%E7%84%B6%E6%94%AF%E6%8C%81%E9%95%BF%E8%BF%9E%E6%8E%A5%EF%BC%8C%E4%BD%86%E6%98%AF%E9%BB%98%E8%AE%A4%E7%9A%84%E8%BF%9E%E6%8E%A5%E8%A1%8C%E4%B8%BA%E6%98%AF%E7%9F%AD%E9%93%BE%E6%8E%A5%3C/span%3E" STYLE="fork"/>
          <node TEXT="从HTTP1.1版本之后，都是默认长连接了" ID="Jhzi1ZiEzo" _mubu_text="%3Cspan%3E%E4%BB%8EHTTP1.1%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8E%EF%BC%8C%E9%83%BD%E6%98%AF%E9%BB%98%E8%AE%A4%E9%95%BF%E8%BF%9E%E6%8E%A5%E4%BA%86%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTP长连接和短连接的区别" ID="iFz6BF7gWo" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="短连接" ID="M5ESRIE0JF" _mubu_text="%3Cspan%3E%E7%9F%AD%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork">
            <node TEXT="每次通信建立新的连接，请求完成之后关闭连接，频繁增加通信开销和延迟" ID="pOO3fSxlMp" _mubu_text="%3Cspan%3E%E6%AF%8F%E6%AC%A1%E9%80%9A%E4%BF%A1%E5%BB%BA%E7%AB%8B%E6%96%B0%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%EF%BC%8C%E9%A2%91%E7%B9%81%E5%A2%9E%E5%8A%A0%E9%80%9A%E4%BF%A1%E5%BC%80%E9%94%80%E5%92%8C%E5%BB%B6%E8%BF%9F%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="长连接" ID="nRafpUXDTZ" _mubu_text="%3Cspan%3E%E9%95%BF%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork">
            <node TEXT="通信保证连接的持续性，多个请求共享同一个连接，减少连接建立和释放" ID="C5jXUYNgaI" _mubu_text="%3Cspan%3E%E9%80%9A%E4%BF%A1%E4%BF%9D%E8%AF%81%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%8C%81%E7%BB%AD%E6%80%A7%EF%BC%8C%E5%A4%9A%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%85%B1%E4%BA%AB%E5%90%8C%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%87%8F%E5%B0%91%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E5%92%8C%E9%87%8A%E6%94%BE%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="HTTP长连接有什么好处" ID="9PVNpw5nv9" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%3C/span%3E" STYLE="fork">
          <node TEXT="在一次TCP连接中可以发送和响应多个HTTP请求" ID="HKSQyov4Yp" _mubu_text="%3Cspan%3E%E5%9C%A8%E4%B8%80%E6%AC%A1TCP%E8%BF%9E%E6%8E%A5%E4%B8%AD%E5%8F%AF%E4%BB%A5%E5%8F%91%E9%80%81%E5%92%8C%E5%93%8D%E5%BA%94%E5%A4%9A%E4%B8%AAHTTP%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="可以减少TCP连接资源创建和断开的开销" ID="XACG06xNiT" _mubu_text="%3Cspan%3E%E5%8F%AF%E4%BB%A5%E5%87%8F%E5%B0%91TCP%E8%BF%9E%E6%8E%A5%E8%B5%84%E6%BA%90%E5%88%9B%E5%BB%BA%E5%92%8C%E6%96%AD%E5%BC%80%E7%9A%84%E5%BC%80%E9%94%80%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTP/1.0 和 HTTP/1.1 的区别" ID="0VCMEUM5xc" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP/1.0%20%E5%92%8C%20HTTP/1.1%20%E7%9A%84%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="长连接" ID="auj2s32NSj" _mubu_text="%3Cspan%3E%E9%95%BF%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP/1.1 默认的连接行为是长连接" ID="9wPS7qemBQ" _mubu_text="%3Cspan%3EHTTP/1.1%20%E9%BB%98%E8%AE%A4%E7%9A%84%E8%BF%9E%E6%8E%A5%E8%A1%8C%E4%B8%BA%E6%98%AF%E9%95%BF%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork"/>
            <node TEXT="HTTP/1.0 虽然也支持长连接，但是默认是使用短连接" ID="YLUYKgGUVB" _mubu_text="%3Cspan%3EHTTP/1.0%20%E8%99%BD%E7%84%B6%E4%B9%9F%E6%94%AF%E6%8C%81%E9%95%BF%E8%BF%9E%E6%8E%A5%EF%BC%8C%E4%BD%86%E6%98%AF%E9%BB%98%E8%AE%A4%E6%98%AF%E4%BD%BF%E7%94%A8%E7%9F%AD%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="请求管道化" ID="bDco8luVR4" _mubu_text="%3Cspan%3E%E8%AF%B7%E6%B1%82%E7%AE%A1%E9%81%93%E5%8C%96%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP/1.1 支持请求管道传输（pipline） 的方式，HTTP/1.0 不支持这个模式" ID="GtYhRC63Vw" _mubu_text="%3Cspan%3EHTTP/1.1%20%E6%94%AF%E6%8C%81%E8%AF%B7%E6%B1%82%E7%AE%A1%E9%81%93%E4%BC%A0%E8%BE%93%EF%BC%88pipline%EF%BC%89%20%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%8CHTTP/1.0%20%E4%B8%8D%E6%94%AF%E6%8C%81%E8%BF%99%E4%B8%AA%E6%A8%A1%E5%BC%8F%3C/span%3E" STYLE="fork"/>
            <node TEXT="HTTP/1.0 请求和响应必须是串行的，当一个请求和它响应完成之后，才能发送下一个请求" ID="NOdio7W9BP" _mubu_text="%3Cspan%3EHTTP/1.0%20%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%B2%E8%A1%8C%E7%9A%84%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%92%8C%E5%AE%83%E5%93%8D%E5%BA%94%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%89%8D%E8%83%BD%E5%8F%91%E9%80%81%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork"/>
            <node TEXT=" HTTP/1.1 由于支持管道传输方式，因此可以并发发送HTTP请求，能够提高HTTP请求的效率" ID="jv8eH415Je" _mubu_text="%3Cspan%3E%20HTTP/1.1%20%E7%94%B1%E4%BA%8E%E6%94%AF%E6%8C%81%E7%AE%A1%E9%81%93%E4%BC%A0%E8%BE%93%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8F%AF%E4%BB%A5%E5%B9%B6%E5%8F%91%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82%EF%BC%8C%E8%83%BD%E5%A4%9F%E6%8F%90%E9%AB%98HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E6%95%88%E7%8E%87%3C/span%3E" STYLE="fork"/>
            <node TEXT="但是HTTP响应还是得按顺序响应，只有HTTP/2.0 实现了 HTTP 请求和响应的并发传输的能力" ID="KtM6qkqy23" _mubu_text="%3Cspan%3E%E4%BD%86%E6%98%AFHTTP%E5%93%8D%E5%BA%94%E8%BF%98%E6%98%AF%E5%BE%97%E6%8C%89%E9%A1%BA%E5%BA%8F%E5%93%8D%E5%BA%94%EF%BC%8C%E5%8F%AA%E6%9C%89HTTP/2.0%20%E5%AE%9E%E7%8E%B0%E4%BA%86%20HTTP%20%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E7%9A%84%E5%B9%B6%E5%8F%91%E4%BC%A0%E8%BE%93%E7%9A%84%E8%83%BD%E5%8A%9B%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="host字段" ID="ZwonzL4Ag7" _mubu_text="%3Cspan%3Ehost%E5%AD%97%E6%AE%B5%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP/1.0 没有 host 字段，HTTP/1.1 新增了 host 字段" ID="FSYmMrDGU0" _mubu_text="%3Cspan%3EHTTP/1.0%20%E6%B2%A1%E6%9C%89%20host%20%E5%AD%97%E6%AE%B5%EF%BC%8CHTTP/1.1%20%E6%96%B0%E5%A2%9E%E4%BA%86%20host%20%E5%AD%97%E6%AE%B5%3C/span%3E" STYLE="fork"/>
            <node TEXT="通过Host头部字段，一个物理服务器可以承载多个域名或站点" ID="o6KWKDLrjA" _mubu_text="%3Cspan%3E%E9%80%9A%E8%BF%87Host%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5%EF%BC%8C%E4%B8%80%E4%B8%AA%E7%89%A9%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%AF%E4%BB%A5%E6%89%BF%E8%BD%BD%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D%E6%88%96%E7%AB%99%E7%82%B9%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="HTTP/1.1 和 HTTP/2.0 的区别" ID="nItytw6JIp" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP/1.1%20%E5%92%8C%20HTTP/2.0%20%E7%9A%84%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="HTTP/1.1无法实现请求和响应的并发传输，而 HTTP/2.0 能够实现请求和响应的并发传输" ID="uS5bWkKmLj" _mubu_text="%3Cspan%3EHTTP/1.1%E6%97%A0%E6%B3%95%E5%AE%9E%E7%8E%B0%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E7%9A%84%E5%B9%B6%E5%8F%91%E4%BC%A0%E8%BE%93%EF%BC%8C%E8%80%8C%20HTTP/2.0%20%E8%83%BD%E5%A4%9F%E5%AE%9E%E7%8E%B0%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E7%9A%84%E5%B9%B6%E5%8F%91%E4%BC%A0%E8%BE%93%3C/span%3E" STYLE="fork"/>
          <node TEXT="1.1支持管道化但无法做到HTTP响应并发传输，HTTP2引入stream区分不同请求和响应" ID="bsuZT0wD3S" _mubu_text="%3Cspan%3E1.1%E6%94%AF%E6%8C%81%E7%AE%A1%E9%81%93%E5%8C%96%E4%BD%86%E6%97%A0%E6%B3%95%E5%81%9A%E5%88%B0HTTP%E5%93%8D%E5%BA%94%E5%B9%B6%E5%8F%91%E4%BC%A0%E8%BE%93%EF%BC%8CHTTP2%E5%BC%95%E5%85%A5stream%E5%8C%BA%E5%88%86%E4%B8%8D%E5%90%8C%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTP2.0 用了 HPACK 算法压缩了 HTTP 头部，同时将 HTTP/1.1 纯文本的格式改进成了二进制格式，提高了数据传输的效率" ID="Et5GVJeaS2" _mubu_text="%3Cspan%3EHTTP2.0%20%E7%94%A8%E4%BA%86%20HPACK%20%E7%AE%97%E6%B3%95%E5%8E%8B%E7%BC%A9%E4%BA%86%20HTTP%20%E5%A4%B4%E9%83%A8%EF%BC%8C%E5%90%8C%E6%97%B6%E5%B0%86%20HTTP/1.1%20%E7%BA%AF%E6%96%87%E6%9C%AC%E7%9A%84%E6%A0%BC%E5%BC%8F%E6%94%B9%E8%BF%9B%E6%88%90%E4%BA%86%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F%EF%BC%8C%E6%8F%90%E9%AB%98%E4%BA%86%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9A%84%E6%95%88%E7%8E%87%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTP2.0 还支持服务器主动推送资源" ID="KMCyLZ2sOP" _mubu_text="%3Cspan%3EHTTP2.0%20%E8%BF%98%E6%94%AF%E6%8C%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BB%E5%8A%A8%E6%8E%A8%E9%80%81%E8%B5%84%E6%BA%90%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTP/2.0 和 HTTP/3.0 的区别" ID="n02cM5Rqdi" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP/2.0%20%E5%92%8C%20HTTP/3.0%20%E7%9A%84%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="HTTP/3.0 连接建立方面比 HTTP/2.0 更高效" ID="Js0XGBiXnq" _mubu_text="%3Cspan%3EHTTP/3.0%20%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E6%96%B9%E9%9D%A2%E6%AF%94%20HTTP/2.0%20%E6%9B%B4%E9%AB%98%E6%95%88%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTP/3.0 在网络环境切换的过程，可以不需要重新建立连接" ID="mmdtVLlS3X" _mubu_text="%3Cspan%3EHTTP/3.0%20%E5%9C%A8%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2%E7%9A%84%E8%BF%87%E7%A8%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%B8%8D%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTP是无状态的吗" ID="vUYyRxsat9" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%E6%98%AF%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%E5%90%97%3C/span%3E" STYLE="fork">
          <node TEXT="是的" ID="2zsitoZOv2" _mubu_text="%3Cspan%3E%E6%98%AF%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTP 是无状态的，一般我们会通过 Cookie、Session、Token这些机制来维护用户的状态" ID="lcC4TeXl8L" _mubu_text="%3Cspan%3EHTTP%20%E6%98%AF%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%EF%BC%8C%E4%B8%80%E8%88%AC%E6%88%91%E4%BB%AC%E4%BC%9A%E9%80%9A%E8%BF%87%20Cookie%E3%80%81Session%E3%80%81Token%E8%BF%99%E4%BA%9B%E6%9C%BA%E5%88%B6%E6%9D%A5%E7%BB%B4%E6%8A%A4%E7%94%A8%E6%88%B7%E7%9A%84%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTP  用户后续操作，服务端如何知道属于同一个用户？追问：如果服务端是一个集群机器" ID="DTJAlU8X2G" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%20%20%E7%94%A8%E6%88%B7%E5%90%8E%E7%BB%AD%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E5%B1%9E%E4%BA%8E%E5%90%8C%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%EF%BC%9F%E8%BF%BD%E9%97%AE%EF%BC%9A%E5%A6%82%E6%9E%9C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9B%86%E7%BE%A4%E6%9C%BA%E5%99%A8%3C/span%3E" STYLE="fork">
          <node TEXT="回答" ID="WGyyizznhT" _mubu_text="%3Cspan%3E%E5%9B%9E%E7%AD%94%3C/span%3E" STYLE="fork">
            <node TEXT="可以使用 Session  Cookie 的机制 ，达到身份识别的效果" ID="67PbuGkkeH" _mubu_text="%3Cspan%3E%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20Session%20%20Cookie%20%E7%9A%84%E6%9C%BA%E5%88%B6%20%EF%BC%8C%E8%BE%BE%E5%88%B0%E8%BA%AB%E4%BB%BD%E8%AF%86%E5%88%AB%E7%9A%84%E6%95%88%E6%9E%9C%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="追问" ID="2AyHYVNZJH" _mubu_text="%3Cspan%3E%E8%BF%BD%E9%97%AE%3C/span%3E" STYLE="fork">
            <node TEXT="seesion 这种方式扩展性不好，因为 session 状态信息是保存在服务器内存的" ID="2VaPFgmO4A" _mubu_text="%3Cspan%3Eseesion%20%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%89%A9%E5%B1%95%E6%80%A7%E4%B8%8D%E5%A5%BD%EF%BC%8C%E5%9B%A0%E4%B8%BA%20session%20%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF%E6%98%AF%E4%BF%9D%E5%AD%98%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E7%9A%84%3C/span%3E" STYLE="fork"/>
            <node TEXT="解决方案" ID="ofJH069Vkt" _mubu_text="%3Cspan%3E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%3C/span%3E" STYLE="fork">
              <node TEXT="将 session id 集中保存在 redis 或者 mysql" ID="YuB2xhHL5n" _mubu_text="%3Cspan%3E%E5%B0%86%20session%20id%20%E9%9B%86%E4%B8%AD%E4%BF%9D%E5%AD%98%E5%9C%A8%20redis%20%E6%88%96%E8%80%85%20mysql%3C/span%3E" STYLE="fork">
                <node TEXT="这种方案的缺陷是单点故障的问题（虽然也可以对redis搭建集群，但是架构的成本太高了）" ID="g0rd93DcZm" _mubu_text="%3Cspan%3E%E8%BF%99%E7%A7%8D%E6%96%B9%E6%A1%88%E7%9A%84%E7%BC%BA%E9%99%B7%E6%98%AF%E5%8D%95%E7%82%B9%E6%95%85%E9%9A%9C%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E8%99%BD%E7%84%B6%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%AF%B9redis%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4%EF%BC%8C%E4%BD%86%E6%98%AF%E6%9E%B6%E6%9E%84%E7%9A%84%E6%88%90%E6%9C%AC%E5%A4%AA%E9%AB%98%E4%BA%86%EF%BC%89%3C/span%3E" STYLE="fork"/>
                <node TEXT="把状态信息保存在客户端，每次请求都发回服务器，这个就是 token 机制，分布式系统都是采用 JWT 来进行身份状态识别" ID="xa4aZvzAzD" _mubu_text="%3Cspan%3E%E6%8A%8A%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF%E4%BF%9D%E5%AD%98%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E6%AF%8F%E6%AC%A1%E8%AF%B7%E6%B1%82%E9%83%BD%E5%8F%91%E5%9B%9E%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%B0%B1%E6%98%AF%20token%20%E6%9C%BA%E5%88%B6%EF%BC%8C%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E9%83%BD%E6%98%AF%E9%87%87%E7%94%A8%20JWT%20%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E7%8A%B6%E6%80%81%E8%AF%86%E5%88%AB%3C/span%3E" STYLE="fork"/>
              </node>
            </node>
          </node>
        </node>
        <node TEXT="如果禁用 Cookie，怎么实现 Session" ID="k74iVWe3pK" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%A6%82%E6%9E%9C%E7%A6%81%E7%94%A8%20Cookie%EF%BC%8C%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%20Session%3C/span%3E" STYLE="fork">
          <node TEXT="可以通过重写 URL 来实现 Session 机制，就是在 URL 中增加 session id 请求参数" ID="FTy4Gll0nm" _mubu_text="%3Cspan%3E%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E9%87%8D%E5%86%99%20URL%20%E6%9D%A5%E5%AE%9E%E7%8E%B0%20Session%20%E6%9C%BA%E5%88%B6%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%9C%A8%20URL%20%E4%B8%AD%E5%A2%9E%E5%8A%A0%20session%20id%20%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="cookie 和 session 的区别" ID="QJevlAQYwn" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3Ecookie%20%E5%92%8C%20session%20%E7%9A%84%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="存储位置" ID="b6GG63lszn" _mubu_text="%3Cspan%3E%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%3C/span%3E" STYLE="fork">
            <node TEXT="Cookie 存储在浏览器，Session 存储在服务端" ID="9QWVzHfQka" _mubu_text="%3Cspan%3ECookie%20%E5%AD%98%E5%82%A8%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%8CSession%20%E5%AD%98%E5%82%A8%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="存储大小" ID="kAr8qwmvk7" _mubu_text="%3Cspan%3E%E5%AD%98%E5%82%A8%E5%A4%A7%E5%B0%8F%3C/span%3E" STYLE="fork">
            <node TEXT="Cookie 是存储在浏览器的，浏览器对单个 Cookie 存储大小有限制的，限制保存的数据不能超过 4K" ID="tlziHQxMCg" _mubu_text="%3Cspan%3ECookie%20%E6%98%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E5%8D%95%E4%B8%AA%20Cookie%20%E5%AD%98%E5%82%A8%E5%A4%A7%E5%B0%8F%E6%9C%89%E9%99%90%E5%88%B6%E7%9A%84%EF%BC%8C%E9%99%90%E5%88%B6%E4%BF%9D%E5%AD%98%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E8%83%BD%E8%B6%85%E8%BF%87%204K%3C/span%3E" STYLE="fork"/>
            <node TEXT="而 Session 是存储在服务端的，所以没有这个限制" ID="rrAZ7xNYcc" _mubu_text="%3Cspan%3E%E8%80%8C%20Session%20%E6%98%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E9%99%90%E5%88%B6%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="安全性" ID="AuoQjNRQzd" _mubu_text="%3Cspan%3E%E5%AE%89%E5%85%A8%E6%80%A7%3C/span%3E" STYLE="fork">
            <node TEXT="Cookie 存储在客户端，比较容易遭到不法获取，会容易遭到XSS和CSRF的攻击" ID="P3larTTbcK" _mubu_text="%3Cspan%3ECookie%20%E5%AD%98%E5%82%A8%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E6%AF%94%E8%BE%83%E5%AE%B9%E6%98%93%E9%81%AD%E5%88%B0%E4%B8%8D%E6%B3%95%E8%8E%B7%E5%8F%96%EF%BC%8C%E4%BC%9A%E5%AE%B9%E6%98%93%E9%81%AD%E5%88%B0XSS%E5%92%8CCSRF%E7%9A%84%E6%94%BB%E5%87%BB%3C/span%3E" STYLE="fork"/>
            <node TEXT="Session 存储在服务端，安全性相对 Cookie 要好一些" ID="SLlyA3NW73" _mubu_text="%3Cspan%3ESession%20%E5%AD%98%E5%82%A8%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E5%AE%89%E5%85%A8%E6%80%A7%E7%9B%B8%E5%AF%B9%20Cookie%20%E8%A6%81%E5%A5%BD%E4%B8%80%E4%BA%9B%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="有效期" ID="42IRDGw7oC" _mubu_text="%3Cspan%3E%E6%9C%89%E6%95%88%E6%9C%9F%3C/span%3E" STYLE="fork">
            <node TEXT="Cookie 可设置为长时间保持，比如经常使用的默认登录功能" ID="BDM1Icbm6p" _mubu_text="%3Cspan%3ECookie%20%E5%8F%AF%E8%AE%BE%E7%BD%AE%E4%B8%BA%E9%95%BF%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8C%81%EF%BC%8C%E6%AF%94%E5%A6%82%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84%E9%BB%98%E8%AE%A4%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%3C/span%3E" STYLE="fork"/>
            <node TEXT="Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效" ID="mQm0CfZjXf" _mubu_text="%3Cspan%3ESession%20%E4%B8%80%E8%88%AC%E5%A4%B1%E6%95%88%E6%97%B6%E9%97%B4%E8%BE%83%E7%9F%AD%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%85%B3%E9%97%AD%E6%88%96%E8%80%85%20Session%20%E8%B6%85%E6%97%B6%E9%83%BD%E4%BC%9A%E5%A4%B1%E6%95%88%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="Cookie、Session 和 Token 有什么区别" ID="rkvHWhtfQU" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ECookie%E3%80%81Session%20%E5%92%8C%20Token%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="存储位置不同" ID="kgAbSUOmcH" _mubu_text="%3Cspan%3E%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%90%8C%3C/span%3E" STYLE="fork">
            <node TEXT="Cookie 存储在客户端" ID="3V4Ec9OZtF" _mubu_text="%3Cspan%3ECookie%20%E5%AD%98%E5%82%A8%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%3C/span%3E" STYLE="fork"/>
            <node TEXT="Session 是服务器端的存储方式，通常存储在服务器的内存或数据库中" ID="lmtxKmScaz" _mubu_text="%3Cspan%3ESession%20%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%EF%BC%8C%E9%80%9A%E5%B8%B8%E5%AD%98%E5%82%A8%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E6%88%96%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%3C/span%3E" STYLE="fork"/>
            <node TEXT="Token 也是存储在客户端，但是通常以加密的方式存储在客户端的 localStorage 或 sessionStorage 中" ID="axwNa6TsIm" _mubu_text="%3Cspan%3EToken%20%E4%B9%9F%E6%98%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E4%BD%86%E6%98%AF%E9%80%9A%E5%B8%B8%E4%BB%A5%E5%8A%A0%E5%AF%86%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AD%98%E5%82%A8%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%20localStorage%20%E6%88%96%20sessionStorage%20%E4%B8%AD%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="数据安全性不同" ID="qkmpGJZmYK" _mubu_text="%3Cspan%3E%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E6%80%A7%E4%B8%8D%E5%90%8C%3C/span%3E" STYLE="fork">
            <node TEXT="Cookie 存储在客户端，可能会被窃取或篡改" ID="A38FUIgOyN" _mubu_text="%3Cspan%3ECookie%20%E5%AD%98%E5%82%A8%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%AB%E7%AA%83%E5%8F%96%E6%88%96%E7%AF%A1%E6%94%B9%3C/span%3E" STYLE="fork"/>
            <node TEXT="Session 存储在服务器端，通过一个 Session ID 在客户端和服务器之间进行关联，可以避免敏感数据直接暴露" ID="j5kOsej0gF" _mubu_text="%3Cspan%3ESession%20%E5%AD%98%E5%82%A8%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%EF%BC%8C%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AA%20Session%20ID%20%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%81%BF%E5%85%8D%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E7%9B%B4%E6%8E%A5%E6%9A%B4%E9%9C%B2%3C/span%3E" STYLE="fork"/>
            <node TEXT="Token 通常使用加密算法生成，有效期较短且单向不可逆，可以提供较高的安全性" ID="FTxBbKaNpz" _mubu_text="%3Cspan%3EToken%20%E9%80%9A%E5%B8%B8%E4%BD%BF%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%94%9F%E6%88%90%EF%BC%8C%E6%9C%89%E6%95%88%E6%9C%9F%E8%BE%83%E7%9F%AD%E4%B8%94%E5%8D%95%E5%90%91%E4%B8%8D%E5%8F%AF%E9%80%86%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%8F%90%E4%BE%9B%E8%BE%83%E9%AB%98%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="跨域支持不同" ID="ORD54Jrshk" _mubu_text="%3Cspan%3E%E8%B7%A8%E5%9F%9F%E6%94%AF%E6%8C%81%E4%B8%8D%E5%90%8C%3C/span%3E" STYLE="fork">
            <node TEXT="防止安全事故，因此 Cookie 是不支持跨域传输的，也就是不同域名下的 Cookie 是不能相互访问的" ID="Zql4NCnC9X" _mubu_text="%3Cspan%3E%E9%98%B2%E6%AD%A2%E5%AE%89%E5%85%A8%E4%BA%8B%E6%95%85%EF%BC%8C%E5%9B%A0%E6%AD%A4%20Cookie%20%E6%98%AF%E4%B8%8D%E6%94%AF%E6%8C%81%E8%B7%A8%E5%9F%9F%E4%BC%A0%E8%BE%93%E7%9A%84%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%8D%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%20Cookie%20%E6%98%AF%E4%B8%8D%E8%83%BD%E7%9B%B8%E4%BA%92%E8%AE%BF%E9%97%AE%E7%9A%84%3C/span%3E" STYLE="fork"/>
            <node TEXT="Session 机制通常是通过 Cookie 来保存 Session ID 的，因此 Session ID 默认情况下也是不支持跨域的" ID="Ux8w8bCtsS" _mubu_text="%3Cspan%3ESession%20%E6%9C%BA%E5%88%B6%E9%80%9A%E5%B8%B8%E6%98%AF%E9%80%9A%E8%BF%87%20Cookie%20%E6%9D%A5%E4%BF%9D%E5%AD%98%20Session%20ID%20%E7%9A%84%EF%BC%8C%E5%9B%A0%E6%AD%A4%20Session%20ID%20%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%E4%B9%9F%E6%98%AF%E4%B8%8D%E6%94%AF%E6%8C%81%E8%B7%A8%E5%9F%9F%E7%9A%84%3C/span%3E" STYLE="fork"/>
            <node TEXT="Token 可以轻松实现跨域，因为 Token 是存储在客户端的 localStorage 或者作为请求头的一部分发送到服务器的，所以不同的域名 Token 信息传输通常是不受影响的" ID="GYAGn0V8Hx" _mubu_text="%3Cspan%3EToken%20%E5%8F%AF%E4%BB%A5%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%EF%BC%8C%E5%9B%A0%E4%B8%BA%20Token%20%E6%98%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%20localStorage%20%E6%88%96%E8%80%85%E4%BD%9C%E4%B8%BA%E8%AF%B7%E6%B1%82%E5%A4%B4%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%E5%8F%91%E9%80%81%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9F%9F%E5%90%8D%20Token%20%E4%BF%A1%E6%81%AF%E4%BC%A0%E8%BE%93%E9%80%9A%E5%B8%B8%E6%98%AF%E4%B8%8D%E5%8F%97%E5%BD%B1%E5%93%8D%E7%9A%84%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="状态管理不同" ID="Thxb62UJ3q" _mubu_text="%3Cspan%3E%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%3C/span%3E" STYLE="fork">
            <node TEXT="Cookie 是应用程序通过在客户端存储临时数据，用于实现状态管理的一种机制；Session 是服务器端记录用户状态的方式，服务器会为每个会话分配一个唯一的 Session ID，并将其与用户状态相关联；" ID="h7YjVP69fF" _mubu_text="%3Cspan%3ECookie%20%E6%98%AF%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%80%9A%E8%BF%87%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%E4%B8%B4%E6%97%B6%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%AE%9E%E7%8E%B0%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E7%A7%8D%E6%9C%BA%E5%88%B6%EF%BC%9BSession%20%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%AE%B0%E5%BD%95%E7%94%A8%E6%88%B7%E7%8A%B6%E6%80%81%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%9A%E4%B8%BA%E6%AF%8F%E4%B8%AA%E4%BC%9A%E8%AF%9D%E5%88%86%E9%85%8D%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E7%9A%84%20Session%20ID%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E4%B8%8E%E7%94%A8%E6%88%B7%E7%8A%B6%E6%80%81%E7%9B%B8%E5%85%B3%E8%81%94%EF%BC%9B%3C/span%3E" STYLE="fork"/>
            <node TEXT="Token 是一种用于认证和授权的一种机制，通常表示用户的身份信息和权限信息" ID="5xswc5Ektp" _mubu_text="%3Cspan%3EToken%20%E6%98%AF%E4%B8%80%E7%A7%8D%E7%94%A8%E4%BA%8E%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83%E7%9A%84%E4%B8%80%E7%A7%8D%E6%9C%BA%E5%88%B6%EF%BC%8C%E9%80%9A%E5%B8%B8%E8%A1%A8%E7%A4%BA%E7%94%A8%E6%88%B7%E7%9A%84%E8%BA%AB%E4%BB%BD%E4%BF%A1%E6%81%AF%E5%92%8C%E6%9D%83%E9%99%90%E4%BF%A1%E6%81%AF%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="简述 JWT 的原理和校验机制" ID="3YhZkKxu9d" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E7%AE%80%E8%BF%B0%20JWT%20%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E6%A0%A1%E9%AA%8C%E6%9C%BA%E5%88%B6%3C/span%3E" STYLE="fork">
          <node TEXT="JWT 令牌是由 3 个部分组成，分别是头部、负载、签名" ID="uAxTynVzcu" _mubu_text="%3Cspan%3EJWT%20%E4%BB%A4%E7%89%8C%E6%98%AF%E7%94%B1%203%20%E4%B8%AA%E9%83%A8%E5%88%86%E7%BB%84%E6%88%90%EF%BC%8C%E5%88%86%E5%88%AB%E6%98%AF%E5%A4%B4%E9%83%A8%E3%80%81%E8%B4%9F%E8%BD%BD%E3%80%81%E7%AD%BE%E5%90%8D%3C/span%3E" STYLE="fork">
            <node TEXT="头部是描述令牌使用的签名算法" ID="xcJ41cxtOj" _mubu_text="%3Cspan%3E%E5%A4%B4%E9%83%A8%E6%98%AF%E6%8F%8F%E8%BF%B0%E4%BB%A4%E7%89%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
            <node TEXT="负载描述的是用户信息，比如用户名称、过期时间等等" ID="sPVG5SWIS6" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%BD%BD%E6%8F%8F%E8%BF%B0%E7%9A%84%E6%98%AF%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%8C%E6%AF%94%E5%A6%82%E7%94%A8%E6%88%B7%E5%90%8D%E7%A7%B0%E3%80%81%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%E7%AD%89%E7%AD%89%3C/span%3E" STYLE="fork"/>
            <node TEXT="头部和负载都是不会被加密的，只是会用 base64 编码。" ID="xvKxyxLSZ6" _mubu_text="%3Cspan%3E%E5%A4%B4%E9%83%A8%E5%92%8C%E8%B4%9F%E8%BD%BD%E9%83%BD%E6%98%AF%E4%B8%8D%E4%BC%9A%E8%A2%AB%E5%8A%A0%E5%AF%86%E7%9A%84%EF%BC%8C%E5%8F%AA%E6%98%AF%E4%BC%9A%E7%94%A8%20base64%20%E7%BC%96%E7%A0%81%E3%80%82%3C/span%3E" STYLE="fork"/>
            <node TEXT="最后一部分是签名是对头部和负载两部分数据的签名，签名的过程是，使用头部的签名算法，通过服务器的密钥对前面两部分内容进行加密计算" ID="cYS7l1kS0T" _mubu_text="%3Cspan%3E%E6%9C%80%E5%90%8E%E4%B8%80%E9%83%A8%E5%88%86%E6%98%AF%E7%AD%BE%E5%90%8D%E6%98%AF%E5%AF%B9%E5%A4%B4%E9%83%A8%E5%92%8C%E8%B4%9F%E8%BD%BD%E4%B8%A4%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AD%BE%E5%90%8D%EF%BC%8C%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%87%E7%A8%8B%E6%98%AF%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%A4%B4%E9%83%A8%E7%9A%84%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%EF%BC%8C%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%AF%86%E9%92%A5%E5%AF%B9%E5%89%8D%E9%9D%A2%E4%B8%A4%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%E8%AE%A1%E7%AE%97%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="校验 JWT 令牌的过程是服务端收到客户端发过来的 JWT 令牌后" ID="xYLP939mjq" _mubu_text="%3Cspan%3E%E6%A0%A1%E9%AA%8C%20JWT%20%E4%BB%A4%E7%89%8C%E7%9A%84%E8%BF%87%E7%A8%8B%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%94%B6%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E8%BF%87%E6%9D%A5%E7%9A%84%20JWT%20%E4%BB%A4%E7%89%8C%E5%90%8E%3C/span%3E" STYLE="fork"/>
          <node TEXT="服务端会取出头部和负载数据，然后用自己的密钥对这两部分数据进行加密计算，将得到的加密结果和客户端发过来 JWT 的签名进行对比" ID="jJGkApIJrn" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BC%9A%E5%8F%96%E5%87%BA%E5%A4%B4%E9%83%A8%E5%92%8C%E8%B4%9F%E8%BD%BD%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%84%B6%E5%90%8E%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AF%86%E9%92%A5%E5%AF%B9%E8%BF%99%E4%B8%A4%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%B0%86%E5%BE%97%E5%88%B0%E7%9A%84%E5%8A%A0%E5%AF%86%E7%BB%93%E6%9E%9C%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E8%BF%87%E6%9D%A5%20JWT%20%E7%9A%84%E7%AD%BE%E5%90%8D%E8%BF%9B%E8%A1%8C%E5%AF%B9%E6%AF%94%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果相同，就表示前面两部分没有被中间人篡改，这时候服务器就可以进行其他验证，比如检查 JWT 是否过期，如果也没问题，就会正常执行业务逻辑" ID="0EuRvwJSvC" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E7%9B%B8%E5%90%8C%EF%BC%8C%E5%B0%B1%E8%A1%A8%E7%A4%BA%E5%89%8D%E9%9D%A2%E4%B8%A4%E9%83%A8%E5%88%86%E6%B2%A1%E6%9C%89%E8%A2%AB%E4%B8%AD%E9%97%B4%E4%BA%BA%E7%AF%A1%E6%94%B9%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E5%85%B6%E4%BB%96%E9%AA%8C%E8%AF%81%EF%BC%8C%E6%AF%94%E5%A6%82%E6%A3%80%E6%9F%A5%20JWT%20%E6%98%AF%E5%90%A6%E8%BF%87%E6%9C%9F%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B9%9F%E6%B2%A1%E9%97%AE%E9%A2%98%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%AD%A3%E5%B8%B8%E6%89%A7%E8%A1%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="JWT 令牌为什么能解决集群部署" ID="SBGAGYHr94" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EJWT%20%E4%BB%A4%E7%89%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E8%A7%A3%E5%86%B3%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%3C/span%3E" STYLE="fork">
          <node TEXT="JWT 包含身份验证和会话信息可以让服务器无需存储会话信息，就让服务器成为无状态的了，从而比较容易实现扩展" ID="4tZiWcXgWG" _mubu_text="%3Cspan%3EJWT%20%E5%8C%85%E5%90%AB%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E5%92%8C%E4%BC%9A%E8%AF%9D%E4%BF%A1%E6%81%AF%E5%8F%AF%E4%BB%A5%E8%AE%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E9%9C%80%E5%AD%98%E5%82%A8%E4%BC%9A%E8%AF%9D%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%B0%B1%E8%AE%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%88%90%E4%B8%BA%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%E4%BA%86%EF%BC%8C%E4%BB%8E%E8%80%8C%E6%AF%94%E8%BE%83%E5%AE%B9%E6%98%93%E5%AE%9E%E7%8E%B0%E6%89%A9%E5%B1%95%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="JWT 有什么缺点" ID="jcIgmBkxzK" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EJWT%20%E6%9C%89%E4%BB%80%E4%B9%88%E7%BC%BA%E7%82%B9%3C/span%3E" STYLE="fork">
          <node TEXT="JWT 的最大缺点是令牌难以主动失效，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器搞了额外的逻辑，比如设计一个“黑名单”的额外的逻辑，用来把要主动失效的令牌集中存储起来，然后，每次使用 JWT 进行请求的话都会先判断这个 JWT 是否存在于黑名单中。​" ID="7uth9fNW2P" _mubu_text="%3Cspan%3EJWT%20%E7%9A%84%E6%9C%80%E5%A4%A7%E7%BC%BA%E7%82%B9%E6%98%AF%E4%BB%A4%E7%89%8C%E9%9A%BE%E4%BB%A5%E4%B8%BB%E5%8A%A8%E5%A4%B1%E6%95%88%EF%BC%8C%E4%B8%80%E6%97%A6%20JWT%20%E7%AD%BE%E5%8F%91%E4%BA%86%EF%BC%8C%E5%9C%A8%E5%88%B0%E6%9C%9F%E4%B9%8B%E5%89%8D%E5%B0%B1%E4%BC%9A%E5%A7%8B%E7%BB%88%E6%9C%89%E6%95%88%EF%BC%8C%E9%99%A4%E9%9D%9E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%9E%E4%BA%86%E9%A2%9D%E5%A4%96%E7%9A%84%E9%80%BB%E8%BE%91%EF%BC%8C%E6%AF%94%E5%A6%82%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E2%80%9C%E9%BB%91%E5%90%8D%E5%8D%95%E2%80%9D%E7%9A%84%E9%A2%9D%E5%A4%96%E7%9A%84%E9%80%BB%E8%BE%91%EF%BC%8C%E7%94%A8%E6%9D%A5%E6%8A%8A%E8%A6%81%E4%B8%BB%E5%8A%A8%E5%A4%B1%E6%95%88%E7%9A%84%E4%BB%A4%E7%89%8C%E9%9B%86%E4%B8%AD%E5%AD%98%E5%82%A8%E8%B5%B7%E6%9D%A5%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E6%AF%8F%E6%AC%A1%E4%BD%BF%E7%94%A8%20JWT%20%E8%BF%9B%E8%A1%8C%E8%AF%B7%E6%B1%82%E7%9A%84%E8%AF%9D%E9%83%BD%E4%BC%9A%E5%85%88%E5%88%A4%E6%96%AD%E8%BF%99%E4%B8%AA%20JWT%20%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E4%BA%8E%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%AD%E3%80%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="还有，JWT 要防止盗用的问题，因为 JWT 包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限，为了减少盗用，JWT 的有效期应该设置得比较短，而且不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。" ID="meD7aYFcbk" _mubu_text="%3Cspan%3E%E8%BF%98%E6%9C%89%EF%BC%8CJWT%20%E8%A6%81%E9%98%B2%E6%AD%A2%E7%9B%97%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E5%9B%A0%E4%B8%BA%20JWT%20%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%A4%E8%AF%81%E4%BF%A1%E6%81%AF%EF%BC%8C%E4%B8%80%E6%97%A6%E6%B3%84%E9%9C%B2%EF%BC%8C%E4%BB%BB%E4%BD%95%E4%BA%BA%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%BE%97%E8%AF%A5%E4%BB%A4%E7%89%8C%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83%E9%99%90%EF%BC%8C%E4%B8%BA%E4%BA%86%E5%87%8F%E5%B0%91%E7%9B%97%E7%94%A8%EF%BC%8CJWT%20%E7%9A%84%E6%9C%89%E6%95%88%E6%9C%9F%E5%BA%94%E8%AF%A5%E8%AE%BE%E7%BD%AE%E5%BE%97%E6%AF%94%E8%BE%83%E7%9F%AD%EF%BC%8C%E8%80%8C%E4%B8%94%E4%B8%8D%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%20HTTP%20%E5%8D%8F%E8%AE%AE%E6%98%8E%E7%A0%81%E4%BC%A0%E8%BE%93%EF%BC%8C%E8%A6%81%E4%BD%BF%E7%94%A8%20HTTPS%20%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E3%80%82%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="什么是跨域？什么情况下会发生跨域请求" ID="KGBMZUKOYv" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F%EF%BC%9F%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%8F%91%E7%94%9F%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork">
          <node TEXT="当一个网页去尝试访问不同源的资源的时候" ID="bL5Ss5fB5B" _mubu_text="%3Cspan%3E%E5%BD%93%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5%E5%8E%BB%E5%B0%9D%E8%AF%95%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%90%8C%E6%BA%90%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%97%B6%E5%80%99%3C/span%3E" STYLE="fork"/>
          <node TEXT="就意味着发生了跨域请求，只要域名、协议、端口这三个信息任意一个不同，都认为是不同源的URL" ID="LPhV3vhkvc" _mubu_text="%3Cspan%3E%E5%B0%B1%E6%84%8F%E5%91%B3%E7%9D%80%E5%8F%91%E7%94%9F%E4%BA%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%8F%AA%E8%A6%81%E5%9F%9F%E5%90%8D%E3%80%81%E5%8D%8F%E8%AE%AE%E3%80%81%E7%AB%AF%E5%8F%A3%E8%BF%99%E4%B8%89%E4%B8%AA%E4%BF%A1%E6%81%AF%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%90%8C%EF%BC%8C%E9%83%BD%E8%AE%A4%E4%B8%BA%E6%98%AF%E4%B8%8D%E5%90%8C%E6%BA%90%E7%9A%84URL%3C/span%3E" STYLE="fork"/>
          <node TEXT="跨域请求在浏览器上是不被允许的，只要在浏览器上发生跨域请求操作时，浏览器就会自动抛出的错误" ID="U0kfLILR0z" _mubu_text="%3Cspan%3E%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E6%98%AF%E4%B8%8D%E8%A2%AB%E5%85%81%E8%AE%B8%E7%9A%84%EF%BC%8C%E5%8F%AA%E8%A6%81%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E5%8F%91%E7%94%9F%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%93%8D%E4%BD%9C%E6%97%B6%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B0%B1%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%8A%9B%E5%87%BA%E7%9A%84%E9%94%99%E8%AF%AF%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果想绕过这个限制，可以用跨域资源共享（CORS）技术" ID="vR4LOlthnR" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%83%B3%E7%BB%95%E8%BF%87%E8%BF%99%E4%B8%AA%E9%99%90%E5%88%B6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%A8%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%EF%BC%88CORS%EF%BC%89%E6%8A%80%E6%9C%AF%3C/span%3E" STYLE="fork"/>
          <node TEXT="实现的方式是服务器需要在响应头上添加 Access-Control-Allow-Origin 的字段，这个字段是设置为需要放行的域名，浏览器识别到了，才能放行该请" ID="mp3SsOBP2n" _mubu_text="%3Cspan%3E%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%96%B9%E5%BC%8F%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9C%80%E8%A6%81%E5%9C%A8%E5%93%8D%E5%BA%94%E5%A4%B4%E4%B8%8A%E6%B7%BB%E5%8A%A0%20Access-Control-Allow-Origin%20%E7%9A%84%E5%AD%97%E6%AE%B5%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%AD%97%E6%AE%B5%E6%98%AF%E8%AE%BE%E7%BD%AE%E4%B8%BA%E9%9C%80%E8%A6%81%E6%94%BE%E8%A1%8C%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%86%E5%88%AB%E5%88%B0%E4%BA%86%EF%BC%8C%E6%89%8D%E8%83%BD%E6%94%BE%E8%A1%8C%E8%AF%A5%E8%AF%B7%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="RestFul 是什么？RestFul 请求的 URL 有什么特点" ID="N8HKjkJiit" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ERestFul%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9FRestFul%20%E8%AF%B7%E6%B1%82%E7%9A%84%20URL%20%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9%3C/span%3E" STYLE="fork">
          <node TEXT="RestFul 是一种 API 接口设计规范，用 URL 定位资源，用HTTP 方法表示接口的动作，用 HTTP 状态码表示接口处理的情况。" ID="GQ1zltg6NO" _mubu_text="%3Cspan%3ERestFul%20%E6%98%AF%E4%B8%80%E7%A7%8D%20API%20%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E7%94%A8%20URL%20%E5%AE%9A%E4%BD%8D%E8%B5%84%E6%BA%90%EF%BC%8C%E7%94%A8HTTP%20%E6%96%B9%E6%B3%95%E8%A1%A8%E7%A4%BA%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8A%A8%E4%BD%9C%EF%BC%8C%E7%94%A8%20HTTP%20%E7%8A%B6%E6%80%81%E7%A0%81%E8%A1%A8%E7%A4%BA%E6%8E%A5%E5%8F%A3%E5%A4%84%E7%90%86%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="RestFul风格的 HTTP 接口可以通过 URL 就能判定这个接口是做什么的。比如：​" ID="5KDQpUbAHK" _mubu_text="%3Cspan%3ERestFul%E9%A3%8E%E6%A0%BC%E7%9A%84%20HTTP%20%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%20URL%20%E5%B0%B1%E8%83%BD%E5%88%A4%E5%AE%9A%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E6%98%AF%E5%81%9A%E4%BB%80%E4%B9%88%E7%9A%84%E3%80%82%E6%AF%94%E5%A6%82%EF%BC%9A%3C/span%3E" STYLE="fork"/>
          <node TEXT="/articles POST ，代表新增一个文章​" ID="CC6sgNwfKc" _mubu_text="%3Cspan%3E/articles%20POST%20%EF%BC%8C%E4%BB%A3%E8%A1%A8%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA%E6%96%87%E7%AB%A0%3C/span%3E" STYLE="fork"/>
          <node TEXT="/articles GET ，代表获取全部文章，有可能后边带参数进行一些过滤查询或分页​" ID="GEbUN8Dj08" _mubu_text="%3Cspan%3E/articles%20GET%20%EF%BC%8C%E4%BB%A3%E8%A1%A8%E8%8E%B7%E5%8F%96%E5%85%A8%E9%83%A8%E6%96%87%E7%AB%A0%EF%BC%8C%E6%9C%89%E5%8F%AF%E8%83%BD%E5%90%8E%E8%BE%B9%E5%B8%A6%E5%8F%82%E6%95%B0%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%BA%9B%E8%BF%87%E6%BB%A4%E6%9F%A5%E8%AF%A2%E6%88%96%E5%88%86%E9%A1%B5%3C/span%3E" STYLE="fork"/>
          <node TEXT="/articles/1 GET ，代表获取 id 为 1 这篇文章​" ID="47TbHzRnFF" _mubu_text="%3Cspan%3E/articles/1%20GET%20%EF%BC%8C%E4%BB%A3%E8%A1%A8%E8%8E%B7%E5%8F%96%20id%20%E4%B8%BA%201%20%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%3C/span%3E" STYLE="fork"/>
          <node TEXT="/articles/1 PUT ，代表更新id为 1 的文章，请求体可能会带一些更新内容​" ID="mWOgLSu0IN" _mubu_text="%3Cspan%3E/articles/1%20PUT%20%EF%BC%8C%E4%BB%A3%E8%A1%A8%E6%9B%B4%E6%96%B0id%E4%B8%BA%201%20%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%B8%A6%E4%B8%80%E4%BA%9B%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9%3C/span%3E" STYLE="fork"/>
          <node TEXT="/articles/1 DELETE ，代表删除id为 1 的文章​" ID="ogOWDiPZcH" _mubu_text="%3Cspan%3E/articles/1%20DELETE%20%EF%BC%8C%E4%BB%A3%E8%A1%A8%E5%88%A0%E9%99%A4id%E4%B8%BA%201%20%E7%9A%84%E6%96%87%E7%AB%A0%3C/span%3E" STYLE="fork"/>
        </node>
      </node>
      <node TEXT="HTTPS（重要）" ID="qNF0uycmY8" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3EHTTPS%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89%3C/span%3E" STYLE="fork">
        <node TEXT="HTTP 和 HTTPS 有什么区别" ID="wJoMnfLIMM" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTP%20%E5%92%8C%20HTTPS%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="安全性" ID="QxeQmNTt3a" _mubu_text="%3Cspan%3E%E5%AE%89%E5%85%A8%E6%80%A7%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP是明文传输，数据传输过程中不加密，HTTPS通过使用SSL/TLS对数据进行加密，提高安全性" ID="lHAP7ht9Yv" _mubu_text="%3Cspan%3EHTTP%E6%98%AF%E6%98%8E%E6%96%87%E4%BC%A0%E8%BE%93%EF%BC%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%B8%8D%E5%8A%A0%E5%AF%86%EF%BC%8CHTTPS%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8SSL/TLS%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%EF%BC%8C%E6%8F%90%E9%AB%98%E5%AE%89%E5%85%A8%E6%80%A7%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="建立连接" ID="1lKRdxvOjT" _mubu_text="%3Cspan%3E%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP连接建立相对简单，TCP三次握手进行HTTP报文传输" ID="fpIeIP2mfY" _mubu_text="%3Cspan%3EHTTP%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E7%9B%B8%E5%AF%B9%E7%AE%80%E5%8D%95%EF%BC%8CTCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%9B%E8%A1%8CHTTP%E6%8A%A5%E6%96%87%E4%BC%A0%E8%BE%93%3C/span%3E" STYLE="fork"/>
            <node TEXT="HTTPS在TCP三次握手之后还需进行SSL/TLS的握手过程，才可以进入加密报文传输" ID="21npJZKTrs" _mubu_text="%3Cspan%3EHTTPS%E5%9C%A8TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B9%8B%E5%90%8E%E8%BF%98%E9%9C%80%E8%BF%9B%E8%A1%8CSSL/TLS%E7%9A%84%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B%EF%BC%8C%E6%89%8D%E5%8F%AF%E4%BB%A5%E8%BF%9B%E5%85%A5%E5%8A%A0%E5%AF%86%E6%8A%A5%E6%96%87%E4%BC%A0%E8%BE%93%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="端口号" ID="BFx7nWbCly" _mubu_text="%3Cspan%3E%E7%AB%AF%E5%8F%A3%E5%8F%B7%3C/span%3E" STYLE="fork">
            <node TEXT="HTTP默认使用80端口进行通信" ID="Fv4iwowL4N" _mubu_text="%3Cspan%3EHTTP%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A880%E7%AB%AF%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1%3C/span%3E" STYLE="fork"/>
            <node TEXT="HTTPS默认使用端口号443" ID="vRw44oESR4" _mubu_text="%3Cspan%3EHTTPS%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8%E7%AB%AF%E5%8F%A3%E5%8F%B7443%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="证书" ID="eQeMTq4Cqr" _mubu_text="%3Cspan%3E%E8%AF%81%E4%B9%A6%3C/span%3E" STYLE="fork">
            <node TEXT="HTTPS需要使用数字证书来验证服务器的身份，并确保数据传输的安全性" ID="jrt96Cb3tt" _mubu_text="%3Cspan%3EHTTPS%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E6%9D%A5%E9%AA%8C%E8%AF%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BA%AB%E4%BB%BD%EF%BC%8C%E5%B9%B6%E7%A1%AE%E4%BF%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%3C/span%3E" STYLE="fork"/>
            <node TEXT="证书由受信任的第三方机构颁发，用于证明服务器的身份和所有权" ID="Rg8SYzOtnr" _mubu_text="%3Cspan%3E%E8%AF%81%E4%B9%A6%E7%94%B1%E5%8F%97%E4%BF%A1%E4%BB%BB%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%BA%E6%9E%84%E9%A2%81%E5%8F%91%EF%BC%8C%E7%94%A8%E4%BA%8E%E8%AF%81%E6%98%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BA%AB%E4%BB%BD%E5%92%8C%E6%89%80%E6%9C%89%E6%9D%83%3C/span%3E" STYLE="fork"/>
            <node TEXT="而HTTP没有使用证书进行身份验证和加密" ID="Nt9SGRQYiM" _mubu_text="%3Cspan%3E%E8%80%8CHTTP%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E8%AF%81%E4%B9%A6%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E5%92%8C%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="了解过哪些加密算法" ID="uioEnMeyRa" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%BA%86%E8%A7%A3%E8%BF%87%E5%93%AA%E4%BA%9B%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork">
          <node TEXT="对称加密算法和非对称加密算法" ID="LSUgHp2THO" _mubu_text="%3Cspan%3E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork">
            <node TEXT="HTTPS协议里，对称加密算法和非对称加密算法都会用到" ID="sMHOwPOFYG" _mubu_text="%3Cspan%3EHTTPS%E5%8D%8F%E8%AE%AE%E9%87%8C%EF%BC%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%83%BD%E4%BC%9A%E7%94%A8%E5%88%B0%3C/span%3E" STYLE="fork"/>
            <node TEXT="对称加密算法就是用一个密钥进行加解密，比如AES算法" ID="uXLhCXA2tU" _mubu_text="%3Cspan%3E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%B0%B1%E6%98%AF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%AF%86%E9%92%A5%E8%BF%9B%E8%A1%8C%E5%8A%A0%E8%A7%A3%E5%AF%86%EF%BC%8C%E6%AF%94%E5%A6%82AES%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
            <node TEXT="非对称加密则是由2个密钥，分别是公钥和私钥，比如RSA算法" ID="6Ucopehp9w" _mubu_text="%3Cspan%3E%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%88%99%E6%98%AF%E7%94%B12%E4%B8%AA%E5%AF%86%E9%92%A5%EF%BC%8C%E5%88%86%E5%88%AB%E6%98%AF%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5%EF%BC%8C%E6%AF%94%E5%A6%82RSA%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
            <node TEXT="对称加密算法适用于大量数据的加密和解密，而非对称加密算法适用于密钥交换和数字签名等场景" ID="Ppr52Fj4Zq" _mubu_text="%3Cspan%3E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%82%E7%94%A8%E4%BA%8E%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%EF%BC%8C%E8%80%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%82%E7%94%A8%E4%BA%8E%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%92%8C%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AD%89%E5%9C%BA%E6%99%AF%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="哈希算法" ID="WOTgX0ZbDI" _mubu_text="%3Cspan%3E%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork">
            <node TEXT="使用MD5算法" ID="74rfNRaSNr" _mubu_text="%3Cspan%3E%E4%BD%BF%E7%94%A8MD5%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
            <node TEXT="哈希算法是一种单向算法" ID="vjLrv4TCIB" _mubu_text="%3Cspan%3E%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E6%98%AF%E4%B8%80%E7%A7%8D%E5%8D%95%E5%90%91%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
            <node TEXT="用户可以通过哈希算法对目标信息生成一段特定" ID="2NKkCuzC8T" _mubu_text="%3Cspan%3E%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E5%AF%B9%E7%9B%AE%E6%A0%87%E4%BF%A1%E6%81%AF%E7%94%9F%E6%88%90%E4%B8%80%E6%AE%B5%E7%89%B9%E5%AE%9A%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="对称加密和非对称加密是什么？各自有哪些算法" ID="wf6XKyy3nb" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%90%84%E8%87%AA%E6%9C%89%E5%93%AA%E4%BA%9B%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork">
          <node TEXT="对称加密和解密都是用同一个密钥进行操作" ID="OupYN4dKCg" _mubu_text="%3Cspan%3E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E9%83%BD%E6%98%AF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AF%86%E9%92%A5%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%3C/span%3E" STYLE="fork">
            <node TEXT="加密和解密过程速度较快，适合对大量数据进行加密，对称密钥必须保密，不能明文传输" ID="dszu6B8AVc" _mubu_text="%3Cspan%3E%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B%E9%80%9F%E5%BA%A6%E8%BE%83%E5%BF%AB%EF%BC%8C%E9%80%82%E5%90%88%E5%AF%B9%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%EF%BC%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%BF%85%E9%A1%BB%E4%BF%9D%E5%AF%86%EF%BC%8C%E4%B8%8D%E8%83%BD%E6%98%8E%E6%96%87%E4%BC%A0%E8%BE%93%3C/span%3E" STYLE="fork">
              <node TEXT="常见的对称加密算法有AES、DES等" ID="jnMdOvOAlA" _mubu_text="%3Cspan%3E%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%9C%89AES%E3%80%81DES%E7%AD%89%3C/span%3E" STYLE="fork"/>
            </node>
          </node>
          <node TEXT="非对称加密使用两个密钥，分别是公钥和私钥" ID="DcYpXtgEAT" _mubu_text="%3Cspan%3E%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AA%E5%AF%86%E9%92%A5%EF%BC%8C%E5%88%86%E5%88%AB%E6%98%AF%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5%3C/span%3E" STYLE="fork">
            <node TEXT="加密和解密过程相对较慢，适合对少量数据进行加密" ID="5FmZemPaGa" _mubu_text="%3Cspan%3E%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B%E7%9B%B8%E5%AF%B9%E8%BE%83%E6%85%A2%EF%BC%8C%E9%80%82%E5%90%88%E5%AF%B9%E5%B0%91%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork">
              <node TEXT="公钥可以任意分发，而私钥必须保密，可以通过公钥加密对称密钥，私钥解密的方式，保证对称密钥的安全传输，常见的非对称加密算法有RSA、ECC等" ID="xTE0JhGSVl" _mubu_text="%3Cspan%3E%E5%85%AC%E9%92%A5%E5%8F%AF%E4%BB%A5%E4%BB%BB%E6%84%8F%E5%88%86%E5%8F%91%EF%BC%8C%E8%80%8C%E7%A7%81%E9%92%A5%E5%BF%85%E9%A1%BB%E4%BF%9D%E5%AF%86%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%EF%BC%8C%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%BF%9D%E8%AF%81%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E7%9A%84%E5%AE%89%E5%85%A8%E4%BC%A0%E8%BE%93%EF%BC%8C%E5%B8%B8%E8%A7%81%E7%9A%84%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%9C%89RSA%E3%80%81ECC%E7%AD%89%3C/span%3E" STYLE="fork"/>
            </node>
          </node>
        </node>
        <node TEXT="对称和非对称的加密算法的区别" ID="oGXQt51oMC" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%AF%B9%E7%A7%B0%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="对称和非对称加密" ID="c7G3Y9nKv9" _mubu_text="%3Cspan%3E%E5%AF%B9%E7%A7%B0%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork">
            <node TEXT="对称加密和解密都是用同一个密钥进行操作，加密和解密过程速度较快，适合对大量数据进行加密，对称密钥必须保密，不能明文传输" ID="0CGSqnFmhX" _mubu_text="%3Cspan%3E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E9%83%BD%E6%98%AF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AF%86%E9%92%A5%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B%E9%80%9F%E5%BA%A6%E8%BE%83%E5%BF%AB%EF%BC%8C%E9%80%82%E5%90%88%E5%AF%B9%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%EF%BC%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%BF%85%E9%A1%BB%E4%BF%9D%E5%AF%86%EF%BC%8C%E4%B8%8D%E8%83%BD%E6%98%8E%E6%96%87%E4%BC%A0%E8%BE%93%3C/span%3E" STYLE="fork"/>
            <node TEXT="非对称加密使用两个密钥，分别是公钥和私钥，加密和解密过程相对较慢，适合对少量数据进行加密。公钥可以任意分发，而私钥必须保密，可以通过公钥加密对称密钥，私钥解密的方式，保证对称密钥的安全传输" ID="erUdkh9wtw" _mubu_text="%3Cspan%3E%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AA%E5%AF%86%E9%92%A5%EF%BC%8C%E5%88%86%E5%88%AB%E6%98%AF%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5%EF%BC%8C%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B%E7%9B%B8%E5%AF%B9%E8%BE%83%E6%85%A2%EF%BC%8C%E9%80%82%E5%90%88%E5%AF%B9%E5%B0%91%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%E3%80%82%E5%85%AC%E9%92%A5%E5%8F%AF%E4%BB%A5%E4%BB%BB%E6%84%8F%E5%88%86%E5%8F%91%EF%BC%8C%E8%80%8C%E7%A7%81%E9%92%A5%E5%BF%85%E9%A1%BB%E4%BF%9D%E5%AF%86%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%EF%BC%8C%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%BF%9D%E8%AF%81%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E7%9A%84%E5%AE%89%E5%85%A8%E4%BC%A0%E8%BE%93%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="HTTPS 采用的就是这样的混合加密方式" ID="8yZ9Ok6ITS" _mubu_text="%3Cspan%3EHTTPS%20%E9%87%87%E7%94%A8%E7%9A%84%E5%B0%B1%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%3C/span%3E" STYLE="fork">
            <node TEXT="在通信建立前采用非对称加密的方式交换「对称密钥」，后续就不再使用非对称加密" ID="uOJwNNa2sh" _mubu_text="%3Cspan%3E%E5%9C%A8%E9%80%9A%E4%BF%A1%E5%BB%BA%E7%AB%8B%E5%89%8D%E9%87%87%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BA%A4%E6%8D%A2%E3%80%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E3%80%8D%EF%BC%8C%E5%90%8E%E7%BB%AD%E5%B0%B1%E4%B8%8D%E5%86%8D%E4%BD%BF%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork"/>
            <node TEXT="在通信过程中全部使用「对称密钥」的方式加密明文数据" ID="S73Z6Lnzea" _mubu_text="%3Cspan%3E%E5%9C%A8%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%85%A8%E9%83%A8%E4%BD%BF%E7%94%A8%E3%80%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E3%80%8D%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8A%A0%E5%AF%86%E6%98%8E%E6%96%87%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="假设有一个文件，大小未知，现在要把它上传到云端，该使用对称加密还是非对称加密算法" ID="8EPNRZWlcB" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%81%87%E8%AE%BE%E6%9C%89%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8C%E5%A4%A7%E5%B0%8F%E6%9C%AA%E7%9F%A5%EF%BC%8C%E7%8E%B0%E5%9C%A8%E8%A6%81%E6%8A%8A%E5%AE%83%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%BA%91%E7%AB%AF%EF%BC%8C%E8%AF%A5%E4%BD%BF%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%98%E6%98%AF%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork">
          <node TEXT="使用对称加密算法比较好" ID="y6Hqvd9Liw" _mubu_text="%3Cspan%3E%E4%BD%BF%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%83%E5%A5%BD%3C/span%3E" STYLE="fork"/>
          <node TEXT="因为对称加密算法运算速度是比非对称加密更快的，比较适合数据量大常见的加密" ID="ISd6t3WZ4O" _mubu_text="%3Cspan%3E%E5%9B%A0%E4%B8%BA%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E8%BF%90%E7%AE%97%E9%80%9F%E5%BA%A6%E6%98%AF%E6%AF%94%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%9B%B4%E5%BF%AB%E7%9A%84%EF%BC%8C%E6%AF%94%E8%BE%83%E9%80%82%E5%90%88%E6%95%B0%E6%8D%AE%E9%87%8F%E5%A4%A7%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTPS 建立过程是怎么样的" ID="uk0P1tmwIK" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTPS%20%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%3C/span%3E" STYLE="fork">
          <node TEXT="第一次 TLS 握手：客户端生成的随机数" ID="Hwt3BMvN3r" _mubu_text="%3Cspan%3E%E7%AC%AC%E4%B8%80%E6%AC%A1%20TLS%20%E6%8F%A1%E6%89%8B%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%94%9F%E6%88%90%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%3C/span%3E" STYLE="fork"/>
          <node TEXT="第二次 TLS 握手：服务端生产的随机数，包含数字证书" ID="D4QG48tkDs" _mubu_text="%3Cspan%3E%E7%AC%AC%E4%BA%8C%E6%AC%A1%20TLS%20%E6%8F%A1%E6%89%8B%EF%BC%9A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%94%9F%E4%BA%A7%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%8C%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%3C/span%3E" STYLE="fork"/>
          <node TEXT="校验证书：客户端会用 CA 机构的公钥解密数字证书拿到服务端的公钥" ID="jdASLgANJd" _mubu_text="%3Cspan%3E%E6%A0%A1%E9%AA%8C%E8%AF%81%E4%B9%A6%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BC%9A%E7%94%A8%20CA%20%E6%9C%BA%E6%9E%84%E7%9A%84%E5%85%AC%E9%92%A5%E8%A7%A3%E5%AF%86%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E6%8B%BF%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%85%AC%E9%92%A5%3C/span%3E" STYLE="fork"/>
          <node TEXT="第三次 TLS 握手：客户端再次生成一个随机数，用服务端的公钥加密，双方根据已经得到的三个随机数，会根据算法生成对称密钥" ID="USbWiVrVLn" _mubu_text="%3Cspan%3E%E7%AC%AC%E4%B8%89%E6%AC%A1%20TLS%20%E6%8F%A1%E6%89%8B%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%86%8D%E6%AC%A1%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%8C%E7%94%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%EF%BC%8C%E5%8F%8C%E6%96%B9%E6%A0%B9%E6%8D%AE%E5%B7%B2%E7%BB%8F%E5%BE%97%E5%88%B0%E7%9A%84%E4%B8%89%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%8C%E4%BC%9A%E6%A0%B9%E6%8D%AE%E7%AE%97%E6%B3%95%E7%94%9F%E6%88%90%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%3C/span%3E" STYLE="fork"/>
          <node TEXT="第四次 TLS 握手：服务器也是同样的操作，发送消息告诉客户端开始用对称加密方式发送消息，并且也会对数据做个摘要，并用对称密钥加密一下，让客户端做个校验，如果双方都验证加密和解密没问题，那么 TLS 四次握手正式完成了" ID="B7TOj9GIeu" _mubu_text="%3Cspan%3E%E7%AC%AC%E5%9B%9B%E6%AC%A1%20TLS%20%E6%8F%A1%E6%89%8B%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%9F%E6%98%AF%E5%90%8C%E6%A0%B7%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%91%8A%E8%AF%89%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%A7%8B%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B9%9F%E4%BC%9A%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%81%9A%E4%B8%AA%E6%91%98%E8%A6%81%EF%BC%8C%E5%B9%B6%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86%E4%B8%80%E4%B8%8B%EF%BC%8C%E8%AE%A9%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%81%9A%E4%B8%AA%E6%A0%A1%E9%AA%8C%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%8F%8C%E6%96%B9%E9%83%BD%E9%AA%8C%E8%AF%81%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E6%B2%A1%E9%97%AE%E9%A2%98%EF%BC%8C%E9%82%A3%E4%B9%88%20TLS%20%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%AD%A3%E5%BC%8F%E5%AE%8C%E6%88%90%E4%BA%86%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="为什么需要三个随机数" ID="kBzviuvaUT" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%B8%89%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%3C/span%3E" STYLE="fork">
          <node TEXT="因为计算机生成的随机数其实是一个伪随机，那么只用一个随机数来生成的对称密钥很容易就被破解了，用三个伪随机数就十分接近随机了，这样称密钥破解的难度都变高了" ID="8JZfFeTCK9" _mubu_text="%3Cspan%3E%E5%9B%A0%E4%B8%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%94%9F%E6%88%90%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%85%B6%E5%AE%9E%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BC%AA%E9%9A%8F%E6%9C%BA%EF%BC%8C%E9%82%A3%E4%B9%88%E5%8F%AA%E7%94%A8%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%9D%A5%E7%94%9F%E6%88%90%E7%9A%84%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%BE%88%E5%AE%B9%E6%98%93%E5%B0%B1%E8%A2%AB%E7%A0%B4%E8%A7%A3%E4%BA%86%EF%BC%8C%E7%94%A8%E4%B8%89%E4%B8%AA%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%B0%B1%E5%8D%81%E5%88%86%E6%8E%A5%E8%BF%91%E9%9A%8F%E6%9C%BA%E4%BA%86%EF%BC%8C%E8%BF%99%E6%A0%B7%E7%A7%B0%E5%AF%86%E9%92%A5%E7%A0%B4%E8%A7%A3%E7%9A%84%E9%9A%BE%E5%BA%A6%E9%83%BD%E5%8F%98%E9%AB%98%E4%BA%86%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="一次HTTPS需要几次RTT（就是几个来回）" ID="sVTq6hbJrG" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%B8%80%E6%AC%A1HTTPS%E9%9C%80%E8%A6%81%E5%87%A0%E6%AC%A1RTT%EF%BC%88%E5%B0%B1%E6%98%AF%E5%87%A0%E4%B8%AA%E6%9D%A5%E5%9B%9E%EF%BC%89%3C/span%3E" STYLE="fork">
          <node TEXT="RTT是往返的延时" ID="r2s8Uv327Q" _mubu_text="%3Cspan%3ERTT%E6%98%AF%E5%BE%80%E8%BF%94%E7%9A%84%E5%BB%B6%E6%97%B6%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTPS是四次握手，也就是代表 2 次往返，那么就是 2 次RTT" ID="G78X9mJpXy" _mubu_text="%3Cspan%3EHTTPS%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%BB%A3%E8%A1%A8%202%20%E6%AC%A1%E5%BE%80%E8%BF%94%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E6%98%AF%202%20%E6%AC%A1RTT%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="你了解业界现在有一个RTT建立HTTPS连接的方案吗" ID="uY0EBI1FJS" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%BD%A0%E4%BA%86%E8%A7%A3%E4%B8%9A%E7%95%8C%E7%8E%B0%E5%9C%A8%E6%9C%89%E4%B8%80%E4%B8%AARTT%E5%BB%BA%E7%AB%8BHTTPS%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%96%B9%E6%A1%88%E5%90%97%3C/span%3E" STYLE="fork">
          <node TEXT="基于 ECDHE 密钥交换的 HTTPS 连接方案，可以实现 1 个 RTT建立 HTTPS 连接" ID="KQ6ktB4XZp" _mubu_text="%3Cspan%3E%E5%9F%BA%E4%BA%8E%20ECDHE%20%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E7%9A%84%20HTTPS%20%E8%BF%9E%E6%8E%A5%E6%96%B9%E6%A1%88%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%201%20%E4%B8%AA%20RTT%E5%BB%BA%E7%AB%8B%20HTTPS%20%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTPS 过程进行了多少次非对称加密？多少次对称加密" ID="awMvCXQOzr" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTPS%20%E8%BF%87%E7%A8%8B%E8%BF%9B%E8%A1%8C%E4%BA%86%E5%A4%9A%E5%B0%91%E6%AC%A1%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%EF%BC%9F%E5%A4%9A%E5%B0%91%E6%AC%A1%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork">
          <node TEXT="还未HTTPS握手之前" ID="VTkHvte7CU" _mubu_text="%3Cspan%3E%E8%BF%98%E6%9C%AAHTTPS%E6%8F%A1%E6%89%8B%E4%B9%8B%E5%89%8D%3C/span%3E" STYLE="fork">
            <node TEXT="服务端在向 CA 机构注册证书的时候，CA 机构会用 CA 私钥会对服务端的公钥进行签名，形成数字证书，这里涉及了 1 次非对称加密" ID="byhSZQQzcs" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9C%A8%E5%90%91%20CA%20%E6%9C%BA%E6%9E%84%E6%B3%A8%E5%86%8C%E8%AF%81%E4%B9%A6%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8CCA%20%E6%9C%BA%E6%9E%84%E4%BC%9A%E7%94%A8%20CA%20%E7%A7%81%E9%92%A5%E4%BC%9A%E5%AF%B9%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%85%AC%E9%92%A5%E8%BF%9B%E8%A1%8C%E7%AD%BE%E5%90%8D%EF%BC%8C%E5%BD%A2%E6%88%90%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%EF%BC%8C%E8%BF%99%E9%87%8C%E6%B6%89%E5%8F%8A%E4%BA%86%201%20%E6%AC%A1%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="HTTPS握手期间" ID="XFzohcEVlD" _mubu_text="%3Cspan%3EHTTPS%E6%8F%A1%E6%89%8B%E6%9C%9F%E9%97%B4%3C/span%3E" STYLE="fork">
            <node TEXT="客户端会用服务端的公钥加密随机数，服务端再用私钥解密，这里涉及了 1 次非对称加密" ID="UzpUCvBMGT" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BC%9A%E7%94%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%86%8D%E7%94%A8%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86%EF%BC%8C%E8%BF%99%E9%87%8C%E6%B6%89%E5%8F%8A%E4%BA%86%201%20%E6%AC%A1%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork"/>
            <node TEXT="客户端和服务端生成对称密钥之后，都需要对之前握手的数据做个摘要，并用对称密钥加密一下，这个过程客户端和操作都会涉及到，所以 HTTPS 握手期间用了 2 次对称加密，客户端和服务端各做了一次" ID="M87OepFoJ6" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%94%9F%E6%88%90%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E4%B9%8B%E5%90%8E%EF%BC%8C%E9%83%BD%E9%9C%80%E8%A6%81%E5%AF%B9%E4%B9%8B%E5%89%8D%E6%8F%A1%E6%89%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%81%9A%E4%B8%AA%E6%91%98%E8%A6%81%EF%BC%8C%E5%B9%B6%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86%E4%B8%80%E4%B8%8B%EF%BC%8C%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%93%8D%E4%BD%9C%E9%83%BD%E4%BC%9A%E6%B6%89%E5%8F%8A%E5%88%B0%EF%BC%8C%E6%89%80%E4%BB%A5%20HTTPS%20%E6%8F%A1%E6%89%8B%E6%9C%9F%E9%97%B4%E7%94%A8%E4%BA%86%202%20%E6%AC%A1%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%84%E5%81%9A%E4%BA%86%E4%B8%80%E6%AC%A1%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="HTTPS握手完成之后" ID="6ePOH8Jt3J" _mubu_text="%3Cspan%3EHTTPS%E6%8F%A1%E6%89%8B%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%3C/span%3E" STYLE="fork">
            <node TEXT="HTTPS 数据传输期间都是用对称密钥进行加密和解密" ID="oa7477h9zZ" _mubu_text="%3Cspan%3EHTTPS%20%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%9C%9F%E9%97%B4%E9%83%BD%E6%98%AF%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="SSL握手流程为什么要使用非对称加密" ID="oKrHzQfKCL" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ESSL%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork">
          <node TEXT="主要是为了保护对称加密钥不被中间人窃取，如果对称加密钥被窃取了，使用这个对称加密钥加密的 HTTP 报文就很容易被破解了" ID="E73IAw7wHm" _mubu_text="%3Cspan%3E%E4%B8%BB%E8%A6%81%E6%98%AF%E4%B8%BA%E4%BA%86%E4%BF%9D%E6%8A%A4%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E9%92%A5%E4%B8%8D%E8%A2%AB%E4%B8%AD%E9%97%B4%E4%BA%BA%E7%AA%83%E5%8F%96%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E9%92%A5%E8%A2%AB%E7%AA%83%E5%8F%96%E4%BA%86%EF%BC%8C%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%AA%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86%E7%9A%84%20HTTP%20%E6%8A%A5%E6%96%87%E5%B0%B1%E5%BE%88%E5%AE%B9%E6%98%93%E8%A2%AB%E7%A0%B4%E8%A7%A3%E4%BA%86%3C/span%3E" STYLE="fork"/>
          <node TEXT="在 HTTPS 协议进行 TLS 握手的时候，客户端生成随机数，这个是生成对称加密钥元素之一，它会被公钥加密后传输给服务端，由服务端用私钥解密，这里就保证了对称加密钥的安全，因为被公钥加密的内容，其他人是无法解密的，只有持有私钥的人，才能解密出实际的内容" ID="HbONeFALYm" _mubu_text="%3Cspan%3E%E5%9C%A8%20HTTPS%20%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%20TLS%20%E6%8F%A1%E6%89%8B%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%98%AF%E7%94%9F%E6%88%90%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E9%92%A5%E5%85%83%E7%B4%A0%E4%B9%8B%E4%B8%80%EF%BC%8C%E5%AE%83%E4%BC%9A%E8%A2%AB%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E5%90%8E%E4%BC%A0%E8%BE%93%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E7%94%B1%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%94%A8%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86%EF%BC%8C%E8%BF%99%E9%87%8C%E5%B0%B1%E4%BF%9D%E8%AF%81%E4%BA%86%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E9%92%A5%E7%9A%84%E5%AE%89%E5%85%A8%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%A2%AB%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E5%85%B6%E4%BB%96%E4%BA%BA%E6%98%AF%E6%97%A0%E6%B3%95%E8%A7%A3%E5%AF%86%E7%9A%84%EF%BC%8C%E5%8F%AA%E6%9C%89%E6%8C%81%E6%9C%89%E7%A7%81%E9%92%A5%E7%9A%84%E4%BA%BA%EF%BC%8C%E6%89%8D%E8%83%BD%E8%A7%A3%E5%AF%86%E5%87%BA%E5%AE%9E%E9%99%85%E7%9A%84%E5%86%85%E5%AE%B9%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="为什么 HTTPS 不用非对称加密算法加密 HTTP 报文" ID="hRQ9xFietj" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%B8%BA%E4%BB%80%E4%B9%88%20HTTPS%20%E4%B8%8D%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86%20HTTP%20%E6%8A%A5%E6%96%87%3C/span%3E" STYLE="fork">
          <node TEXT="非对称加密算法的加密和解密操作相对比对称加密算法更消耗 CPU 计算力，也更耗时" ID="hBb6CM9Nd0" _mubu_text="%3Cspan%3E%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%AF%B9%E6%AF%94%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%9B%B4%E6%B6%88%E8%80%97%20CPU%20%E8%AE%A1%E7%AE%97%E5%8A%9B%EF%BC%8C%E4%B9%9F%E6%9B%B4%E8%80%97%E6%97%B6%3C/span%3E" STYLE="fork"/>
          <node TEXT="而HTTP报文通常包含大量的数据，如果直接使用非对称加密算法对整个报文进行加密和解密，会导致性能下降和延迟增加" ID="avLggpxen2" _mubu_text="%3Cspan%3E%E8%80%8CHTTP%E6%8A%A5%E6%96%87%E9%80%9A%E5%B8%B8%E5%8C%85%E5%90%AB%E5%A4%A7%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%E6%9E%9C%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%AF%B9%E6%95%B4%E4%B8%AA%E6%8A%A5%E6%96%87%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%EF%BC%8C%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%80%A7%E8%83%BD%E4%B8%8B%E9%99%8D%E5%92%8C%E5%BB%B6%E8%BF%9F%E5%A2%9E%E5%8A%A0%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="HTTPS 会对 URL 加密吗" ID="OMpUXLSK1T" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EHTTPS%20%E4%BC%9A%E5%AF%B9%20URL%20%E5%8A%A0%E5%AF%86%E5%90%97%3C/span%3E" STYLE="fork">
          <node TEXT="URL 是属于 HTTP 报文头部的信息" ID="WdaIVpePlz" _mubu_text="%3Cspan%3EURL%20%E6%98%AF%E5%B1%9E%E4%BA%8E%20HTTP%20%E6%8A%A5%E6%96%87%E5%A4%B4%E9%83%A8%E7%9A%84%E4%BF%A1%E6%81%AF%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTPS 会对整个 HTTP 报文都会加密" ID="bH4ra7ouqG" _mubu_text="%3Cspan%3EHTTPS%20%E4%BC%9A%E5%AF%B9%E6%95%B4%E4%B8%AA%20HTTP%20%E6%8A%A5%E6%96%87%E9%83%BD%E4%BC%9A%E5%8A%A0%E5%AF%86%3C/span%3E" STYLE="fork"/>
          <node TEXT="所以 HTTPS 是会对 URL 加密的" ID="mziG7GEeIg" _mubu_text="%3Cspan%3E%E6%89%80%E4%BB%A5%20HTTPS%20%E6%98%AF%E4%BC%9A%E5%AF%B9%20URL%20%E5%8A%A0%E5%AF%86%E7%9A%84%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="CA 机构如何验证server身份" ID="gf1rgQvgPo" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ECA%20%E6%9C%BA%E6%9E%84%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81server%E8%BA%AB%E4%BB%BD%3C/span%3E" STYLE="fork">
          <node TEXT="服务端在向CA机构申请证书的时候，CA机构会通过自己的私钥对服务器的一些信息进行数字签名" ID="kvK62VcPGb" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9C%A8%E5%90%91CA%E6%9C%BA%E6%9E%84%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8CCA%E6%9C%BA%E6%9E%84%E4%BC%9A%E9%80%9A%E8%BF%87%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A7%81%E9%92%A5%E5%AF%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8C%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%3C/span%3E" STYLE="fork"/>
          <node TEXT="然后在HTTPS握手阶段的时候，服务端会发送证书给客户端来验证，客户端实际上已经内置了CA机构的公钥，那么就用这个公钥来验证服务端的数字证书是否是可信的" ID="3JRpPHJhQC" _mubu_text="%3Cspan%3E%E7%84%B6%E5%90%8E%E5%9C%A8HTTPS%E6%8F%A1%E6%89%8B%E9%98%B6%E6%AE%B5%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BC%9A%E5%8F%91%E9%80%81%E8%AF%81%E4%B9%A6%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E9%AA%8C%E8%AF%81%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E9%99%85%E4%B8%8A%E5%B7%B2%E7%BB%8F%E5%86%85%E7%BD%AE%E4%BA%86CA%E6%9C%BA%E6%9E%84%E7%9A%84%E5%85%AC%E9%92%A5%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E7%94%A8%E8%BF%99%E4%B8%AA%E5%85%AC%E9%92%A5%E6%9D%A5%E9%AA%8C%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E6%98%AF%E5%90%A6%E6%98%AF%E5%8F%AF%E4%BF%A1%E7%9A%84%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="证书是绿色的是什么意思" ID="HSKr0IkWUg" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E8%AF%81%E4%B9%A6%E6%98%AF%E7%BB%BF%E8%89%B2%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%3C/span%3E" STYLE="fork">
          <node TEXT="代表网站是可信的，浏览器在 HTTPS 握手阶段会对网站服务器下发的证书进行校验" ID="4CzekMAPZV" _mubu_text="%3Cspan%3E%E4%BB%A3%E8%A1%A8%E7%BD%91%E7%AB%99%E6%98%AF%E5%8F%AF%E4%BF%A1%E7%9A%84%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%A8%20HTTPS%20%E6%8F%A1%E6%89%8B%E9%98%B6%E6%AE%B5%E4%BC%9A%E5%AF%B9%E7%BD%91%E7%AB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E5%8F%91%E7%9A%84%E8%AF%81%E4%B9%A6%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果校验成功，代表网站的身份的可信的，是被 CA 机构认证过的" ID="2GK7vfDV5P" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%A0%A1%E9%AA%8C%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BB%A3%E8%A1%A8%E7%BD%91%E7%AB%99%E7%9A%84%E8%BA%AB%E4%BB%BD%E7%9A%84%E5%8F%AF%E4%BF%A1%E7%9A%84%EF%BC%8C%E6%98%AF%E8%A2%AB%20CA%20%E6%9C%BA%E6%9E%84%E8%AE%A4%E8%AF%81%E8%BF%87%E7%9A%84%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="自己随便编一个证书可以吗？需要去什么地方注册" ID="D0r8eMASs6" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E8%87%AA%E5%B7%B1%E9%9A%8F%E4%BE%BF%E7%BC%96%E4%B8%80%E4%B8%AA%E8%AF%81%E4%B9%A6%E5%8F%AF%E4%BB%A5%E5%90%97%EF%BC%9F%E9%9C%80%E8%A6%81%E5%8E%BB%E4%BB%80%E4%B9%88%E5%9C%B0%E6%96%B9%E6%B3%A8%E5%86%8C%3C/span%3E" STYLE="fork">
          <node TEXT="不可以" ID="nnJmRoUMjL" _mubu_text="%3Cspan%3E%E4%B8%8D%E5%8F%AF%E4%BB%A5%3C/span%3E" STYLE="fork"/>
          <node TEXT="浏览器在校验这个证书的时候，会认为是非法的证书，这时候浏览器会显示访问的网站是不可信" ID="6V3qs0rXQZ" _mubu_text="%3Cspan%3E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%A8%E6%A0%A1%E9%AA%8C%E8%BF%99%E4%B8%AA%E8%AF%81%E4%B9%A6%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E8%AE%A4%E4%B8%BA%E6%98%AF%E9%9D%9E%E6%B3%95%E7%9A%84%E8%AF%81%E4%B9%A6%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E6%98%BE%E7%A4%BA%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BD%91%E7%AB%99%E6%98%AF%E4%B8%8D%E5%8F%AF%E4%BF%A1%3C/span%3E" STYLE="fork"/>
          <node TEXT="得去  CA 机构申请证书，浏览器才会认为是合法的证书，这样才能正常的访问网站的内容" ID="RGzgTvSlPi" _mubu_text="%3Cspan%3E%E5%BE%97%E5%8E%BB%20%20CA%20%E6%9C%BA%E6%9E%84%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%8D%E4%BC%9A%E8%AE%A4%E4%B8%BA%E6%98%AF%E5%90%88%E6%B3%95%E7%9A%84%E8%AF%81%E4%B9%A6%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%89%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E7%9A%84%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99%E7%9A%84%E5%86%85%E5%AE%B9%3C/span%3E" STYLE="fork"/>
        </node>
      </node>
      <node TEXT="RPC" ID="KLYigT9LK3" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3ERPC%3C/span%3E" STYLE="fork">
        <node TEXT="RPC的作用是什么" ID="BscKMS7F6l" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ERPC%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="RPC 是远程过程调用，主要运用于微服务之间的通信" ID="sx3S0ZVumv" _mubu_text="%3Cspan%3ERPC%20%E6%98%AF%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%EF%BC%8C%E4%B8%BB%E8%A6%81%E8%BF%90%E7%94%A8%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%3C/span%3E" STYLE="fork"/>
          <node TEXT="它的作用是帮助我们屏蔽网络编程细节" ID="3C5XadRd18" _mubu_text="%3Cspan%3E%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E5%B1%8F%E8%94%BD%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%BB%86%E8%8A%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="实现调用远程方法就跟调用本地（同一个项目中的方法）一样的体验" ID="EDnkB2kVVl" _mubu_text="%3Cspan%3E%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%94%A8%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E5%B0%B1%E8%B7%9F%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0%EF%BC%88%E5%90%8C%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%89%E4%B8%80%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C%3C/span%3E" STYLE="fork"/>
          <node TEXT="让我们更专注于业务逻辑，而无需关注底层网络通信的细节" ID="0LoJWIHdIQ" _mubu_text="%3Cspan%3E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%9B%B4%E4%B8%93%E6%B3%A8%E4%BA%8E%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%EF%BC%8C%E8%80%8C%E6%97%A0%E9%9C%80%E5%85%B3%E6%B3%A8%E5%BA%95%E5%B1%82%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%9A%84%E7%BB%86%E8%8A%82%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="为什么有HTTP协议了？还要用RPC" ID="uxQwA3IpH5" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%E4%BA%86%EF%BC%9F%E8%BF%98%E8%A6%81%E7%94%A8RPC%3C/span%3E" STYLE="fork">
          <node TEXT="HTTP 和 RPC 其实是两个维度的东西， HTTP 指的是通信协议。而 RPC 则是远程调用，其对应的是本地调用。RPC 的通信可以用 HTTP 协议，也可以自定义协议，是不做约束的" ID="rsc703Fxz2" _mubu_text="%3Cspan%3EHTTP%20%E5%92%8C%20RPC%20%E5%85%B6%E5%AE%9E%E6%98%AF%E4%B8%A4%E4%B8%AA%E7%BB%B4%E5%BA%A6%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%8C%20HTTP%20%E6%8C%87%E7%9A%84%E6%98%AF%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E3%80%82%E8%80%8C%20RPC%20%E5%88%99%E6%98%AF%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%EF%BC%8C%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E6%98%AF%E6%9C%AC%E5%9C%B0%E8%B0%83%E7%94%A8%E3%80%82RPC%20%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8F%AF%E4%BB%A5%E7%94%A8%20HTTP%20%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE%EF%BC%8C%E6%98%AF%E4%B8%8D%E5%81%9A%E7%BA%A6%E6%9D%9F%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="用 HTTP 传输数据会有比较多的信息，比如头部有各种字段信息，数据载体则一般是用 json 格式，而 RPC 因为它定制化程度更高，可以采用体积更小的protobuf或其他序列化协议去保存结构体数据，同时也不需要像HTTP那样考虑各种浏览器行为，比如302重定向跳转啥的，因此性能也会更好一些，这也是在公司内部微服务中抛弃HTTP，选择使用RPC的最主要原因" ID="iHmKeFUySo" _mubu_text="%3Cspan%3E%E7%94%A8%20HTTP%20%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE%E4%BC%9A%E6%9C%89%E6%AF%94%E8%BE%83%E5%A4%9A%E7%9A%84%E4%BF%A1%E6%81%AF%EF%BC%8C%E6%AF%94%E5%A6%82%E5%A4%B4%E9%83%A8%E6%9C%89%E5%90%84%E7%A7%8D%E5%AD%97%E6%AE%B5%E4%BF%A1%E6%81%AF%EF%BC%8C%E6%95%B0%E6%8D%AE%E8%BD%BD%E4%BD%93%E5%88%99%E4%B8%80%E8%88%AC%E6%98%AF%E7%94%A8%20json%20%E6%A0%BC%E5%BC%8F%EF%BC%8C%E8%80%8C%20RPC%20%E5%9B%A0%E4%B8%BA%E5%AE%83%E5%AE%9A%E5%88%B6%E5%8C%96%E7%A8%8B%E5%BA%A6%E6%9B%B4%E9%AB%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%87%87%E7%94%A8%E4%BD%93%E7%A7%AF%E6%9B%B4%E5%B0%8F%E7%9A%84protobuf%E6%88%96%E5%85%B6%E4%BB%96%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE%E5%8E%BB%E4%BF%9D%E5%AD%98%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%90%8C%E6%97%B6%E4%B9%9F%E4%B8%8D%E9%9C%80%E8%A6%81%E5%83%8FHTTP%E9%82%A3%E6%A0%B7%E8%80%83%E8%99%91%E5%90%84%E7%A7%8D%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A1%8C%E4%B8%BA%EF%BC%8C%E6%AF%94%E5%A6%82302%E9%87%8D%E5%AE%9A%E5%90%91%E8%B7%B3%E8%BD%AC%E5%95%A5%E7%9A%84%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%80%A7%E8%83%BD%E4%B9%9F%E4%BC%9A%E6%9B%B4%E5%A5%BD%E4%B8%80%E4%BA%9B%EF%BC%8C%E8%BF%99%E4%B9%9F%E6%98%AF%E5%9C%A8%E5%85%AC%E5%8F%B8%E5%86%85%E9%83%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E6%8A%9B%E5%BC%83HTTP%EF%BC%8C%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8RPC%E7%9A%84%E6%9C%80%E4%B8%BB%E8%A6%81%E5%8E%9F%E5%9B%A0%3C/span%3E" STYLE="fork"/>
        </node>
      </node>
      <node TEXT="NGINX" ID="kn3UO6DkV8" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3ENGINX%3C/span%3E" STYLE="fork">
        <node TEXT="Nginx位于七层网络结构中的哪一层" ID="sZSDK1wXL3" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ENginx%E4%BD%8D%E4%BA%8E%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E4%B8%AD%E7%9A%84%E5%93%AA%E4%B8%80%E5%B1%82%3C/span%3E" STYLE="fork">
          <node TEXT="我们常说的七层和四层负载均衡，是用 OSI 网络模型来描述的" ID="IsV7zpCEgQ" _mubu_text="%3Cspan%3E%E6%88%91%E4%BB%AC%E5%B8%B8%E8%AF%B4%E7%9A%84%E4%B8%83%E5%B1%82%E5%92%8C%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%8C%E6%98%AF%E7%94%A8%20OSI%20%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%9D%A5%E6%8F%8F%E8%BF%B0%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="七层对应的是应用层，四层对应的是传输层" ID="WSDFdRnEJ3" _mubu_text="%3Cspan%3E%E4%B8%83%E5%B1%82%E5%AF%B9%E5%BA%94%E7%9A%84%E6%98%AF%E5%BA%94%E7%94%A8%E5%B1%82%EF%BC%8C%E5%9B%9B%E5%B1%82%E5%AF%B9%E5%BA%94%E7%9A%84%E6%98%AF%E4%BC%A0%E8%BE%93%E5%B1%82%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="Nginx有哪些负载均衡算法" ID="nWJToWHIWW" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ENginx%E6%9C%89%E5%93%AA%E4%BA%9B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork">
          <node TEXT="主要有普通轮询、加权轮询、IP哈希、URL哈希、最短响应时间、最短连接这些负载均衡算法" ID="yYHXXYvExr" _mubu_text="%3Cspan%3E%E4%B8%BB%E8%A6%81%E6%9C%89%E6%99%AE%E9%80%9A%E8%BD%AE%E8%AF%A2%E3%80%81%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E3%80%81IP%E5%93%88%E5%B8%8C%E3%80%81URL%E5%93%88%E5%B8%8C%E3%80%81%E6%9C%80%E7%9F%AD%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E3%80%81%E6%9C%80%E7%9F%AD%E8%BF%9E%E6%8E%A5%E8%BF%99%E4%BA%9B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
          <node TEXT="任务平分类" ID="NZBFnI4mse" _mubu_text="%3Cspan%3E%E4%BB%BB%E5%8A%A1%E5%B9%B3%E5%88%86%E7%B1%BB%3C/span%3E" STYLE="fork">
            <node TEXT="负载均衡系统将收到的任务平均分配给服务器进行处理，这里的“平均”可以是绝对数量的平均，也可以是比例或者权重上的平均，比如轮询和加权轮询算法" ID="QQ1dbn1m08" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%B3%BB%E7%BB%9F%E5%B0%86%E6%94%B6%E5%88%B0%E7%9A%84%E4%BB%BB%E5%8A%A1%E5%B9%B3%E5%9D%87%E5%88%86%E9%85%8D%E7%BB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%EF%BC%8C%E8%BF%99%E9%87%8C%E7%9A%84%E2%80%9C%E5%B9%B3%E5%9D%87%E2%80%9D%E5%8F%AF%E4%BB%A5%E6%98%AF%E7%BB%9D%E5%AF%B9%E6%95%B0%E9%87%8F%E7%9A%84%E5%B9%B3%E5%9D%87%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%98%AF%E6%AF%94%E4%BE%8B%E6%88%96%E8%80%85%E6%9D%83%E9%87%8D%E4%B8%8A%E7%9A%84%E5%B9%B3%E5%9D%87%EF%BC%8C%E6%AF%94%E5%A6%82%E8%BD%AE%E8%AF%A2%E5%92%8C%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="负载均衡类" ID="vQEIktp8In" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%B1%BB%3C/span%3E" STYLE="fork">
            <node TEXT="负载均衡系统根据服务器的负载来进行分配，可以用CPU负载来衡量，也可以用连接数、I/O使用率、网卡吞吐量等来衡量系统的压力。比如最短连接数算法" ID="VT9KjwQP6z" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%B3%BB%E7%BB%9F%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%B4%9F%E8%BD%BD%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%88%86%E9%85%8D%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%A8CPU%E8%B4%9F%E8%BD%BD%E6%9D%A5%E8%A1%A1%E9%87%8F%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%94%A8%E8%BF%9E%E6%8E%A5%E6%95%B0%E3%80%81I/O%E4%BD%BF%E7%94%A8%E7%8E%87%E3%80%81%E7%BD%91%E5%8D%A1%E5%90%9E%E5%90%90%E9%87%8F%E7%AD%89%E6%9D%A5%E8%A1%A1%E9%87%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8E%8B%E5%8A%9B%E3%80%82%E6%AF%94%E5%A6%82%E6%9C%80%E7%9F%AD%E8%BF%9E%E6%8E%A5%E6%95%B0%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="性能最优类" ID="j77NHEkUxF" _mubu_text="%3Cspan%3E%E6%80%A7%E8%83%BD%E6%9C%80%E4%BC%98%E7%B1%BB%3C/span%3E" STYLE="fork">
            <node TEXT="负载均衡系统根据服务器的响应时间来进行任务分配，优先将新任务分配给响应最快的服务器，比如最短响应时间算法" ID="ArUVe0auUH" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%B3%BB%E7%BB%9F%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%9D%A5%E8%BF%9B%E8%A1%8C%E4%BB%BB%E5%8A%A1%E5%88%86%E9%85%8D%EF%BC%8C%E4%BC%98%E5%85%88%E5%B0%86%E6%96%B0%E4%BB%BB%E5%8A%A1%E5%88%86%E9%85%8D%E7%BB%99%E5%93%8D%E5%BA%94%E6%9C%80%E5%BF%AB%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%AF%94%E5%A6%82%E6%9C%80%E7%9F%AD%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="Hash类" ID="eDL7aPSLlE" _mubu_text="%3Cspan%3EHash%E7%B1%BB%3C/span%3E" STYLE="fork">
            <node TEXT="负载均衡系统根据任务中的某些关键信息进行Hash运算，将相同Hash值的请求分配到同一台服务器上，比如IP哈希和URL算法" ID="LrcRTcghVX" _mubu_text="%3Cspan%3E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%B3%BB%E7%BB%9F%E6%A0%B9%E6%8D%AE%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%9A%84%E6%9F%90%E4%BA%9B%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8CHash%E8%BF%90%E7%AE%97%EF%BC%8C%E5%B0%86%E7%9B%B8%E5%90%8CHash%E5%80%BC%E7%9A%84%E8%AF%B7%E6%B1%82%E5%88%86%E9%85%8D%E5%88%B0%E5%90%8C%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%8C%E6%AF%94%E5%A6%82IP%E5%93%88%E5%B8%8C%E5%92%8CURL%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="什么是反向代理？什么是正向代理" ID="jTx1WLErWS" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%9F%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%3C/span%3E" STYLE="fork">
          <node TEXT="正向代理代理的客户端这一方" ID="FEvZmTKYJ9" _mubu_text="%3Cspan%3E%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%99%E4%B8%80%E6%96%B9%3C/span%3E" STYLE="fork"/>
          <node TEXT="反向代理是代理服务器这一方，可以通过负载均衡策略，将请求分发到不同服务器上" ID="HV33L39PgO" _mubu_text="%3Cspan%3E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%98%AF%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%99%E4%B8%80%E6%96%B9%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E5%88%86%E5%8F%91%E5%88%B0%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%3C/span%3E" STYLE="fork"/>
        </node>
      </node>
    </node>
    <node TEXT="传输层面试题（重点）" ID="bBSU6Wr1m6" _mubu_text="%3Cspan%20class=%22bold%20underline%20text-color-blue%22%3E%E4%BC%A0%E8%BE%93%E5%B1%82%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89%3C/span%3E" STYLE="bubble" POSITION="default">
      <node TEXT="TCP 三次握手（重要）" ID="j4CRzzn2R7" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3ETCP%20%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89%3C/span%3E" STYLE="fork">
        <node TEXT="TCP 头部有哪些字段" ID="mcxcuSXrna" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP%20%E5%A4%B4%E9%83%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E5%AD%97%E6%AE%B5%3C/span%3E" STYLE="fork"/>
        <node TEXT="图解" ID="kmiYDRAkz6" _mubu_text="%3Cspan%3E%E5%9B%BE%E8%A7%A3%3C/span%3E" STYLE="fork">
          <node TEXT="源端口" ID="4SoxTuOX3F" _mubu_text="%3Cspan%3E%E6%BA%90%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork">
            <node TEXT="16位，标识报文的返回地址" ID="QvrAtsqXfj" _mubu_text="%3Cspan%3E16%E4%BD%8D%EF%BC%8C%E6%A0%87%E8%AF%86%E6%8A%A5%E6%96%87%E7%9A%84%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="目的端口" ID="1584k8nrru" _mubu_text="%3Cspan%3E%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork">
            <node TEXT="16位，指明接收方计算机上的应用程序接口" ID="Zqds7HnpWZ" _mubu_text="%3Cspan%3E16%E4%BD%8D%EF%BC%8C%E6%8C%87%E6%98%8E%E6%8E%A5%E6%94%B6%E6%96%B9%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="序列号" ID="iuosgv0g9w" _mubu_text="%3Cspan%3E%E5%BA%8F%E5%88%97%E5%8F%B7%3C/span%3E" STYLE="fork">
            <node TEXT="32位，在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就累加一次该数据字节数的大小。用来解决网络包乱序问题" ID="nWih4KtI29" _mubu_text="%3Cspan%3E32%E4%BD%8D%EF%BC%8C%E5%9C%A8%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E6%97%B6%E7%94%B1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%94%9F%E6%88%90%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%85%B6%E5%88%9D%E5%A7%8B%E5%80%BC%EF%BC%8C%E9%80%9A%E8%BF%87%20SYN%20%E5%8C%85%E4%BC%A0%E7%BB%99%E6%8E%A5%E6%94%B6%E7%AB%AF%E4%B8%BB%E6%9C%BA%EF%BC%8C%E6%AF%8F%E5%8F%91%E9%80%81%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B0%B1%E7%B4%AF%E5%8A%A0%E4%B8%80%E6%AC%A1%E8%AF%A5%E6%95%B0%E6%8D%AE%E5%AD%97%E8%8A%82%E6%95%B0%E7%9A%84%E5%A4%A7%E5%B0%8F%E3%80%82%E7%94%A8%E6%9D%A5%E8%A7%A3%E5%86%B3%E7%BD%91%E7%BB%9C%E5%8C%85%E4%B9%B1%E5%BA%8F%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="确认号" ID="fOVYZHdmpR" _mubu_text="%3Cspan%3E%E7%A1%AE%E8%AE%A4%E5%8F%B7%3C/span%3E" STYLE="fork">
            <node TEXT="32位，指下一次期望收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。用来解决丢包的问题" ID="Ts22Dl4RGX" _mubu_text="%3Cspan%3E32%E4%BD%8D%EF%BC%8C%E6%8C%87%E4%B8%8B%E4%B8%80%E6%AC%A1%E6%9C%9F%E6%9C%9B%E6%94%B6%E5%88%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BA%8F%E5%88%97%E5%8F%B7%EF%BC%8C%E5%8F%91%E9%80%81%E7%AB%AF%E6%94%B6%E5%88%B0%E8%BF%99%E4%B8%AA%E7%A1%AE%E8%AE%A4%E5%BA%94%E7%AD%94%E4%BB%A5%E5%90%8E%E5%8F%AF%E4%BB%A5%E8%AE%A4%E4%B8%BA%E5%9C%A8%E8%BF%99%E4%B8%AA%E5%BA%8F%E5%8F%B7%E4%BB%A5%E5%89%8D%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%BD%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%AD%A3%E5%B8%B8%E6%8E%A5%E6%94%B6%E3%80%82%E7%94%A8%E6%9D%A5%E8%A7%A3%E5%86%B3%E4%B8%A2%E5%8C%85%E7%9A%84%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="数据偏移／首部长度" ID="fvfRie0rMV" _mubu_text="%3Cspan%3E%E6%95%B0%E6%8D%AE%E5%81%8F%E7%A7%BB%EF%BC%8F%E9%A6%96%E9%83%A8%E9%95%BF%E5%BA%A6%3C/span%3E" STYLE="fork">
            <node TEXT="4位，TCP首部可能含有可选项内容，所以TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示最大长度为60字节" ID="hsfb48yOH4" _mubu_text="%3Cspan%3E4%E4%BD%8D%EF%BC%8CTCP%E9%A6%96%E9%83%A8%E5%8F%AF%E8%83%BD%E5%90%AB%E6%9C%89%E5%8F%AF%E9%80%89%E9%A1%B9%E5%86%85%E5%AE%B9%EF%BC%8C%E6%89%80%E4%BB%A5TCP%E6%8A%A5%E5%A4%B4%E7%9A%84%E9%95%BF%E5%BA%A6%E6%98%AF%E4%B8%8D%E7%A1%AE%E5%AE%9A%E7%9A%84%EF%BC%8C%E6%8A%A5%E5%A4%B4%E4%B8%8D%E5%8C%85%E5%90%AB%E4%BB%BB%E4%BD%95%E4%BB%BB%E9%80%89%E5%AD%97%E6%AE%B5%E5%88%99%E9%95%BF%E5%BA%A6%E4%B8%BA20%E5%AD%97%E8%8A%82%EF%BC%8C4%E4%BD%8D%E9%A6%96%E9%83%A8%E9%95%BF%E5%BA%A6%E5%AD%97%E6%AE%B5%E6%89%80%E8%83%BD%E8%A1%A8%E7%A4%BA%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6%E4%B8%BA60%E5%AD%97%E8%8A%82%3C/span%3E" STYLE="fork"/>
            <node TEXT="首部长度也叫数据偏移，因为首部长度实际上指示了数据区在报文段中的起始偏移值" ID="7Winu693ZW" _mubu_text="%3Cspan%3E%E9%A6%96%E9%83%A8%E9%95%BF%E5%BA%A6%E4%B9%9F%E5%8F%AB%E6%95%B0%E6%8D%AE%E5%81%8F%E7%A7%BB%EF%BC%8C%E5%9B%A0%E4%B8%BA%E9%A6%96%E9%83%A8%E9%95%BF%E5%BA%A6%E5%AE%9E%E9%99%85%E4%B8%8A%E6%8C%87%E7%A4%BA%E4%BA%86%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9C%A8%E6%8A%A5%E6%96%87%E6%AE%B5%E4%B8%AD%E7%9A%84%E8%B5%B7%E5%A7%8B%E5%81%8F%E7%A7%BB%E5%80%BC%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="保留" ID="xeNoVxeCfR" _mubu_text="%3Cspan%3E%E4%BF%9D%E7%95%99%3C/span%3E" STYLE="fork">
            <node TEXT="6位，为将来定义新的用途保留，现在一般置0" ID="W2K5fTE2ei" _mubu_text="%3Cspan%3E6%E4%BD%8D%EF%BC%8C%E4%B8%BA%E5%B0%86%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%96%B0%E7%9A%84%E7%94%A8%E9%80%94%E4%BF%9D%E7%95%99%EF%BC%8C%E7%8E%B0%E5%9C%A8%E4%B8%80%E8%88%AC%E7%BD%AE0%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="校验和" ID="YpGXHIIxGj" _mubu_text="%3Cspan%3E%E6%A0%A1%E9%AA%8C%E5%92%8C%3C/span%3E" STYLE="fork">
            <node TEXT="16位，由发送端填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏，这个校验不仅包括TCP头部，也包括数据部分" ID="hbFIpJQfep" _mubu_text="%3Cspan%3E16%E4%BD%8D%EF%BC%8C%E7%94%B1%E5%8F%91%E9%80%81%E7%AB%AF%E5%A1%AB%E5%85%85%EF%BC%8C%E6%8E%A5%E6%94%B6%E7%AB%AF%E5%AF%B9TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E6%89%A7%E8%A1%8CCRC%E7%AE%97%E6%B3%95%E4%BB%A5%E6%A3%80%E9%AA%8CTCP%E6%8A%A5%E6%96%87%E6%AE%B5%E5%9C%A8%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%98%AF%E5%90%A6%E6%8D%9F%E5%9D%8F%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%A0%A1%E9%AA%8C%E4%B8%8D%E4%BB%85%E5%8C%85%E6%8B%ACTCP%E5%A4%B4%E9%83%A8%EF%BC%8C%E4%B9%9F%E5%8C%85%E6%8B%AC%E6%95%B0%E6%8D%AE%E9%83%A8%E5%88%86%3C/span%3E" STYLE="fork"/>
            <node TEXT="这是TCP实现可靠传输的一个重要保障" ID="ig20KnyW5d" _mubu_text="%3Cspan%3E%E8%BF%99%E6%98%AFTCP%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E7%9A%84%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E4%BF%9D%E9%9A%9C%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="窗口" ID="oRtW7lqBvn" _mubu_text="%3Cspan%3E%E7%AA%97%E5%8F%A3%3C/span%3E" STYLE="fork">
            <node TEXT="16位，是TCP流量控制的一个手段" ID="HEU50FnvXp" _mubu_text="%3Cspan%3E16%E4%BD%8D%EF%BC%8C%E6%98%AFTCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E6%89%8B%E6%AE%B5%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="紧急指针" ID="1dczIIUPsz" _mubu_text="%3Cspan%3E%E7%B4%A7%E6%80%A5%E6%8C%87%E9%92%88%3C/span%3E" STYLE="fork">
            <node TEXT="16位，只有当 URG 标志置 1 时紧急指针才有效" ID="7qJAjj3TgI" _mubu_text="%3Cspan%3E16%E4%BD%8D%EF%BC%8C%E5%8F%AA%E6%9C%89%E5%BD%93%20URG%20%E6%A0%87%E5%BF%97%E7%BD%AE%201%20%E6%97%B6%E7%B4%A7%E6%80%A5%E6%8C%87%E9%92%88%E6%89%8D%E6%9C%89%E6%95%88%3C/span%3E" STYLE="fork"/>
            <node TEXT="紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号" ID="my5Q5s2RxE" _mubu_text="%3Cspan%3E%E7%B4%A7%E6%80%A5%E6%8C%87%E9%92%88%E6%98%AF%E4%B8%80%E4%B8%AA%E6%AD%A3%E7%9A%84%E5%81%8F%E7%A7%BB%E9%87%8F%EF%BC%8C%E5%92%8C%E9%A1%BA%E5%BA%8F%E5%8F%B7%E5%AD%97%E6%AE%B5%E4%B8%AD%E7%9A%84%E5%80%BC%E7%9B%B8%E5%8A%A0%E8%A1%A8%E7%A4%BA%E7%B4%A7%E6%80%A5%E6%95%B0%E6%8D%AE%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E7%9A%84%E5%BA%8F%E5%8F%B7%3C/span%3E" STYLE="fork"/>
            <node TEXT="使用紧急指针是发送端向另一端发送紧急数据的一种方式" ID="JDxgI1TiIj" _mubu_text="%3Cspan%3E%E4%BD%BF%E7%94%A8%E7%B4%A7%E6%80%A5%E6%8C%87%E9%92%88%E6%98%AF%E5%8F%91%E9%80%81%E7%AB%AF%E5%90%91%E5%8F%A6%E4%B8%80%E7%AB%AF%E5%8F%91%E9%80%81%E7%B4%A7%E6%80%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="选项和填充" ID="ktQ8lXHQGZ" _mubu_text="%3Cspan%3E%E9%80%89%E9%A1%B9%E5%92%8C%E5%A1%AB%E5%85%85%3C/span%3E" STYLE="fork">
            <node TEXT="TCP头部的最后一个选项字段是可变长的可选信息" ID="UfTSZlFVVK" _mubu_text="%3Cspan%3ETCP%E5%A4%B4%E9%83%A8%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E9%80%89%E9%A1%B9%E5%AD%97%E6%AE%B5%E6%98%AF%E5%8F%AF%E5%8F%98%E9%95%BF%E7%9A%84%E5%8F%AF%E9%80%89%E4%BF%A1%E6%81%AF%3C/span%3E" STYLE="fork"/>
            <node TEXT="这部分最多包含40字节，因为TCP头部最长是60字节" ID="6fIwumjNMk" _mubu_text="%3Cspan%3E%E8%BF%99%E9%83%A8%E5%88%86%E6%9C%80%E5%A4%9A%E5%8C%85%E5%90%AB40%E5%AD%97%E8%8A%82%EF%BC%8C%E5%9B%A0%E4%B8%BATCP%E5%A4%B4%E9%83%A8%E6%9C%80%E9%95%BF%E6%98%AF60%E5%AD%97%E8%8A%82%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="数据部分" ID="ywJrO6hcCa" _mubu_text="%3Cspan%3E%E6%95%B0%E6%8D%AE%E9%83%A8%E5%88%86%3C/span%3E" STYLE="fork">
            <node TEXT="TCP 报文段中的数据部分是可选的" ID="wyvz73zBu0" _mubu_text="%3Cspan%3ETCP%20%E6%8A%A5%E6%96%87%E6%AE%B5%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%A8%E5%88%86%E6%98%AF%E5%8F%AF%E9%80%89%E7%9A%84%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="控制位" ID="3LljeWCsEq" _mubu_text="%3Cspan%3E%E6%8E%A7%E5%88%B6%E4%BD%8D%3C/span%3E" STYLE="fork">
          <node TEXT="URG" ID="JAwJU8yz7C" _mubu_text="%3Cspan%3EURG%3C/span%3E" STYLE="fork">
            <node TEXT="紧急指针标志，为1时表示紧急指针有效，该报文应该优先传送，为0则忽略紧急指针" ID="ly0xUHuWwA" _mubu_text="%3Cspan%3E%E7%B4%A7%E6%80%A5%E6%8C%87%E9%92%88%E6%A0%87%E5%BF%97%EF%BC%8C%E4%B8%BA1%E6%97%B6%E8%A1%A8%E7%A4%BA%E7%B4%A7%E6%80%A5%E6%8C%87%E9%92%88%E6%9C%89%E6%95%88%EF%BC%8C%E8%AF%A5%E6%8A%A5%E6%96%87%E5%BA%94%E8%AF%A5%E4%BC%98%E5%85%88%E4%BC%A0%E9%80%81%EF%BC%8C%E4%B8%BA0%E5%88%99%E5%BF%BD%E7%95%A5%E7%B4%A7%E6%80%A5%E6%8C%87%E9%92%88%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="ACK" ID="QlYxwRZLNu" _mubu_text="%3Cspan%3EACK%3C/span%3E" STYLE="fork">
            <node TEXT="确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息" ID="nnFjmXT2PW" _mubu_text="%3Cspan%3E%E7%A1%AE%E8%AE%A4%E5%BA%8F%E5%8F%B7%E6%A0%87%E5%BF%97%EF%BC%8C%E4%B8%BA1%E6%97%B6%E8%A1%A8%E7%A4%BA%E7%A1%AE%E8%AE%A4%E5%8F%B7%E6%9C%89%E6%95%88%EF%BC%8C%E4%B8%BA0%E8%A1%A8%E7%A4%BA%E6%8A%A5%E6%96%87%E4%B8%AD%E4%B8%8D%E5%90%AB%E7%A1%AE%E8%AE%A4%E4%BF%A1%E6%81%AF%3C/span%3E" STYLE="fork"/>
            <node TEXT="携带ACK标识的TCP报文段被称为确认报文段" ID="6Kz6OO8RSu" _mubu_text="%3Cspan%3E%E6%90%BA%E5%B8%A6ACK%E6%A0%87%E8%AF%86%E7%9A%84TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E8%A2%AB%E7%A7%B0%E4%B8%BA%E7%A1%AE%E8%AE%A4%E6%8A%A5%E6%96%87%E6%AE%B5%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="RST" ID="361GgyatQK" _mubu_text="%3Cspan%3ERST%3C/span%3E" STYLE="fork">
            <node TEXT="重置连接标志" ID="TyMePPkqGV" _mubu_text="%3Cspan%3E%E9%87%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%A0%87%E5%BF%97%3C/span%3E" STYLE="fork"/>
            <node TEXT="用于重置由于主机崩溃或其他原因而出现错误的连接，或者用于拒绝非法的报文段和拒绝连接请求" ID="S0gVYgICbY" _mubu_text="%3Cspan%3E%E7%94%A8%E4%BA%8E%E9%87%8D%E7%BD%AE%E7%94%B1%E4%BA%8E%E4%B8%BB%E6%9C%BA%E5%B4%A9%E6%BA%83%E6%88%96%E5%85%B6%E4%BB%96%E5%8E%9F%E5%9B%A0%E8%80%8C%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%8C%E6%88%96%E8%80%85%E7%94%A8%E4%BA%8E%E6%8B%92%E7%BB%9D%E9%9D%9E%E6%B3%95%E7%9A%84%E6%8A%A5%E6%96%87%E6%AE%B5%E5%92%8C%E6%8B%92%E7%BB%9D%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82%3C/span%3E" STYLE="fork"/>
            <node TEXT="称携带RST标志的TCP报文段为复位报文段" ID="DywpEVFeWc" _mubu_text="%3Cspan%3E%E7%A7%B0%E6%90%BA%E5%B8%A6RST%E6%A0%87%E5%BF%97%E7%9A%84TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E4%B8%BA%E5%A4%8D%E4%BD%8D%E6%8A%A5%E6%96%87%E6%AE%B5%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="SYN" ID="VIekpJxHbB" _mubu_text="%3Cspan%3ESYN%3C/span%3E" STYLE="fork">
            <node TEXT="表示请求建立一个连接。称携带SYN标志的TCP报文段为同步报文段" ID="yiscPi1U9A" _mubu_text="%3Cspan%3E%E8%A1%A8%E7%A4%BA%E8%AF%B7%E6%B1%82%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%E3%80%82%E7%A7%B0%E6%90%BA%E5%B8%A6SYN%E6%A0%87%E5%BF%97%E7%9A%84TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E4%B8%BA%E5%90%8C%E6%AD%A5%E6%8A%A5%E6%96%87%E6%AE%B5%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="FIN" ID="NFQfpfb2Dl" _mubu_text="%3Cspan%3EFIN%3C/span%3E" STYLE="fork">
            <node TEXT="finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流" ID="wdg5GJY7DJ" _mubu_text="%3Cspan%3Efinish%E6%A0%87%E5%BF%97%EF%BC%8C%E7%94%A8%E4%BA%8E%E9%87%8A%E6%94%BE%E8%BF%9E%E6%8E%A5%EF%BC%8C%E4%B8%BA1%E6%97%B6%E8%A1%A8%E7%A4%BA%E5%8F%91%E9%80%81%E6%96%B9%E5%B7%B2%E7%BB%8F%E6%B2%A1%E6%9C%89%E6%95%B0%E6%8D%AE%E5%8F%91%E9%80%81%E4%BA%86%EF%BC%8C%E5%8D%B3%E5%85%B3%E9%97%AD%E6%9C%AC%E6%96%B9%E6%95%B0%E6%8D%AE%E6%B5%81%3C/span%3E" STYLE="fork"/>
            <node TEXT="称携带FIN标志的TCP报文段为结束报文段" ID="1foaOcI2Re" _mubu_text="%3Cspan%3E%E7%A7%B0%E6%90%BA%E5%B8%A6FIN%E6%A0%87%E5%BF%97%E7%9A%84TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E4%B8%BA%E7%BB%93%E6%9D%9F%E6%8A%A5%E6%96%87%E6%AE%B5%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="PSH" ID="YWN7iqcKnM" _mubu_text="%3Cspan%3EPSH%3C/span%3E" STYLE="fork">
            <node TEXT="push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应优先将这个报文段交给应用程序，而不是在缓冲区排队" ID="R1ZulydeuO" _mubu_text="%3Cspan%3Epush%E6%A0%87%E5%BF%97%EF%BC%8C%E4%B8%BA1%E8%A1%A8%E7%A4%BA%E6%98%AF%E5%B8%A6%E6%9C%89push%E6%A0%87%E5%BF%97%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%8C%87%E7%A4%BA%E6%8E%A5%E6%94%B6%E6%96%B9%E5%9C%A8%E6%8E%A5%E6%94%B6%E5%88%B0%E8%AF%A5%E6%8A%A5%E6%96%87%E6%AE%B5%E4%BB%A5%E5%90%8E%EF%BC%8C%E5%BA%94%E4%BC%98%E5%85%88%E5%B0%86%E8%BF%99%E4%B8%AA%E6%8A%A5%E6%96%87%E6%AE%B5%E4%BA%A4%E7%BB%99%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%9C%A8%E7%BC%93%E5%86%B2%E5%8C%BA%E6%8E%92%E9%98%9F%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="回答" ID="ZJqEJl30dl" _mubu_text="%3Cspan%3E%E5%9B%9E%E7%AD%94%3C/span%3E" STYLE="fork">
          <node TEXT="我印象中 TCP 头部字段主要有出序列号、确认号、源端口号、目的端口号" ID="jzm63XkqDl" _mubu_text="%3Cspan%3E%E6%88%91%E5%8D%B0%E8%B1%A1%E4%B8%AD%20TCP%20%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5%E4%B8%BB%E8%A6%81%E6%9C%89%E5%87%BA%E5%BA%8F%E5%88%97%E5%8F%B7%E3%80%81%E7%A1%AE%E8%AE%A4%E5%8F%B7%E3%80%81%E6%BA%90%E7%AB%AF%E5%8F%A3%E5%8F%B7%E3%80%81%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%3C/span%3E" STYLE="fork"/>
          <node TEXT="标记位：SYN、ACK、FIN、RST、头部长度、窗口大小，可扩展的选项这些" ID="jSpNFWyPXh" _mubu_text="%3Cspan%3E%E6%A0%87%E8%AE%B0%E4%BD%8D%EF%BC%9ASYN%E3%80%81ACK%E3%80%81FIN%E3%80%81RST%E3%80%81%E5%A4%B4%E9%83%A8%E9%95%BF%E5%BA%A6%E3%80%81%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F%EF%BC%8C%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E9%80%89%E9%A1%B9%E8%BF%99%E4%BA%9B%3C/span%3E" STYLE="fork"/>
          <node TEXT="其中，序列号和确认号都是 32 位大小，序列号可以保证数据的有序性，接收方会按照发送方顺序发送的数据来组装有序的数据，确认号可以保证数据的可靠性，当发送方已发送的数据，超过一段时间没收到确认报文，就会重传报文" ID="rWVpDX486D" _mubu_text="%3Cspan%3E%E5%85%B6%E4%B8%AD%EF%BC%8C%E5%BA%8F%E5%88%97%E5%8F%B7%E5%92%8C%E7%A1%AE%E8%AE%A4%E5%8F%B7%E9%83%BD%E6%98%AF%2032%20%E4%BD%8D%E5%A4%A7%E5%B0%8F%EF%BC%8C%E5%BA%8F%E5%88%97%E5%8F%B7%E5%8F%AF%E4%BB%A5%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%8C%E6%8E%A5%E6%94%B6%E6%96%B9%E4%BC%9A%E6%8C%89%E7%85%A7%E5%8F%91%E9%80%81%E6%96%B9%E9%A1%BA%E5%BA%8F%E5%8F%91%E9%80%81%E7%9A%84%E6%95%B0%E6%8D%AE%E6%9D%A5%E7%BB%84%E8%A3%85%E6%9C%89%E5%BA%8F%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%A1%AE%E8%AE%A4%E5%8F%B7%E5%8F%AF%E4%BB%A5%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%EF%BC%8C%E5%BD%93%E5%8F%91%E9%80%81%E6%96%B9%E5%B7%B2%E5%8F%91%E9%80%81%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%B6%85%E8%BF%87%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E6%B2%A1%E6%94%B6%E5%88%B0%E7%A1%AE%E8%AE%A4%E6%8A%A5%E6%96%87%EF%BC%8C%E5%B0%B1%E4%BC%9A%E9%87%8D%E4%BC%A0%E6%8A%A5%E6%96%87%3C/span%3E" STYLE="fork"/>
          <node TEXT="然后，源端口号和目的端口号是 16 位大小，源端口是发送方使用的端口号，目的端口是接收方使用的端口号，端口的作用是标识TCP连接是哪个进程的" ID="aqhehIMpxB" _mubu_text="%3Cspan%3E%E7%84%B6%E5%90%8E%EF%BC%8C%E6%BA%90%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%92%8C%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%98%AF%2016%20%E4%BD%8D%E5%A4%A7%E5%B0%8F%EF%BC%8C%E6%BA%90%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%8F%91%E9%80%81%E6%96%B9%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%EF%BC%8C%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%98%AF%E6%8E%A5%E6%94%B6%E6%96%B9%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%EF%BC%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E6%A0%87%E8%AF%86TCP%E8%BF%9E%E6%8E%A5%E6%98%AF%E5%93%AA%E4%B8%AA%E8%BF%9B%E7%A8%8B%E7%9A%84%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="说一下 TCP 三次握手的过程" ID="70mNlK2Q9l" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E8%AF%B4%E4%B8%80%E4%B8%8B%20TCP%20%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E8%BF%87%E7%A8%8B%3C/span%3E" STYLE="fork">
          <node TEXT="最开始双方的TCP连接都处于close状态，服务端首先会监听一个端口，处于Listen状态" ID="T2WmjnWBAL" _mubu_text="%3Cspan%3E%E6%9C%80%E5%BC%80%E5%A7%8B%E5%8F%8C%E6%96%B9%E7%9A%84TCP%E8%BF%9E%E6%8E%A5%E9%83%BD%E5%A4%84%E4%BA%8Eclose%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%A6%96%E5%85%88%E4%BC%9A%E7%9B%91%E5%90%AC%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%EF%BC%8C%E5%A4%84%E4%BA%8EListen%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="在第一次握手的时候，客户端会随机生成初始化序列号，放到TCP报文头部的序号字段中，同时把SYN标志设置为1，这样就表示SYN报文。接着把这个SYN报文发送给服务端，之后客户端处在SYN_SENT状态" ID="3Jm9uT2S4s" _mubu_text="%3Cspan%3E%E5%9C%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BC%9A%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BA%8F%E5%88%97%E5%8F%B7%EF%BC%8C%E6%94%BE%E5%88%B0TCP%E6%8A%A5%E6%96%87%E5%A4%B4%E9%83%A8%E7%9A%84%E5%BA%8F%E5%8F%B7%E5%AD%97%E6%AE%B5%E4%B8%AD%EF%BC%8C%E5%90%8C%E6%97%B6%E6%8A%8ASYN%E6%A0%87%E5%BF%97%E8%AE%BE%E7%BD%AE%E4%B8%BA1%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E8%A1%A8%E7%A4%BASYN%E6%8A%A5%E6%96%87%E3%80%82%E6%8E%A5%E7%9D%80%E6%8A%8A%E8%BF%99%E4%B8%AASYN%E6%8A%A5%E6%96%87%E5%8F%91%E9%80%81%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E4%B9%8B%E5%90%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%A4%84%E5%9C%A8SYN_SENT%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="服务端收到SYN报文后，首先服务端也会随机生成初始化序号，放到TCP报文头部的序号字段，然后对客户端的初始化序号+1作为确认号，放到 TCP 报文头部的确认应答字段中，并将 SYN 和 ACK 标志设置为 1，这样就表示 SYN-ACK报文，后把该报文发给客户端，之后服务端处于 SYN_RCVD 状态" ID="D5h6P0Elih" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%94%B6%E5%88%B0SYN%E6%8A%A5%E6%96%87%E5%90%8E%EF%BC%8C%E9%A6%96%E5%85%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B9%9F%E4%BC%9A%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BA%8F%E5%8F%B7%EF%BC%8C%E6%94%BE%E5%88%B0TCP%E6%8A%A5%E6%96%87%E5%A4%B4%E9%83%A8%E7%9A%84%E5%BA%8F%E5%8F%B7%E5%AD%97%E6%AE%B5%EF%BC%8C%E7%84%B6%E5%90%8E%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BA%8F%E5%8F%B7+1%E4%BD%9C%E4%B8%BA%E7%A1%AE%E8%AE%A4%E5%8F%B7%EF%BC%8C%E6%94%BE%E5%88%B0%20TCP%20%E6%8A%A5%E6%96%87%E5%A4%B4%E9%83%A8%E7%9A%84%E7%A1%AE%E8%AE%A4%E5%BA%94%E7%AD%94%E5%AD%97%E6%AE%B5%E4%B8%AD%EF%BC%8C%E5%B9%B6%E5%B0%86%20SYN%20%E5%92%8C%20ACK%20%E6%A0%87%E5%BF%97%E8%AE%BE%E7%BD%AE%E4%B8%BA%201%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E8%A1%A8%E7%A4%BA%20SYN-ACK%E6%8A%A5%E6%96%87%EF%BC%8C%E5%90%8E%E6%8A%8A%E8%AF%A5%E6%8A%A5%E6%96%87%E5%8F%91%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E4%B9%8B%E5%90%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A4%84%E4%BA%8E%20SYN_RCVD%20%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="客户端收到服务端SYN-ACK报文后，客户端会回一个 ACK 确认报文，该报文的确认号是服务端的初始化序号+1，并且 ACK 标志会设置为 1。之后客户端处于 ESTABLISHED 状态" ID="yd7ZDQCMCh" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AFSYN-ACK%E6%8A%A5%E6%96%87%E5%90%8E%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BC%9A%E5%9B%9E%E4%B8%80%E4%B8%AA%20ACK%20%E7%A1%AE%E8%AE%A4%E6%8A%A5%E6%96%87%EF%BC%8C%E8%AF%A5%E6%8A%A5%E6%96%87%E7%9A%84%E7%A1%AE%E8%AE%A4%E5%8F%B7%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BA%8F%E5%8F%B7+1%EF%BC%8C%E5%B9%B6%E4%B8%94%20ACK%20%E6%A0%87%E5%BF%97%E4%BC%9A%E8%AE%BE%E7%BD%AE%E4%B8%BA%201%E3%80%82%E4%B9%8B%E5%90%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%A4%84%E4%BA%8E%20ESTABLISHED%20%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="服务端收到 ACK 确认报文后，服务端也进入处于 ESTABLISHED 状态" ID="qhpOWC41Wv" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%94%B6%E5%88%B0%20ACK%20%E7%A1%AE%E8%AE%A4%E6%8A%A5%E6%96%87%E5%90%8E%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B9%9F%E8%BF%9B%E5%85%A5%E5%A4%84%E4%BA%8E%20ESTABLISHED%20%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="为什么需要三次握手？两次不行吗" ID="NaQCJuZEqw" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%9F%E4%B8%A4%E6%AC%A1%E4%B8%8D%E8%A1%8C%E5%90%97%3C/span%3E" STYLE="fork">
          <node TEXT="第一个原因是，三次握手可以有效防止历史连接的建立，避免资源浪费" ID="KORpD1sXy6" _mubu_text="%3Cspan%3E%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8E%9F%E5%9B%A0%E6%98%AF%EF%BC%8C%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%8F%AF%E4%BB%A5%E6%9C%89%E6%95%88%E9%98%B2%E6%AD%A2%E5%8E%86%E5%8F%B2%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%EF%BC%8C%E9%81%BF%E5%85%8D%E8%B5%84%E6%BA%90%E6%B5%AA%E8%B4%B9%3C/span%3E" STYLE="fork">
            <node TEXT="服务端需要一个SYN_RCID的中间状态，来防止历史连接的建立，从而避免资源浪费" ID="PvgvWHb0un" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AASYN_RCID%E7%9A%84%E4%B8%AD%E9%97%B4%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9D%A5%E9%98%B2%E6%AD%A2%E5%8E%86%E5%8F%B2%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%EF%BC%8C%E4%BB%8E%E8%80%8C%E9%81%BF%E5%85%8D%E8%B5%84%E6%BA%90%E6%B5%AA%E8%B4%B9%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="第二个原因是，三次握手可以确认客户端和服务端是否同时具备发送和接收的能力" ID="5Jzf2ww07j" _mubu_text="%3Cspan%3E%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8E%9F%E5%9B%A0%E6%98%AF%EF%BC%8C%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%8F%AF%E4%BB%A5%E7%A1%AE%E8%AE%A4%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%98%AF%E5%90%A6%E5%90%8C%E6%97%B6%E5%85%B7%E5%A4%87%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E7%9A%84%E8%83%BD%E5%8A%9B%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="如果第一次握手丢包，会发生什么" ID="pfEeewjUfF" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%A6%82%E6%9E%9C%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%A2%E5%8C%85%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="如果第一次握手丢包了，达到超时重传的时机的话，会进行重传SYN报文" ID="pVyovJvs1H" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%A2%E5%8C%85%E4%BA%86%EF%BC%8C%E8%BE%BE%E5%88%B0%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E7%9A%84%E6%97%B6%E6%9C%BA%E7%9A%84%E8%AF%9D%EF%BC%8C%E4%BC%9A%E8%BF%9B%E8%A1%8C%E9%87%8D%E4%BC%A0SYN%E6%8A%A5%E6%96%87%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果重传次数达到最大次数，还是没有收到第二次握手的话，客户端就会断开链接了" ID="54b5cFGiWb" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E9%87%8D%E4%BC%A0%E6%AC%A1%E6%95%B0%E8%BE%BE%E5%88%B0%E6%9C%80%E5%A4%A7%E6%AC%A1%E6%95%B0%EF%BC%8C%E8%BF%98%E6%98%AF%E6%B2%A1%E6%9C%89%E6%94%B6%E5%88%B0%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B0%B1%E4%BC%9A%E6%96%AD%E5%BC%80%E9%93%BE%E6%8E%A5%E4%BA%86%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="如果第二次握手丢包，会发生什么" ID="NsOGiI1PVZ" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%A6%82%E6%9E%9C%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%A2%E5%8C%85%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="我的理解第二次握手 SYN-ACK 报文其实有两个目的" ID="aUiyul3Zjf" _mubu_text="%3Cspan%3E%E6%88%91%E7%9A%84%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B%20SYN-ACK%20%E6%8A%A5%E6%96%87%E5%85%B6%E5%AE%9E%E6%9C%89%E4%B8%A4%E4%B8%AA%E7%9B%AE%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="第一个是报文中的 ACK， 是对第一次握手的确认报文，那么当第二次握手的丢失的时候，就会导致客户端长时间没有收到 ACK 而触发超时重传 SYN 报文（第一次握手）" ID="t1hlWBcCDm" _mubu_text="%3Cspan%3E%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%98%AF%E6%8A%A5%E6%96%87%E4%B8%AD%E7%9A%84%20ACK%EF%BC%8C%20%E6%98%AF%E5%AF%B9%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E7%A1%AE%E8%AE%A4%E6%8A%A5%E6%96%87%EF%BC%8C%E9%82%A3%E4%B9%88%E5%BD%93%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%AF%BC%E8%87%B4%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%95%BF%E6%97%B6%E9%97%B4%E6%B2%A1%E6%9C%89%E6%94%B6%E5%88%B0%20ACK%20%E8%80%8C%E8%A7%A6%E5%8F%91%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%20SYN%20%E6%8A%A5%E6%96%87%EF%BC%88%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%89%3C/span%3E" STYLE="fork"/>
          <node TEXT="第二个是报文中的 SYN，是服务端发起建立 TCP 连接的报文，那么当第二次握手的丢失的时候，服务端就收不到第三次握手，于是服务端这边会触发超时重传机制，重传 SYN-ACK 报文" ID="hpsE646a2W" _mubu_text="%3Cspan%3E%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%98%AF%E6%8A%A5%E6%96%87%E4%B8%AD%E7%9A%84%20SYN%EF%BC%8C%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E8%B5%B7%E5%BB%BA%E7%AB%8B%20TCP%20%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%8A%A5%E6%96%87%EF%BC%8C%E9%82%A3%E4%B9%88%E5%BD%93%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%B1%E6%94%B6%E4%B8%8D%E5%88%B0%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E4%BA%8E%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%99%E8%BE%B9%E4%BC%9A%E8%A7%A6%E5%8F%91%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6%EF%BC%8C%E9%87%8D%E4%BC%A0%20SYN-ACK%20%E6%8A%A5%E6%96%87%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="如果第三次握手丢包，会发生什么" ID="CrDM910sJV" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%A6%82%E6%9E%9C%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%A2%E5%8C%85%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="我的理解是第三次握手的 ACK 是对第二次握手的 SYN 报文的确认，所以当第三次握手丢失了" ID="1MMbGsBGA9" _mubu_text="%3Cspan%3E%E6%88%91%E7%9A%84%E7%90%86%E8%A7%A3%E6%98%AF%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%20ACK%20%E6%98%AF%E5%AF%B9%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%20SYN%20%E6%8A%A5%E6%96%87%E7%9A%84%E7%A1%AE%E8%AE%A4%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BD%93%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%A2%E5%A4%B1%E4%BA%86%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果服务端那一方迟迟收不到这个确认报文，就会触发超时重传机制，重传 SYN-ACK 报文，直到收到第三次握手，或者达到最大重传次数" ID="vYkdOaJaYN" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%82%A3%E4%B8%80%E6%96%B9%E8%BF%9F%E8%BF%9F%E6%94%B6%E4%B8%8D%E5%88%B0%E8%BF%99%E4%B8%AA%E7%A1%AE%E8%AE%A4%E6%8A%A5%E6%96%87%EF%BC%8C%E5%B0%B1%E4%BC%9A%E8%A7%A6%E5%8F%91%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6%EF%BC%8C%E9%87%8D%E4%BC%A0%20SYN-ACK%20%E6%8A%A5%E6%96%87%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%94%B6%E5%88%B0%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E6%88%96%E8%80%85%E8%BE%BE%E5%88%B0%E6%9C%80%E5%A4%A7%E9%87%8D%E4%BC%A0%E6%AC%A1%E6%95%B0%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="TCP的半连接队列和全连接队列了解过吗" ID="0V2HCeAI9K" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP%E7%9A%84%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E4%BA%86%E8%A7%A3%E8%BF%87%E5%90%97%3C/span%3E" STYLE="fork">
          <node TEXT="半连接队列" ID="whGgoEXnlm" _mubu_text="%3Cspan%3E%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%3C/span%3E" STYLE="fork">
            <node TEXT="服务端收到客户端发起的 SYN 请求后，内核会把未完成握手的连接存储到半连接队列，等待完成三次握手后转移到全连接队列" ID="CQqLRtWGGJ" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%94%B6%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E8%B5%B7%E7%9A%84%20SYN%20%E8%AF%B7%E6%B1%82%E5%90%8E%EF%BC%8C%E5%86%85%E6%A0%B8%E4%BC%9A%E6%8A%8A%E6%9C%AA%E5%AE%8C%E6%88%90%E6%8F%A1%E6%89%8B%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8%E5%88%B0%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%EF%BC%8C%E7%AD%89%E5%BE%85%E5%AE%8C%E6%88%90%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%90%8E%E8%BD%AC%E7%A7%BB%E5%88%B0%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="全连接队列" ID="xcSI4r6yAu" _mubu_text="%3Cspan%3E%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%3C/span%3E" STYLE="fork">
            <node TEXT="服务端收到第三次握手的 ACK 后，内核会把连接从半连接队列移除，然后创建新的完全的连接，并将其添加到全连接队列，等待进程调用 accept 函数时把连接取出来" ID="pSf5NpMrg3" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%94%B6%E5%88%B0%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%20ACK%20%E5%90%8E%EF%BC%8C%E5%86%85%E6%A0%B8%E4%BC%9A%E6%8A%8A%E8%BF%9E%E6%8E%A5%E4%BB%8E%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E7%A7%BB%E9%99%A4%EF%BC%8C%E7%84%B6%E5%90%8E%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E5%AE%8C%E5%85%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%EF%BC%8C%E7%AD%89%E5%BE%85%E8%BF%9B%E7%A8%8B%E8%B0%83%E7%94%A8%20accept%20%E5%87%BD%E6%95%B0%E6%97%B6%E6%8A%8A%E8%BF%9E%E6%8E%A5%E5%8F%96%E5%87%BA%E6%9D%A5%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
      </node>
      <node TEXT="TCP 四次挥手（重要）" ID="aVzW2tpCLM" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3ETCP%20%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89%3C/span%3E" STYLE="fork">
        <node TEXT="TCP 四次挥手的过程" ID="MfDGLVDLRf" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP%20%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%9A%84%E8%BF%87%E7%A8%8B%3C/span%3E" STYLE="fork">
          <node TEXT="客户端打算关闭连接，此时会发送一个 FIN 报文，之后客户端进入 FIN_WAIT_1 状态" ID="rL3OvCUfrP" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%89%93%E7%AE%97%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%EF%BC%8C%E6%AD%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%20FIN%20%E6%8A%A5%E6%96%87%EF%BC%8C%E4%B9%8B%E5%90%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9B%E5%85%A5%20FIN_WAIT_1%20%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="服务端收到 FIN 报文后，就向客户端发送 ACK 应答报文，接着服务端进入 CLOSE_WAIT 状态" ID="ogEiD2SUaT" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%94%B6%E5%88%B0%20FIN%20%E6%8A%A5%E6%96%87%E5%90%8E%EF%BC%8C%E5%B0%B1%E5%90%91%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%20ACK%20%E5%BA%94%E7%AD%94%E6%8A%A5%E6%96%87%EF%BC%8C%E6%8E%A5%E7%9D%80%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9B%E5%85%A5%20CLOSE_WAIT%20%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="客户端收到服务端的 ACK 应答报文后，之后进入 FIN_WAIT_2 状态" ID="3OWgJk2lyM" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%20ACK%20%E5%BA%94%E7%AD%94%E6%8A%A5%E6%96%87%E5%90%8E%EF%BC%8C%E4%B9%8B%E5%90%8E%E8%BF%9B%E5%85%A5%20FIN_WAIT_2%20%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="等待服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入 LAST_ACK 状态" ID="SjHK08ggKs" _mubu_text="%3Cspan%3E%E7%AD%89%E5%BE%85%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A4%84%E7%90%86%E5%AE%8C%E6%95%B0%E6%8D%AE%E5%90%8E%EF%BC%8C%E4%B9%9F%E5%90%91%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%20FIN%20%E6%8A%A5%E6%96%87%EF%BC%8C%E4%B9%8B%E5%90%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9B%E5%85%A5%20LAST_ACK%20%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="客户端收到服务端的 FIN 报文后，回一个 ACK 应答报文，之后进入 TIME_WAIT 状态" ID="3cB52wGGK7" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%20FIN%20%E6%8A%A5%E6%96%87%E5%90%8E%EF%BC%8C%E5%9B%9E%E4%B8%80%E4%B8%AA%20ACK%20%E5%BA%94%E7%AD%94%E6%8A%A5%E6%96%87%EF%BC%8C%E4%B9%8B%E5%90%8E%E8%BF%9B%E5%85%A5%20TIME_WAIT%20%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="服务端收到了 ACK 应答报文后，就进入了 CLOSE 状态，至此服务端已经完成连接的关闭" ID="OBDoduD5jE" _mubu_text="%3Cspan%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%94%B6%E5%88%B0%E4%BA%86%20ACK%20%E5%BA%94%E7%AD%94%E6%8A%A5%E6%96%87%E5%90%8E%EF%BC%8C%E5%B0%B1%E8%BF%9B%E5%85%A5%E4%BA%86%20CLOSE%20%E7%8A%B6%E6%80%81%EF%BC%8C%E8%87%B3%E6%AD%A4%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B7%B2%E7%BB%8F%E5%AE%8C%E6%88%90%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%85%B3%E9%97%AD%3C/span%3E" STYLE="fork"/>
          <node TEXT="客户端在 TIME_WAIT 状态经过 2MSL 一段时间后，自动进入 CLOSE 状态，至此客户端也完成连接的关闭" ID="1AWS0hJHOE" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%9C%A8%20TIME_WAIT%20%E7%8A%B6%E6%80%81%E7%BB%8F%E8%BF%87%202MSL%20%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%BF%9B%E5%85%A5%20CLOSE%20%E7%8A%B6%E6%80%81%EF%BC%8C%E8%87%B3%E6%AD%A4%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B9%9F%E5%AE%8C%E6%88%90%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%85%B3%E9%97%AD%3C/span%3E" STYLE="fork"/>
          <node TEXT="以上就是四次挥手的过程，每个方向都需要一个 FIN 和一个 ACK，因此通常被称为四次挥手" ID="3FXn9Rf1kJ" _mubu_text="%3Cspan%3E%E4%BB%A5%E4%B8%8A%E5%B0%B1%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%9A%84%E8%BF%87%E7%A8%8B%EF%BC%8C%E6%AF%8F%E4%B8%AA%E6%96%B9%E5%90%91%E9%83%BD%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%20FIN%20%E5%92%8C%E4%B8%80%E4%B8%AA%20ACK%EF%BC%8C%E5%9B%A0%E6%AD%A4%E9%80%9A%E5%B8%B8%E8%A2%AB%E7%A7%B0%E4%B8%BA%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="为什么 TCP 需要四次挥手？三次挥手不行吗" ID="Ei01JKs6r2" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%B8%BA%E4%BB%80%E4%B9%88%20TCP%20%E9%9C%80%E8%A6%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%EF%BC%9F%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B%E4%B8%8D%E8%A1%8C%E5%90%97%3C/span%3E" STYLE="fork">
          <node TEXT="我的理解是 TCP 是全双工协议，双方都具备发送和接收的能力，那么在断开连接的期间，要确保双方能发送完自己的数据" ID="y66UOjJulB" _mubu_text="%3Cspan%3E%E6%88%91%E7%9A%84%E7%90%86%E8%A7%A3%E6%98%AF%20TCP%20%E6%98%AF%E5%85%A8%E5%8F%8C%E5%B7%A5%E5%8D%8F%E8%AE%AE%EF%BC%8C%E5%8F%8C%E6%96%B9%E9%83%BD%E5%85%B7%E5%A4%87%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E7%9A%84%E8%83%BD%E5%8A%9B%EF%BC%8C%E9%82%A3%E4%B9%88%E5%9C%A8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%9F%E9%97%B4%EF%BC%8C%E8%A6%81%E7%A1%AE%E4%BF%9D%E5%8F%8C%E6%96%B9%E8%83%BD%E5%8F%91%E9%80%81%E5%AE%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
          <node TEXT="当客户端发送第一次挥手后，也就是 FIN 报文的时候，其实就代表客户端告诉服务端“我不会再发送数据了”，服务端收到后，服务器收到客户端的 FIN 报文时，内核会马上回一个 ACK 应答报文，但是服务端应用程序可能还有数据要发送，所以并不能马上发送 FIN 报文，而是将发送 FIN 报文的控制权交给服务端应用程序，如果服务端应用程序有数据要发送的话，就发完数据后，才调用关闭连接的函数。所以第二次挥手和第三次挥手通常不会合并一起发送，而是分开发送，所以就需要四次挥手" ID="eoNCRvHCIu" _mubu_text="%3Cspan%3E%E5%BD%93%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%90%8E%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%20FIN%20%E6%8A%A5%E6%96%87%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%85%B6%E5%AE%9E%E5%B0%B1%E4%BB%A3%E8%A1%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%8A%E8%AF%89%E6%9C%8D%E5%8A%A1%E7%AB%AF%E2%80%9C%E6%88%91%E4%B8%8D%E4%BC%9A%E5%86%8D%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E4%BA%86%E2%80%9D%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%94%B6%E5%88%B0%E5%90%8E%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%B6%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%20FIN%20%E6%8A%A5%E6%96%87%E6%97%B6%EF%BC%8C%E5%86%85%E6%A0%B8%E4%BC%9A%E9%A9%AC%E4%B8%8A%E5%9B%9E%E4%B8%80%E4%B8%AA%20ACK%20%E5%BA%94%E7%AD%94%E6%8A%A5%E6%96%87%EF%BC%8C%E4%BD%86%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%8F%AF%E8%83%BD%E8%BF%98%E6%9C%89%E6%95%B0%E6%8D%AE%E8%A6%81%E5%8F%91%E9%80%81%EF%BC%8C%E6%89%80%E4%BB%A5%E5%B9%B6%E4%B8%8D%E8%83%BD%E9%A9%AC%E4%B8%8A%E5%8F%91%E9%80%81%20FIN%20%E6%8A%A5%E6%96%87%EF%BC%8C%E8%80%8C%E6%98%AF%E5%B0%86%E5%8F%91%E9%80%81%20FIN%20%E6%8A%A5%E6%96%87%E7%9A%84%E6%8E%A7%E5%88%B6%E6%9D%83%E4%BA%A4%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9C%89%E6%95%B0%E6%8D%AE%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%B0%B1%E5%8F%91%E5%AE%8C%E6%95%B0%E6%8D%AE%E5%90%8E%EF%BC%8C%E6%89%8D%E8%B0%83%E7%94%A8%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%87%BD%E6%95%B0%E3%80%82%E6%89%80%E4%BB%A5%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%92%8C%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B%E9%80%9A%E5%B8%B8%E4%B8%8D%E4%BC%9A%E5%90%88%E5%B9%B6%E4%B8%80%E8%B5%B7%E5%8F%91%E9%80%81%EF%BC%8C%E8%80%8C%E6%98%AF%E5%88%86%E5%BC%80%E5%8F%91%E9%80%81%EF%BC%8C%E6%89%80%E4%BB%A5%E5%B0%B1%E9%9C%80%E8%A6%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果只有三次挥手，那么就可能出现一方还有数据没有发送完就被迫关闭连接的情况，这会导致数据的丢失" ID="VZAz8dK7xB" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E5%8F%AA%E6%9C%89%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E4%B8%80%E6%96%B9%E8%BF%98%E6%9C%89%E6%95%B0%E6%8D%AE%E6%B2%A1%E6%9C%89%E5%8F%91%E9%80%81%E5%AE%8C%E5%B0%B1%E8%A2%AB%E8%BF%AB%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E8%BF%99%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%A2%E5%A4%B1%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="TIME_WAIT 是如何产生的" ID="RxLCTPPf7s" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETIME_WAIT%20%E6%98%AF%E5%A6%82%E4%BD%95%E4%BA%A7%E7%94%9F%E7%9A%84%3C/span%3E" STYLE="fork">
          <node TEXT="当 TCP 连接的主动关闭方关闭连接，与被动关闭方进行了四次挥手的时候，在主动关闭方发送完第四次挥手后，也就是最后一个 ACK 报文后，主动关闭方的 TCP 连接就会进入到 TIME_WAIT 状态，这个状态会持续 2MSL的时长，以确保对方已经收到了最后一个ACK报文" ID="aePzoeDSaP" _mubu_text="%3Cspan%3E%E5%BD%93%20TCP%20%E8%BF%9E%E6%8E%A5%E7%9A%84%E4%B8%BB%E5%8A%A8%E5%85%B3%E9%97%AD%E6%96%B9%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%EF%BC%8C%E4%B8%8E%E8%A2%AB%E5%8A%A8%E5%85%B3%E9%97%AD%E6%96%B9%E8%BF%9B%E8%A1%8C%E4%BA%86%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%9C%A8%E4%B8%BB%E5%8A%A8%E5%85%B3%E9%97%AD%E6%96%B9%E5%8F%91%E9%80%81%E5%AE%8C%E7%AC%AC%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%90%8E%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%20ACK%20%E6%8A%A5%E6%96%87%E5%90%8E%EF%BC%8C%E4%B8%BB%E5%8A%A8%E5%85%B3%E9%97%AD%E6%96%B9%E7%9A%84%20TCP%20%E8%BF%9E%E6%8E%A5%E5%B0%B1%E4%BC%9A%E8%BF%9B%E5%85%A5%E5%88%B0%20TIME_WAIT%20%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%8A%B6%E6%80%81%E4%BC%9A%E6%8C%81%E7%BB%AD%202MSL%E7%9A%84%E6%97%B6%E9%95%BF%EF%BC%8C%E4%BB%A5%E7%A1%AE%E4%BF%9D%E5%AF%B9%E6%96%B9%E5%B7%B2%E7%BB%8F%E6%94%B6%E5%88%B0%E4%BA%86%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AAACK%E6%8A%A5%E6%96%87%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="为什么 TIME_WAIT 状态要等待 2MSL" ID="xcSJdZ1rRJ" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%B8%BA%E4%BB%80%E4%B9%88%20TIME_WAIT%20%E7%8A%B6%E6%80%81%E8%A6%81%E7%AD%89%E5%BE%85%202MSL%3C/span%3E" STYLE="fork">
          <node TEXT="第一个原因，主要是为了避免本次连接的历史报文，被新的连接接收到这些历史报文，从而导致出错。MSL 表示TCP报文在网络中最大的存活时长，等待2MSL就可以让两个方向的报文可以在网络中自然消失，这样新的连接就不会接收到历史报文了" ID="pE1IwrUcRU" _mubu_text="%3Cspan%3E%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8E%9F%E5%9B%A0%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%98%AF%E4%B8%BA%E4%BA%86%E9%81%BF%E5%85%8D%E6%9C%AC%E6%AC%A1%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8E%86%E5%8F%B2%E6%8A%A5%E6%96%87%EF%BC%8C%E8%A2%AB%E6%96%B0%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%8E%A5%E6%94%B6%E5%88%B0%E8%BF%99%E4%BA%9B%E5%8E%86%E5%8F%B2%E6%8A%A5%E6%96%87%EF%BC%8C%E4%BB%8E%E8%80%8C%E5%AF%BC%E8%87%B4%E5%87%BA%E9%94%99%E3%80%82MSL%20%E8%A1%A8%E7%A4%BATCP%E6%8A%A5%E6%96%87%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E5%AD%98%E6%B4%BB%E6%97%B6%E9%95%BF%EF%BC%8C%E7%AD%89%E5%BE%852MSL%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%B8%A4%E4%B8%AA%E6%96%B9%E5%90%91%E7%9A%84%E6%8A%A5%E6%96%87%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E8%87%AA%E7%84%B6%E6%B6%88%E5%A4%B1%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%96%B0%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%B0%B1%E4%B8%8D%E4%BC%9A%E6%8E%A5%E6%94%B6%E5%88%B0%E5%8E%86%E5%8F%B2%E6%8A%A5%E6%96%87%E4%BA%86%3C/span%3E" STYLE="fork"/>
          <node TEXT="第二个原因，是为了确保第四次挥手 ACK 报文能被接收，从而帮助被动关闭方正常关闭连接。如果主动关闭方的第四次挥手的 ACK 报文丢失了，由于被动关闭方没有收到这个ACK报文，它会超时重传FIN包，主动关闭方TIME_WAIT状态等待期间会重新发送ACK报文，如果没有TIME_WAIT状态，那么就没办法重新发送 ACK 报文，也就没办法帮助被动关闭方正常关闭连接了" ID="V9RUviHwkz" _mubu_text="%3Cspan%3E%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8E%9F%E5%9B%A0%EF%BC%8C%E6%98%AF%E4%B8%BA%E4%BA%86%E7%A1%AE%E4%BF%9D%E7%AC%AC%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%20ACK%20%E6%8A%A5%E6%96%87%E8%83%BD%E8%A2%AB%E6%8E%A5%E6%94%B6%EF%BC%8C%E4%BB%8E%E8%80%8C%E5%B8%AE%E5%8A%A9%E8%A2%AB%E5%8A%A8%E5%85%B3%E9%97%AD%E6%96%B9%E6%AD%A3%E5%B8%B8%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%BB%E5%8A%A8%E5%85%B3%E9%97%AD%E6%96%B9%E7%9A%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%9A%84%20ACK%20%E6%8A%A5%E6%96%87%E4%B8%A2%E5%A4%B1%E4%BA%86%EF%BC%8C%E7%94%B1%E4%BA%8E%E8%A2%AB%E5%8A%A8%E5%85%B3%E9%97%AD%E6%96%B9%E6%B2%A1%E6%9C%89%E6%94%B6%E5%88%B0%E8%BF%99%E4%B8%AAACK%E6%8A%A5%E6%96%87%EF%BC%8C%E5%AE%83%E4%BC%9A%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0FIN%E5%8C%85%EF%BC%8C%E4%B8%BB%E5%8A%A8%E5%85%B3%E9%97%AD%E6%96%B9TIME_WAIT%E7%8A%B6%E6%80%81%E7%AD%89%E5%BE%85%E6%9C%9F%E9%97%B4%E4%BC%9A%E9%87%8D%E6%96%B0%E5%8F%91%E9%80%81ACK%E6%8A%A5%E6%96%87%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89TIME_WAIT%E7%8A%B6%E6%80%81%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E6%B2%A1%E5%8A%9E%E6%B3%95%E9%87%8D%E6%96%B0%E5%8F%91%E9%80%81%20ACK%20%E6%8A%A5%E6%96%87%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%B2%A1%E5%8A%9E%E6%B3%95%E5%B8%AE%E5%8A%A9%E8%A2%AB%E5%8A%A8%E5%85%B3%E9%97%AD%E6%96%B9%E6%AD%A3%E5%B8%B8%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E4%BA%86%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="TIME_WAIT 过多有什么危害" ID="haF0UBh8Cp" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETIME_WAIT%20%E8%BF%87%E5%A4%9A%E6%9C%89%E4%BB%80%E4%B9%88%E5%8D%B1%E5%AE%B3%3C/span%3E" STYLE="fork">
          <node TEXT="如果客户端（主动发起关闭连接方）的 TIME_WAIT 状态过多，占满了所有端口资源，那么就无法对「目的 IP+ 目的 PORT」都一样的服务端发起连接了，但是被使用的端口，还是可以继续对另外一个服务端发起连接的" ID="VenKjWnbbR" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%88%E4%B8%BB%E5%8A%A8%E5%8F%91%E8%B5%B7%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E6%96%B9%EF%BC%89%E7%9A%84%20TIME_WAIT%20%E7%8A%B6%E6%80%81%E8%BF%87%E5%A4%9A%EF%BC%8C%E5%8D%A0%E6%BB%A1%E4%BA%86%E6%89%80%E6%9C%89%E7%AB%AF%E5%8F%A3%E8%B5%84%E6%BA%90%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E6%97%A0%E6%B3%95%E5%AF%B9%E3%80%8C%E7%9B%AE%E7%9A%84%20IP+%20%E7%9B%AE%E7%9A%84%20PORT%E3%80%8D%E9%83%BD%E4%B8%80%E6%A0%B7%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E8%B5%B7%E8%BF%9E%E6%8E%A5%E4%BA%86%EF%BC%8C%E4%BD%86%E6%98%AF%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3%EF%BC%8C%E8%BF%98%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%BB%A7%E7%BB%AD%E5%AF%B9%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E8%B5%B7%E8%BF%9E%E6%8E%A5%E7%9A%84%3C/span%3E" STYLE="fork"/>
          <node TEXT="当客户端的 TIME_WAIT 状态连接过多的话，就会受端口资源限制" ID="cfg4H3PYzT" _mubu_text="%3Cspan%3E%E5%BD%93%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%20TIME_WAIT%20%E7%8A%B6%E6%80%81%E8%BF%9E%E6%8E%A5%E8%BF%87%E5%A4%9A%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%8F%97%E7%AB%AF%E5%8F%A3%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果服务端（主动发起关闭连接方）的 TIME_WAIT 状态过多，并不会导致端口资源受限，因为服务端只监听一个端口，而且由于一个四元组唯一确定一个 TCP 连接，因此理论上服务端可以建立很多连接，但是 TCP 连接过多，会占用系统资源，比如文件描述符、内存资源、CPU 资源、线程资源等" ID="G4zVVv2Bq1" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%88%E4%B8%BB%E5%8A%A8%E5%8F%91%E8%B5%B7%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E6%96%B9%EF%BC%89%E7%9A%84%20TIME_WAIT%20%E7%8A%B6%E6%80%81%E8%BF%87%E5%A4%9A%EF%BC%8C%E5%B9%B6%E4%B8%8D%E4%BC%9A%E5%AF%BC%E8%87%B4%E7%AB%AF%E5%8F%A3%E8%B5%84%E6%BA%90%E5%8F%97%E9%99%90%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%AA%E7%9B%91%E5%90%AC%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%EF%BC%8C%E8%80%8C%E4%B8%94%E7%94%B1%E4%BA%8E%E4%B8%80%E4%B8%AA%E5%9B%9B%E5%85%83%E7%BB%84%E5%94%AF%E4%B8%80%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%20TCP%20%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%9B%A0%E6%AD%A4%E7%90%86%E8%AE%BA%E4%B8%8A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%AF%E4%BB%A5%E5%BB%BA%E7%AB%8B%E5%BE%88%E5%A4%9A%E8%BF%9E%E6%8E%A5%EF%BC%8C%E4%BD%86%E6%98%AF%20TCP%20%E8%BF%9E%E6%8E%A5%E8%BF%87%E5%A4%9A%EF%BC%8C%E4%BC%9A%E5%8D%A0%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%EF%BC%8C%E6%AF%94%E5%A6%82%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E5%86%85%E5%AD%98%E8%B5%84%E6%BA%90%E3%80%81CPU%20%E8%B5%84%E6%BA%90%E3%80%81%E7%BA%BF%E7%A8%8B%E8%B5%84%E6%BA%90%E7%AD%89%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="怎么解决 TIME_WAIT 状态过多的问题" ID="i9NDUqL3Km" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%20TIME_WAIT%20%E7%8A%B6%E6%80%81%E8%BF%87%E5%A4%9A%E7%9A%84%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork">
          <node TEXT="如果是客户端有大量 time_wait状态，可以考虑开启 tcp_tw_reuse参数，当发起新连接的时候，会复用处于 time_wait 状态的连接。​" ID="as9FjXzkOd" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%98%AF%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%89%E5%A4%A7%E9%87%8F%20time_wait%E7%8A%B6%E6%80%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%80%83%E8%99%91%E5%BC%80%E5%90%AF%20tcp_tw_reuse%E5%8F%82%E6%95%B0%EF%BC%8C%E5%BD%93%E5%8F%91%E8%B5%B7%E6%96%B0%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E5%A4%8D%E7%94%A8%E5%A4%84%E4%BA%8E%20time_wait%20%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果是服务端的话，尽量让主动断开连接的方式，由客户端来进行，可以在应用层设计一个逻辑，当服务端要断开连接的时候，发送一个消息给客户端，客户端收到之后，由客户端来断开 tcp 连接，这样服务端就不会有 time_wait状态了" ID="Lylcu4I9fQ" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%B0%BD%E9%87%8F%E8%AE%A9%E4%B8%BB%E5%8A%A8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%8C%E7%94%B1%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E8%BF%9B%E8%A1%8C%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%BA%94%E7%94%A8%E5%B1%82%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%80%BB%E8%BE%91%EF%BC%8C%E5%BD%93%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%A6%81%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%B6%E5%88%B0%E4%B9%8B%E5%90%8E%EF%BC%8C%E7%94%B1%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E6%96%AD%E5%BC%80%20tcp%20%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%B1%E4%B8%8D%E4%BC%9A%E6%9C%89%20time_wait%E7%8A%B6%E6%80%81%E4%BA%86%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="服务端产生大量 TIME_WAIT 状态的原因是什么" ID="mazHW1QMvr" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%A7%E7%94%9F%E5%A4%A7%E9%87%8F%20TIME_WAIT%20%E7%8A%B6%E6%80%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%98%AF%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="HTTP 没有使用长连接，这时候客户端和服务端都是短连接，服务端发送完HTTP 响应后，就会主动关闭了连接，如果有大量的短连接过来，那么服务端就会出现大量的 TIME_WAIT 状态，如果是这个问题的话，解决方式就是让客户端和服务端都开启 HTTP Keep-Alive 机制" ID="uhRv3rAiQy" _mubu_text="%3Cspan%3EHTTP%20%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E9%95%BF%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%BD%E6%98%AF%E7%9F%AD%E8%BF%9E%E6%8E%A5%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E9%80%81%E5%AE%8CHTTP%20%E5%93%8D%E5%BA%94%E5%90%8E%EF%BC%8C%E5%B0%B1%E4%BC%9A%E4%B8%BB%E5%8A%A8%E5%85%B3%E9%97%AD%E4%BA%86%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%89%E5%A4%A7%E9%87%8F%E7%9A%84%E7%9F%AD%E8%BF%9E%E6%8E%A5%E8%BF%87%E6%9D%A5%EF%BC%8C%E9%82%A3%E4%B9%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%B1%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%A4%A7%E9%87%8F%E7%9A%84%20TIME_WAIT%20%E7%8A%B6%E6%80%81%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%AF%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E7%9A%84%E8%AF%9D%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%E5%B0%B1%E6%98%AF%E8%AE%A9%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%BD%E5%BC%80%E5%90%AF%20HTTP%20Keep-Alive%20%E6%9C%BA%E5%88%B6%3C/span%3E" STYLE="fork"/>
          <node TEXT="HTTP 长连接的请求数量设置过小，Web 服务端通常会有个参数，来定义一条 HTTP 长连接上最大能处理的请求数量，当超过最大限制时，就会主动关闭连接。比如 nginx 的 keepalive_requests 这个参数，默认是 100，味着每个 HTTP 长连接最多只能跑 100 次请求，因为当 QPS 请求很高的时候，nginx 就会频繁的关闭连接，那么此时服务端上就会出大量的 TIME_WAIT 状态。解决的方式也很简单，调大 nginx 的 keepalive_requests 参数就行" ID="FiVjkpBCTF" _mubu_text="%3Cspan%3EHTTP%20%E9%95%BF%E8%BF%9E%E6%8E%A5%E7%9A%84%E8%AF%B7%E6%B1%82%E6%95%B0%E9%87%8F%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%B0%8F%EF%BC%8CWeb%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E5%B8%B8%E4%BC%9A%E6%9C%89%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E6%9D%A5%E5%AE%9A%E4%B9%89%E4%B8%80%E6%9D%A1%20HTTP%20%E9%95%BF%E8%BF%9E%E6%8E%A5%E4%B8%8A%E6%9C%80%E5%A4%A7%E8%83%BD%E5%A4%84%E7%90%86%E7%9A%84%E8%AF%B7%E6%B1%82%E6%95%B0%E9%87%8F%EF%BC%8C%E5%BD%93%E8%B6%85%E8%BF%87%E6%9C%80%E5%A4%A7%E9%99%90%E5%88%B6%E6%97%B6%EF%BC%8C%E5%B0%B1%E4%BC%9A%E4%B8%BB%E5%8A%A8%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E3%80%82%E6%AF%94%E5%A6%82%20nginx%20%E7%9A%84%20keepalive_requests%20%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%98%AF%20100%EF%BC%8C%E5%91%B3%E7%9D%80%E6%AF%8F%E4%B8%AA%20HTTP%20%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%9C%80%E5%A4%9A%E5%8F%AA%E8%83%BD%E8%B7%91%20100%20%E6%AC%A1%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%BD%93%20QPS%20%E8%AF%B7%E6%B1%82%E5%BE%88%E9%AB%98%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8Cnginx%20%E5%B0%B1%E4%BC%9A%E9%A2%91%E7%B9%81%E7%9A%84%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%EF%BC%8C%E9%82%A3%E4%B9%88%E6%AD%A4%E6%97%B6%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8A%E5%B0%B1%E4%BC%9A%E5%87%BA%E5%A4%A7%E9%87%8F%E7%9A%84%20TIME_WAIT%20%E7%8A%B6%E6%80%81%E3%80%82%E8%A7%A3%E5%86%B3%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B9%9F%E5%BE%88%E7%AE%80%E5%8D%95%EF%BC%8C%E8%B0%83%E5%A4%A7%20nginx%20%E7%9A%84%20keepalive_requests%20%E5%8F%82%E6%95%B0%E5%B0%B1%E8%A1%8C%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="服务端产生大量 CLOSE_WAIT 状态的原因是什么" ID="dGGd9alucL" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%A7%E7%94%9F%E5%A4%A7%E9%87%8F%20CLOSE_WAIT%20%E7%8A%B6%E6%80%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%98%AF%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="我觉得问题原因在于，是服务端没有及时调用 close 关闭连接的函数，导致出现大量 CLOSE_WAIT 状态的连接，因为只有正确调用了 close 关闭连接函数的时候，TCP 连接状态才会有从 CLOSE_WAIT 状态变为 LAST_ACK 状态" ID="TH1aQgTwdm" _mubu_text="%3Cspan%3E%E6%88%91%E8%A7%89%E5%BE%97%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0%E5%9C%A8%E4%BA%8E%EF%BC%8C%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B2%A1%E6%9C%89%E5%8F%8A%E6%97%B6%E8%B0%83%E7%94%A8%20close%20%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E5%AF%BC%E8%87%B4%E5%87%BA%E7%8E%B0%E5%A4%A7%E9%87%8F%20CLOSE_WAIT%20%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%8F%AA%E6%9C%89%E6%AD%A3%E7%A1%AE%E8%B0%83%E7%94%A8%E4%BA%86%20close%20%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8CTCP%20%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E6%89%8D%E4%BC%9A%E6%9C%89%E4%BB%8E%20CLOSE_WAIT%20%E7%8A%B6%E6%80%81%E5%8F%98%E4%B8%BA%20LAST_ACK%20%E7%8A%B6%E6%80%81%3C/span%3E" STYLE="fork"/>
          <node TEXT="我觉得大概率服务端的代码的问题，这时候我们需要针对具体的代码一步一步的进行排查和定位，主要分析的方向就是服务端为什么没有调用 close" ID="6etRQYQzvB" _mubu_text="%3Cspan%3E%E6%88%91%E8%A7%89%E5%BE%97%E5%A4%A7%E6%A6%82%E7%8E%87%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E9%92%88%E5%AF%B9%E5%85%B7%E4%BD%93%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E7%9A%84%E8%BF%9B%E8%A1%8C%E6%8E%92%E6%9F%A5%E5%92%8C%E5%AE%9A%E4%BD%8D%EF%BC%8C%E4%B8%BB%E8%A6%81%E5%88%86%E6%9E%90%E7%9A%84%E6%96%B9%E5%90%91%E5%B0%B1%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89%E8%B0%83%E7%94%A8%20close%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="如果server发送FIN之后，因为client挂掉了，收不到回应，会发生什么" ID="SNPTL2JuP0" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%A6%82%E6%9E%9Cserver%E5%8F%91%E9%80%81FIN%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%9B%A0%E4%B8%BAclient%E6%8C%82%E6%8E%89%E4%BA%86%EF%BC%8C%E6%94%B6%E4%B8%8D%E5%88%B0%E5%9B%9E%E5%BA%94%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="会触发超时重传机制，重传FIN报文，如果FIN报文达到最大的重传次数之后，还是没有收到响应，那么 server 就会断开链接了" ID="zjklQ099ed" _mubu_text="%3Cspan%3E%E4%BC%9A%E8%A7%A6%E5%8F%91%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6%EF%BC%8C%E9%87%8D%E4%BC%A0FIN%E6%8A%A5%E6%96%87%EF%BC%8C%E5%A6%82%E6%9E%9CFIN%E6%8A%A5%E6%96%87%E8%BE%BE%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84%E9%87%8D%E4%BC%A0%E6%AC%A1%E6%95%B0%E4%B9%8B%E5%90%8E%EF%BC%8C%E8%BF%98%E6%98%AF%E6%B2%A1%E6%9C%89%E6%94%B6%E5%88%B0%E5%93%8D%E5%BA%94%EF%BC%8C%E9%82%A3%E4%B9%88%20server%20%E5%B0%B1%E4%BC%9A%E6%96%AD%E5%BC%80%E9%93%BE%E6%8E%A5%E4%BA%86%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="如果客户端宕机重启，收到了server的FIN，会发生什么" ID="JDHRbI9sE4" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E5%A6%82%E6%9E%9C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%95%E6%9C%BA%E9%87%8D%E5%90%AF%EF%BC%8C%E6%94%B6%E5%88%B0%E4%BA%86server%E7%9A%84FIN%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="既然客户端宕机重启了，之前的TCP连接信息就不存在了，那么如果收到server的FIN，会回RST报文给server，server收到 RST报文就会断开连接" ID="buDBWZFDiB" _mubu_text="%3Cspan%3E%E6%97%A2%E7%84%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%95%E6%9C%BA%E9%87%8D%E5%90%AF%E4%BA%86%EF%BC%8C%E4%B9%8B%E5%89%8D%E7%9A%84TCP%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF%E5%B0%B1%E4%B8%8D%E5%AD%98%E5%9C%A8%E4%BA%86%EF%BC%8C%E9%82%A3%E4%B9%88%E5%A6%82%E6%9E%9C%E6%94%B6%E5%88%B0server%E7%9A%84FIN%EF%BC%8C%E4%BC%9A%E5%9B%9ERST%E6%8A%A5%E6%96%87%E7%BB%99server%EF%BC%8Cserver%E6%94%B6%E5%88%B0%20RST%E6%8A%A5%E6%96%87%E5%B0%B1%E4%BC%9A%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork"/>
        </node>
      </node>
      <node TEXT="TCP 与 UDP（重要）" ID="KnMXQPhODy" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3ETCP%20%E4%B8%8E%20UDP%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89%3C/span%3E" STYLE="fork">
        <node TEXT="TCP 和 UDP 有什么区别？" ID="EnWFWL1dnY" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP%20%E5%92%8C%20UDP%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F%3C/span%3E" STYLE="fork">
          <node TEXT="几点区别" ID="Lz3htnrSzi" _mubu_text="%3Cspan%3E%E5%87%A0%E7%82%B9%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
            <node TEXT="TCP 是面向连接的协议，在发送数据的时候，需要先建立 TCP 三次握手，而 UDP 无连接的协议，直接就可以发送数据。​" ID="fsHM0Lm9CY" _mubu_text="%3Cspan%3ETCP%20%E6%98%AF%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8D%8F%E8%AE%AE%EF%BC%8C%E5%9C%A8%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E9%9C%80%E8%A6%81%E5%85%88%E5%BB%BA%E7%AB%8B%20TCP%20%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E8%80%8C%20UDP%20%E6%97%A0%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8D%8F%E8%AE%AE%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E3%80%82%3C/span%3E" STYLE="fork"/>
            <node TEXT="TCP 会通过超时重传、流量控制、拥塞控制保证数据的可靠传输，而 UDP 并没有这些特性，UDP 不考虑数据的可靠性。" ID="6Bxl3wJIwd" _mubu_text="%3Cspan%3ETCP%20%E4%BC%9A%E9%80%9A%E8%BF%87%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E3%80%81%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E3%80%81%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%EF%BC%8C%E8%80%8C%20UDP%20%E5%B9%B6%E6%B2%A1%E6%9C%89%E8%BF%99%E4%BA%9B%E7%89%B9%E6%80%A7%EF%BC%8CUDP%20%E4%B8%8D%E8%80%83%E8%99%91%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E3%80%82%3C/span%3E" STYLE="fork"/>
            <node TEXT=" TCP 发送的数据是以字节流的形式，没有边界。而 UDP  是一个包一个包的发送，是有边界的。" ID="1aLLQtyGHs" _mubu_text="%3Cspan%3E%20TCP%20%E5%8F%91%E9%80%81%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E4%BB%A5%E5%AD%97%E8%8A%82%E6%B5%81%E7%9A%84%E5%BD%A2%E5%BC%8F%EF%BC%8C%E6%B2%A1%E6%9C%89%E8%BE%B9%E7%95%8C%E3%80%82%E8%80%8C%20UDP%20%20%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8C%85%E4%B8%80%E4%B8%AA%E5%8C%85%E7%9A%84%E5%8F%91%E9%80%81%EF%BC%8C%E6%98%AF%E6%9C%89%E8%BE%B9%E7%95%8C%E7%9A%84%E3%80%82%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="综合来看" ID="sRl15XlcWs" _mubu_text="%3Cspan%3E%E7%BB%BC%E5%90%88%E6%9D%A5%E7%9C%8B%3C/span%3E" STYLE="fork">
            <node TEXT="TCP 的优势在于可以保证数据的可靠性，但是缺陷就是实时性没有 UDP 协议好" ID="f7J7jg9onV" _mubu_text="%3Cspan%3ETCP%20%E7%9A%84%E4%BC%98%E5%8A%BF%E5%9C%A8%E4%BA%8E%E5%8F%AF%E4%BB%A5%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%EF%BC%8C%E4%BD%86%E6%98%AF%E7%BC%BA%E9%99%B7%E5%B0%B1%E6%98%AF%E5%AE%9E%E6%97%B6%E6%80%A7%E6%B2%A1%E6%9C%89%20UDP%20%E5%8D%8F%E8%AE%AE%E5%A5%BD%3C/span%3E" STYLE="fork"/>
            <node TEXT="UDP 的优势在于足够简单，不用建立连接，数据直接丢过去即可，并且 UDP 包头比 TCP 包头小很多，所以 UDP 实时性和速度方面是比 TCP  好的" ID="jIEBr0IhnT" _mubu_text="%3Cspan%3EUDP%20%E7%9A%84%E4%BC%98%E5%8A%BF%E5%9C%A8%E4%BA%8E%E8%B6%B3%E5%A4%9F%E7%AE%80%E5%8D%95%EF%BC%8C%E4%B8%8D%E7%94%A8%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%9B%B4%E6%8E%A5%E4%B8%A2%E8%BF%87%E5%8E%BB%E5%8D%B3%E5%8F%AF%EF%BC%8C%E5%B9%B6%E4%B8%94%20UDP%20%E5%8C%85%E5%A4%B4%E6%AF%94%20TCP%20%E5%8C%85%E5%A4%B4%E5%B0%8F%E5%BE%88%E5%A4%9A%EF%BC%8C%E6%89%80%E4%BB%A5%20UDP%20%E5%AE%9E%E6%97%B6%E6%80%A7%E5%92%8C%E9%80%9F%E5%BA%A6%E6%96%B9%E9%9D%A2%E6%98%AF%E6%AF%94%20TCP%20%20%E5%A5%BD%E7%9A%84%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="什么时候用 TCP？ 什么时候用 UDP" ID="kba8MKWc8c" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%20TCP%EF%BC%9F%20%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%20UDP%3C/span%3E" STYLE="fork">
          <node TEXT="如果主要关注数据接收的可靠性和顺序，可以选使用 TCP，比如FTP协议、HTTP协议都是基于 TCP 协议进行传输数据" ID="Mu5SYma19d" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E4%B8%BB%E8%A6%81%E5%85%B3%E6%B3%A8%E6%95%B0%E6%8D%AE%E6%8E%A5%E6%94%B6%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%92%8C%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E4%BD%BF%E7%94%A8%20TCP%EF%BC%8C%E6%AF%94%E5%A6%82FTP%E5%8D%8F%E8%AE%AE%E3%80%81HTTP%E5%8D%8F%E8%AE%AE%E9%83%BD%E6%98%AF%E5%9F%BA%E4%BA%8E%20TCP%20%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果主要关注的是速度和实时性，而且并不在意某些数据包的丢失，可以选使用 UDP 协议，比如直播、视频会议场景" ID="N8HuyA8uqX" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E4%B8%BB%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E6%98%AF%E9%80%9F%E5%BA%A6%E5%92%8C%E5%AE%9E%E6%97%B6%E6%80%A7%EF%BC%8C%E8%80%8C%E4%B8%94%E5%B9%B6%E4%B8%8D%E5%9C%A8%E6%84%8F%E6%9F%90%E4%BA%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E4%B8%A2%E5%A4%B1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E4%BD%BF%E7%94%A8%20UDP%20%E5%8D%8F%E8%AE%AE%EF%BC%8C%E6%AF%94%E5%A6%82%E7%9B%B4%E6%92%AD%E3%80%81%E8%A7%86%E9%A2%91%E4%BC%9A%E8%AE%AE%E5%9C%BA%E6%99%AF%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="此时此刻的视频面试用的 UDP 还是 TCP？UDP丢包会有什么现象" ID="AN2Ra1QLHC" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E6%AD%A4%E6%97%B6%E6%AD%A4%E5%88%BB%E7%9A%84%E8%A7%86%E9%A2%91%E9%9D%A2%E8%AF%95%E7%94%A8%E7%9A%84%20UDP%20%E8%BF%98%E6%98%AF%20TCP%EF%BC%9FUDP%E4%B8%A2%E5%8C%85%E4%BC%9A%E6%9C%89%E4%BB%80%E4%B9%88%E7%8E%B0%E8%B1%A1%3C/span%3E" STYLE="fork">
          <node TEXT="我觉得是UDP协议，因为视频会议这个场景下，重要的是实时性，UDP协议实时性比TCP好，采用UDP协议传输音视频数据的话，如果发生了丢包，只是就丢失某一瞬间的画面和语音，然后还可以继续进行会议沟通，不会太影响视频会议的体验" ID="lykF9pzHRJ" _mubu_text="%3Cspan%3E%E6%88%91%E8%A7%89%E5%BE%97%E6%98%AFUDP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%A7%86%E9%A2%91%E4%BC%9A%E8%AE%AE%E8%BF%99%E4%B8%AA%E5%9C%BA%E6%99%AF%E4%B8%8B%EF%BC%8C%E9%87%8D%E8%A6%81%E7%9A%84%E6%98%AF%E5%AE%9E%E6%97%B6%E6%80%A7%EF%BC%8CUDP%E5%8D%8F%E8%AE%AE%E5%AE%9E%E6%97%B6%E6%80%A7%E6%AF%94TCP%E5%A5%BD%EF%BC%8C%E9%87%87%E7%94%A8UDP%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E9%9F%B3%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%8F%91%E7%94%9F%E4%BA%86%E4%B8%A2%E5%8C%85%EF%BC%8C%E5%8F%AA%E6%98%AF%E5%B0%B1%E4%B8%A2%E5%A4%B1%E6%9F%90%E4%B8%80%E7%9E%AC%E9%97%B4%E7%9A%84%E7%94%BB%E9%9D%A2%E5%92%8C%E8%AF%AD%E9%9F%B3%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%98%E5%8F%AF%E4%BB%A5%E7%BB%A7%E7%BB%AD%E8%BF%9B%E8%A1%8C%E4%BC%9A%E8%AE%AE%E6%B2%9F%E9%80%9A%EF%BC%8C%E4%B8%8D%E4%BC%9A%E5%A4%AA%E5%BD%B1%E5%93%8D%E8%A7%86%E9%A2%91%E4%BC%9A%E8%AE%AE%E7%9A%84%E4%BD%93%E9%AA%8C%3C/span%3E" STYLE="fork"/>
          <node TEXT="如果是采用 TCP 协议的，由于 TCP 是可靠传输，如果发生了丢包，可能画面就卡住不动，等丢包重传才会推进画面，这样实时性就比较差了" ID="Oav5LKU3ql" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%98%AF%E9%87%87%E7%94%A8%20TCP%20%E5%8D%8F%E8%AE%AE%E7%9A%84%EF%BC%8C%E7%94%B1%E4%BA%8E%20TCP%20%E6%98%AF%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%8F%91%E7%94%9F%E4%BA%86%E4%B8%A2%E5%8C%85%EF%BC%8C%E5%8F%AF%E8%83%BD%E7%94%BB%E9%9D%A2%E5%B0%B1%E5%8D%A1%E4%BD%8F%E4%B8%8D%E5%8A%A8%EF%BC%8C%E7%AD%89%E4%B8%A2%E5%8C%85%E9%87%8D%E4%BC%A0%E6%89%8D%E4%BC%9A%E6%8E%A8%E8%BF%9B%E7%94%BB%E9%9D%A2%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%AE%9E%E6%97%B6%E6%80%A7%E5%B0%B1%E6%AF%94%E8%BE%83%E5%B7%AE%E4%BA%86%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="UDP 怎么改造变为可靠传输" ID="nnPHEOjmhZ" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3EUDP%20%E6%80%8E%E4%B9%88%E6%94%B9%E9%80%A0%E5%8F%98%E4%B8%BA%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%3C/span%3E" STYLE="fork">
          <node TEXT="我会在应用层增加序列号字段，用来确保UDP的数据可以按序接收，同时还会增加确认号，用来实现超时重传机制，当超过一定时间内没收到已发送数据的确认号，就重传该数据包" ID="j9UQO09pSX" _mubu_text="%3Cspan%3E%E6%88%91%E4%BC%9A%E5%9C%A8%E5%BA%94%E7%94%A8%E5%B1%82%E5%A2%9E%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7%E5%AD%97%E6%AE%B5%EF%BC%8C%E7%94%A8%E6%9D%A5%E7%A1%AE%E4%BF%9DUDP%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BB%A5%E6%8C%89%E5%BA%8F%E6%8E%A5%E6%94%B6%EF%BC%8C%E5%90%8C%E6%97%B6%E8%BF%98%E4%BC%9A%E5%A2%9E%E5%8A%A0%E7%A1%AE%E8%AE%A4%E5%8F%B7%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%AE%9E%E7%8E%B0%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6%EF%BC%8C%E5%BD%93%E8%B6%85%E8%BF%87%E4%B8%80%E5%AE%9A%E6%97%B6%E9%97%B4%E5%86%85%E6%B2%A1%E6%94%B6%E5%88%B0%E5%B7%B2%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A1%AE%E8%AE%A4%E5%8F%B7%EF%BC%8C%E5%B0%B1%E9%87%8D%E4%BC%A0%E8%AF%A5%E6%95%B0%E6%8D%AE%E5%8C%85%3C/span%3E" STYLE="fork"/>
          <node TEXT="我还会在应用层开辟一个缓冲区，用来实现滑动窗口，有了滑动窗口这样发送数据可以先批量发送数据，不需要等上一个数据的确认了才能发送，提高了发送速率，同时还可以基于滑动窗口实现流量控制，用来保证发送方能按接收方的接收能力发送数据，避免发送的数据对方接收不了而发生数据丢失" ID="iU9wRGGG3P" _mubu_text="%3Cspan%3E%E6%88%91%E8%BF%98%E4%BC%9A%E5%9C%A8%E5%BA%94%E7%94%A8%E5%B1%82%E5%BC%80%E8%BE%9F%E4%B8%80%E4%B8%AA%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%8C%E6%9C%89%E4%BA%86%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%BF%99%E6%A0%B7%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BB%A5%E5%85%88%E6%89%B9%E9%87%8F%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AD%89%E4%B8%8A%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A1%AE%E8%AE%A4%E4%BA%86%E6%89%8D%E8%83%BD%E5%8F%91%E9%80%81%EF%BC%8C%E6%8F%90%E9%AB%98%E4%BA%86%E5%8F%91%E9%80%81%E9%80%9F%E7%8E%87%EF%BC%8C%E5%90%8C%E6%97%B6%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9F%BA%E4%BA%8E%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%EF%BC%8C%E7%94%A8%E6%9D%A5%E4%BF%9D%E8%AF%81%E5%8F%91%E9%80%81%E6%96%B9%E8%83%BD%E6%8C%89%E6%8E%A5%E6%94%B6%E6%96%B9%E7%9A%84%E6%8E%A5%E6%94%B6%E8%83%BD%E5%8A%9B%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%EF%BC%8C%E9%81%BF%E5%85%8D%E5%8F%91%E9%80%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%B9%E6%96%B9%E6%8E%A5%E6%94%B6%E4%B8%8D%E4%BA%86%E8%80%8C%E5%8F%91%E7%94%9F%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%3C/span%3E" STYLE="fork"/>
          <node TEXT="最后，为了保证整个网络的带宽环境，还需要实现拥塞控制，确保发送方的数据，不会占满整个带宽" ID="PA1tYfmCjf" _mubu_text="%3Cspan%3E%E6%9C%80%E5%90%8E%EF%BC%8C%E4%B8%BA%E4%BA%86%E4%BF%9D%E8%AF%81%E6%95%B4%E4%B8%AA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%B8%A6%E5%AE%BD%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%BF%98%E9%9C%80%E8%A6%81%E5%AE%9E%E7%8E%B0%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%EF%BC%8C%E7%A1%AE%E4%BF%9D%E5%8F%91%E9%80%81%E6%96%B9%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%B8%8D%E4%BC%9A%E5%8D%A0%E6%BB%A1%E6%95%B4%E4%B8%AA%E5%B8%A6%E5%AE%BD%3C/span%3E" STYLE="fork"/>
          <node TEXT="我觉得 UDP 实现可靠传输相比 TCP 可靠传输有几点优势：​" ID="p3fT8g6RzS" _mubu_text="%3Cspan%3E%E6%88%91%E8%A7%89%E5%BE%97%20UDP%20%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E7%9B%B8%E6%AF%94%20TCP%20%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E6%9C%89%E5%87%A0%E7%82%B9%E4%BC%98%E5%8A%BF%EF%BC%9A%3C/span%3E" STYLE="fork">
            <node TEXT="拥塞控制算法可以根据不同的应用选用不同的拥塞控制算法，而TCP选用拥塞控制算法的时候，是所有应用都使用这一套拥塞控制算法" ID="k0fUV106yc" _mubu_text="%3Cspan%3E%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E5%BA%94%E7%94%A8%E9%80%89%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%EF%BC%8C%E8%80%8CTCP%E9%80%89%E7%94%A8%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%98%AF%E6%89%80%E6%9C%89%E5%BA%94%E7%94%A8%E9%83%BD%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%80%E5%A5%97%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%3C/span%3E" STYLE="fork"/>
            <node TEXT="升级方便，TCP是在内核实现的，升级TCP需要升级操作系统，而UDP可靠传输是在应用层实现的，升级协议就像升级软件一样简单" ID="P0pbXgURvk" _mubu_text="%3Cspan%3E%E5%8D%87%E7%BA%A7%E6%96%B9%E4%BE%BF%EF%BC%8CTCP%E6%98%AF%E5%9C%A8%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%8C%E5%8D%87%E7%BA%A7TCP%E9%9C%80%E8%A6%81%E5%8D%87%E7%BA%A7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8C%E8%80%8CUDP%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E6%98%AF%E5%9C%A8%E5%BA%94%E7%94%A8%E5%B1%82%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%8C%E5%8D%87%E7%BA%A7%E5%8D%8F%E8%AE%AE%E5%B0%B1%E5%83%8F%E5%8D%87%E7%BA%A7%E8%BD%AF%E4%BB%B6%E4%B8%80%E6%A0%B7%E7%AE%80%E5%8D%95%3C/span%3E" STYLE="fork"/>
            <node TEXT="可以实现网络连接迁移，在应用层用连接id来唯一标识一个连接，不必像TCP那样，是通过四元组才确定连接的，只要四元组的信息发生了变化，就需要重新建立连接" ID="RVV43MuEMU" _mubu_text="%3Cspan%3E%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E8%BF%81%E7%A7%BB%EF%BC%8C%E5%9C%A8%E5%BA%94%E7%94%A8%E5%B1%82%E7%94%A8%E8%BF%9E%E6%8E%A5id%E6%9D%A5%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%EF%BC%8C%E4%B8%8D%E5%BF%85%E5%83%8FTCP%E9%82%A3%E6%A0%B7%EF%BC%8C%E6%98%AF%E9%80%9A%E8%BF%87%E5%9B%9B%E5%85%83%E7%BB%84%E6%89%8D%E7%A1%AE%E5%AE%9A%E8%BF%9E%E6%8E%A5%E7%9A%84%EF%BC%8C%E5%8F%AA%E8%A6%81%E5%9B%9B%E5%85%83%E7%BB%84%E7%9A%84%E4%BF%A1%E6%81%AF%E5%8F%91%E7%94%9F%E4%BA%86%E5%8F%98%E5%8C%96%EF%BC%8C%E5%B0%B1%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
        <node TEXT="TCP 和 UDP 可以共用一个端口吗" ID="fKMA7XntZf" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP%20%E5%92%8C%20UDP%20%E5%8F%AF%E4%BB%A5%E5%85%B1%E7%94%A8%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E5%90%97%3C/span%3E" STYLE="fork">
          <node TEXT="可以的。​" ID="mTGND7zwEZ" _mubu_text="%3Cspan%3E%E5%8F%AF%E4%BB%A5%E7%9A%84%E3%80%82%3C/span%3E" STYLE="fork"/>
          <node TEXT="socket 是根据五元组信息唯一确认的：协议类型、源 ip 地址、源端口、目标 ip地址、目标端口，只要有一个信息不同，就会认为是不同的 socket，不会引起冲突，所以TCP和UDP是可以共用一个端口号的" ID="tz8IpahLga" _mubu_text="%3Cspan%3Esocket%20%E6%98%AF%E6%A0%B9%E6%8D%AE%E4%BA%94%E5%85%83%E7%BB%84%E4%BF%A1%E6%81%AF%E5%94%AF%E4%B8%80%E7%A1%AE%E8%AE%A4%E7%9A%84%EF%BC%9A%E5%8D%8F%E8%AE%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E6%BA%90%20ip%20%E5%9C%B0%E5%9D%80%E3%80%81%E6%BA%90%E7%AB%AF%E5%8F%A3%E3%80%81%E7%9B%AE%E6%A0%87%20ip%E5%9C%B0%E5%9D%80%E3%80%81%E7%9B%AE%E6%A0%87%E7%AB%AF%E5%8F%A3%EF%BC%8C%E5%8F%AA%E8%A6%81%E6%9C%89%E4%B8%80%E4%B8%AA%E4%BF%A1%E6%81%AF%E4%B8%8D%E5%90%8C%EF%BC%8C%E5%B0%B1%E4%BC%9A%E8%AE%A4%E4%B8%BA%E6%98%AF%E4%B8%8D%E5%90%8C%E7%9A%84%20socket%EF%BC%8C%E4%B8%8D%E4%BC%9A%E5%BC%95%E8%B5%B7%E5%86%B2%E7%AA%81%EF%BC%8C%E6%89%80%E4%BB%A5TCP%E5%92%8CUDP%E6%98%AF%E5%8F%AF%E4%BB%A5%E5%85%B1%E7%94%A8%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E5%8F%B7%E7%9A%84%3C/span%3E" STYLE="fork"/>
        </node>
      </node>
      <node TEXT="TCP 可靠性（重要）" ID="ebnXSVtjeY" _mubu_text="%3Cspan%20class=%22bold%20text-color-red%22%3ETCP%20%E5%8F%AF%E9%9D%A0%E6%80%A7%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89%3C/span%3E" STYLE="fork">
        <node TEXT="TCP 是如何保证可靠性的" ID="pN334XExPF" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP%20%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%9A%84%3C/span%3E" STYLE="fork">
          <node TEXT="建立连接" ID="6EZqHj2wBf" _mubu_text="%3Cspan%3E%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork"/>
          <node TEXT="序列号与确认应答" ID="vIDYNJA39D" _mubu_text="%3Cspan%3E%E5%BA%8F%E5%88%97%E5%8F%B7%E4%B8%8E%E7%A1%AE%E8%AE%A4%E5%BA%94%E7%AD%94%3C/span%3E" STYLE="fork"/>
          <node TEXT="数据包重传" ID="0E4kclnkmd" _mubu_text="%3Cspan%3E%E6%95%B0%E6%8D%AE%E5%8C%85%E9%87%8D%E4%BC%A0%3C/span%3E" STYLE="fork"/>
          <node TEXT="滑动窗口机制" ID="nzSAkwMu2x" _mubu_text="%3Cspan%3E%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%BA%E5%88%B6%3C/span%3E" STYLE="fork"/>
          <node TEXT="拥塞控制" ID="iKHUed38FD" _mubu_text="%3Cspan%3E%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="TCP流量控制和拥塞控制的区别" ID="W25UMwgALM" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E5%92%8C%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%9A%84%E5%8C%BA%E5%88%AB%3C/span%3E" STYLE="fork">
          <node TEXT="流量控制：这是一个端到端的控制机制，目的是防止发送方发送的数据过快，导致接收方处理不过来" ID="ypRqHzrWli" _mubu_text="%3Cspan%3E%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%EF%BC%9A%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%88%B0%E7%AB%AF%E7%9A%84%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6%EF%BC%8C%E7%9B%AE%E7%9A%84%E6%98%AF%E9%98%B2%E6%AD%A2%E5%8F%91%E9%80%81%E6%96%B9%E5%8F%91%E9%80%81%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%87%E5%BF%AB%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%8E%A5%E6%94%B6%E6%96%B9%E5%A4%84%E7%90%86%E4%B8%8D%E8%BF%87%E6%9D%A5%3C/span%3E" STYLE="fork"/>
          <node TEXT="拥塞控制：这是一个网络层面的控制机制，目的是防止过多的数据包同时在网络中传输，导致网络拥塞" ID="BTq09WZx6M" _mubu_text="%3Cspan%3E%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%EF%BC%9A%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%B1%82%E9%9D%A2%E7%9A%84%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6%EF%BC%8C%E7%9B%AE%E7%9A%84%E6%98%AF%E9%98%B2%E6%AD%A2%E8%BF%87%E5%A4%9A%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85%E5%90%8C%E6%97%B6%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E4%BC%A0%E8%BE%93%EF%BC%8C%E5%AF%BC%E8%87%B4%E7%BD%91%E7%BB%9C%E6%8B%A5%E5%A1%9E%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="滑动窗口怎么设计的？解决什么问题" ID="zcRhvDJTVl" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3E%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%E7%9A%84%EF%BC%9F%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%3C/span%3E" STYLE="fork">
          <node TEXT="发送方和接收方在内核各自都有一个缓冲区，发送缓冲区和接收缓冲区上都各有一个窗口，发送方的窗口表示可发送的最大数据量，接收方的窗口表示可接收的最大数据量" ID="TzvS1XYeH6" _mubu_text="%3Cspan%3E%E5%8F%91%E9%80%81%E6%96%B9%E5%92%8C%E6%8E%A5%E6%94%B6%E6%96%B9%E5%9C%A8%E5%86%85%E6%A0%B8%E5%90%84%E8%87%AA%E9%83%BD%E6%9C%89%E4%B8%80%E4%B8%AA%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%8C%E5%8F%91%E9%80%81%E7%BC%93%E5%86%B2%E5%8C%BA%E5%92%8C%E6%8E%A5%E6%94%B6%E7%BC%93%E5%86%B2%E5%8C%BA%E4%B8%8A%E9%83%BD%E5%90%84%E6%9C%89%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%EF%BC%8C%E5%8F%91%E9%80%81%E6%96%B9%E7%9A%84%E7%AA%97%E5%8F%A3%E8%A1%A8%E7%A4%BA%E5%8F%AF%E5%8F%91%E9%80%81%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%EF%BC%8C%E6%8E%A5%E6%94%B6%E6%96%B9%E7%9A%84%E7%AA%97%E5%8F%A3%E8%A1%A8%E7%A4%BA%E5%8F%AF%E6%8E%A5%E6%94%B6%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%3C/span%3E" STYLE="fork"/>
          <node TEXT="发送方有了发送窗口后，那么发送方可以不用等待已发送数据的确认报文，就可以继续发送下一批数据，提高了发送的速率" ID="hl5x0XwyjG" _mubu_text="%3Cspan%3E%E5%8F%91%E9%80%81%E6%96%B9%E6%9C%89%E4%BA%86%E5%8F%91%E9%80%81%E7%AA%97%E5%8F%A3%E5%90%8E%EF%BC%8C%E9%82%A3%E4%B9%88%E5%8F%91%E9%80%81%E6%96%B9%E5%8F%AF%E4%BB%A5%E4%B8%8D%E7%94%A8%E7%AD%89%E5%BE%85%E5%B7%B2%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A1%AE%E8%AE%A4%E6%8A%A5%E6%96%87%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%BB%A7%E7%BB%AD%E5%8F%91%E9%80%81%E4%B8%8B%E4%B8%80%E6%89%B9%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%8F%90%E9%AB%98%E4%BA%86%E5%8F%91%E9%80%81%E7%9A%84%E9%80%9F%E7%8E%87%3C/span%3E" STYLE="fork"/>
          <node TEXT="接收方有了接收窗口后，可以实现流量控制，把接收方的接收窗口告诉给发送方，让发送方按自己的接收情况来发送数据，避免发送方发送的数据过快，导致接收方处理不过来" ID="PSzZ07IcDc" _mubu_text="%3Cspan%3E%E6%8E%A5%E6%94%B6%E6%96%B9%E6%9C%89%E4%BA%86%E6%8E%A5%E6%94%B6%E7%AA%97%E5%8F%A3%E5%90%8E%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%EF%BC%8C%E6%8A%8A%E6%8E%A5%E6%94%B6%E6%96%B9%E7%9A%84%E6%8E%A5%E6%94%B6%E7%AA%97%E5%8F%A3%E5%91%8A%E8%AF%89%E7%BB%99%E5%8F%91%E9%80%81%E6%96%B9%EF%BC%8C%E8%AE%A9%E5%8F%91%E9%80%81%E6%96%B9%E6%8C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8E%A5%E6%94%B6%E6%83%85%E5%86%B5%E6%9D%A5%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%EF%BC%8C%E9%81%BF%E5%85%8D%E5%8F%91%E9%80%81%E6%96%B9%E5%8F%91%E9%80%81%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%87%E5%BF%AB%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%8E%A5%E6%94%B6%E6%96%B9%E5%A4%84%E7%90%86%E4%B8%8D%E8%BF%87%E6%9D%A5%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="TCP 协议拥塞控制是怎么实现的" ID="fGMbs89CnZ" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP%20%E5%8D%8F%E8%AE%AE%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%3C/span%3E" STYLE="fork">
          <node TEXT="慢启动-&gt;拥塞避免-&gt;超时重传-&gt;慢启动" ID="1GzFv3BR0T" _mubu_text="%3Cspan%3E%E6%85%A2%E5%90%AF%E5%8A%A8-&amp;gt;%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D-&amp;gt;%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0-&amp;gt;%E6%85%A2%E5%90%AF%E5%8A%A8%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="TCP的延迟应答和累计应答是什么" ID="UC5S7HVNqa" _mubu_text="%3Cspan%20class=%22bold%20highlight-yellow%22%3ETCP%E7%9A%84%E5%BB%B6%E8%BF%9F%E5%BA%94%E7%AD%94%E5%92%8C%E7%B4%AF%E8%AE%A1%E5%BA%94%E7%AD%94%E6%98%AF%E4%BB%80%E4%B9%88%3C/span%3E" STYLE="fork">
          <node TEXT="TCP的延迟应答是指接收方不立即发送ACK确认接收到的数据，而是延迟一段时间后再发送ACK。这样可以等待是否有更多的数据要发送，从而减少ACK报文的数量，提高网络利用率" ID="yaYWf4ARcv" _mubu_text="%3Cspan%3ETCP%E7%9A%84%E5%BB%B6%E8%BF%9F%E5%BA%94%E7%AD%94%E6%98%AF%E6%8C%87%E6%8E%A5%E6%94%B6%E6%96%B9%E4%B8%8D%E7%AB%8B%E5%8D%B3%E5%8F%91%E9%80%81ACK%E7%A1%AE%E8%AE%A4%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%80%8C%E6%98%AF%E5%BB%B6%E8%BF%9F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%86%8D%E5%8F%91%E9%80%81ACK%E3%80%82%E8%BF%99%E6%A0%B7%E5%8F%AF%E4%BB%A5%E7%AD%89%E5%BE%85%E6%98%AF%E5%90%A6%E6%9C%89%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A6%81%E5%8F%91%E9%80%81%EF%BC%8C%E4%BB%8E%E8%80%8C%E5%87%8F%E5%B0%91ACK%E6%8A%A5%E6%96%87%E7%9A%84%E6%95%B0%E9%87%8F%EF%BC%8C%E6%8F%90%E9%AB%98%E7%BD%91%E7%BB%9C%E5%88%A9%E7%94%A8%E7%8E%87%3C/span%3E" STYLE="fork"/>
          <node TEXT="TCP的累计应答是指接收方可以一次性确认接收到多个连续的数据包，而不是每收到一个数据包就发送一个ACK。这样可以减少ACK报文的数量，提高网络效率" ID="5Uii3izA2P" _mubu_text="%3Cspan%3ETCP%E7%9A%84%E7%B4%AF%E8%AE%A1%E5%BA%94%E7%AD%94%E6%98%AF%E6%8C%87%E6%8E%A5%E6%94%B6%E6%96%B9%E5%8F%AF%E4%BB%A5%E4%B8%80%E6%AC%A1%E6%80%A7%E7%A1%AE%E8%AE%A4%E6%8E%A5%E6%94%B6%E5%88%B0%E5%A4%9A%E4%B8%AA%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E6%AF%8F%E6%94%B6%E5%88%B0%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E5%B0%B1%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AAACK%E3%80%82%E8%BF%99%E6%A0%B7%E5%8F%AF%E4%BB%A5%E5%87%8F%E5%B0%91ACK%E6%8A%A5%E6%96%87%E7%9A%84%E6%95%B0%E9%87%8F%EF%BC%8C%E6%8F%90%E9%AB%98%E7%BD%91%E7%BB%9C%E6%95%88%E7%8E%87%3C/span%3E" STYLE="fork"/>
        </node>
      </node>
    </node>
  </node>
</map>